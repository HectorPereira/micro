
3 Piano.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  0000027c  00000310  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000c4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  00000310  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000002a  00000000  00000000  0000033f  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000369  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000ae0  00000000  00000000  00000391  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006e6  00000000  00000000  00000e71  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002b3  00000000  00000000  00001557  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000060  00000000  00000000  0000180c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000208  00000000  00000000  0000186c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000219  00000000  00000000  00001a74  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001c8d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  00000266  00000266  000002fa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001ca8  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .rodata       00000008  00800100  00000274  00000308  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 15 .text.play    000000d2  000000c4  000000c4  00000158  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.main    00000058  00000196  00000196  0000022a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.libgcc.div 00000044  000001ee  000001ee  00000282  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.libgcc.mul 0000001e  00000232  00000232  000002c6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.__dummy_fini 00000002  0000026e  0000026e  00000302  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.__dummy_funcs_on_exit 00000002  00000270  00000270  00000304  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.__dummy_simulator_exit 00000002  00000272  00000272  00000306  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.exit    00000016  00000250  00000250  000002e4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text._Exit   00000004  0000026a  0000026a  000002fe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
   8:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
   c:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
  10:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
  14:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
  18:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
  1c:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
  20:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
  24:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
  28:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
  2c:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
  30:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
  34:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
  38:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
  3c:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
  40:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
  44:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
  48:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
  4c:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
  50:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
  54:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
  58:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
  5c:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
  60:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
  64:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>

00000068 <.dinit>:
  68:	01 00       	.word	0x0001	; ????
  6a:	01 08       	sbc	r0, r1
  6c:	00 02       	muls	r16, r16
  6e:	74 00       	.word	0x0074	; ????

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d8 e0       	ldi	r29, 0x08	; 8
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	e8 e6       	ldi	r30, 0x68	; 104
  7e:	f0 e0       	ldi	r31, 0x00	; 0
  80:	40 e0       	ldi	r20, 0x00	; 0
  82:	17 c0       	rjmp	.+46     	; 0xb2 <__do_clear_bss+0x8>
  84:	b5 91       	lpm	r27, Z+
  86:	a5 91       	lpm	r26, Z+
  88:	35 91       	lpm	r19, Z+
  8a:	25 91       	lpm	r18, Z+
  8c:	05 91       	lpm	r16, Z+
  8e:	07 fd       	sbrc	r16, 7
  90:	0c c0       	rjmp	.+24     	; 0xaa <__do_clear_bss>
  92:	95 91       	lpm	r25, Z+
  94:	85 91       	lpm	r24, Z+
  96:	ef 01       	movw	r28, r30
  98:	f9 2f       	mov	r31, r25
  9a:	e8 2f       	mov	r30, r24
  9c:	05 90       	lpm	r0, Z+
  9e:	0d 92       	st	X+, r0
  a0:	a2 17       	cp	r26, r18
  a2:	b3 07       	cpc	r27, r19
  a4:	d9 f7       	brne	.-10     	; 0x9c <__do_copy_data+0x20>
  a6:	fe 01       	movw	r30, r28
  a8:	04 c0       	rjmp	.+8      	; 0xb2 <__do_clear_bss+0x8>

000000aa <__do_clear_bss>:
  aa:	1d 92       	st	X+, r1
  ac:	a2 17       	cp	r26, r18
  ae:	b3 07       	cpc	r27, r19
  b0:	e1 f7       	brne	.-8      	; 0xaa <__do_clear_bss>
  b2:	ef 36       	cpi	r30, 0x6F	; 111
  b4:	f4 07       	cpc	r31, r20
  b6:	31 f7       	brne	.-52     	; 0x84 <__do_copy_data+0x8>
  b8:	0e 94 cb 00 	call	0x196	; 0x196 <main>
  bc:	0c 94 28 01 	jmp	0x250	; 0x250 <exit>

000000c0 <_exit>:
  c0:	f8 94       	cli

000000c2 <__stop_program>:
  c2:	ff cf       	rjmp	.-2      	; 0xc2 <__stop_program>

Disassembly of section .text:

00000266 <__bad_interrupt>:
 266:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.play:

000000c4 <play>:

#define F_CPU 16000000UL
#include <avr/io.h>
#include <util/delay.h>

void play(uint16_t freq){
  c4:	cf 92       	push	r12
  c6:	df 92       	push	r13
  c8:	ef 92       	push	r14
  ca:	ff 92       	push	r15
  cc:	1f 93       	push	r17
  ce:	cf 93       	push	r28
  d0:	df 93       	push	r29
  d2:	cd b7       	in	r28, 0x3d	; 61
  d4:	de b7       	in	r29, 0x3e	; 62
  d6:	2c 97       	sbiw	r28, 0x0c	; 12
  d8:	0f b6       	in	r0, 0x3f	; 63
  da:	f8 94       	cli
  dc:	de bf       	out	0x3e, r29	; 62
  de:	0f be       	out	0x3f, r0	; 63
  e0:	cd bf       	out	0x3d, r28	; 61
  e2:	7c 01       	movw	r14, r24
	if (!freq) return;
  e4:	89 2b       	or	r24, r25
  e6:	09 f4       	brne	.+2      	; 0xea <play+0x26>
  e8:	48 c0       	rjmp	.+144    	; 0x17a <play+0xb6>
	DDRD |= (1 << PORTD6);
  ea:	8a b1       	in	r24, 0x0a	; 10
  ec:	80 64       	ori	r24, 0x40	; 64
  ee:	8a b9       	out	0x0a, r24	; 10

	uint8_t presc_bits = 0b0; // Valor por defecto
	uint16_t ocr;

	// Probar prescalers
	const uint16_t presc_list[] = {8, 64, 256, 1024};
  f0:	88 e0       	ldi	r24, 0x08	; 8
  f2:	e0 e0       	ldi	r30, 0x00	; 0
  f4:	f1 e0       	ldi	r31, 0x01	; 1
  f6:	de 01       	movw	r26, r28
  f8:	11 96       	adiw	r26, 0x01	; 1
  fa:	01 90       	ld	r0, Z+
  fc:	0d 92       	st	X+, r0
  fe:	8a 95       	dec	r24
 100:	e1 f7       	brne	.-8      	; 0xfa <play+0x36>
	const uint8_t  bits_list[]  = { 0b010, 0b011, 0b100, 0b101 };
 102:	82 e0       	ldi	r24, 0x02	; 2
 104:	89 87       	std	Y+9, r24	; 0x09
 106:	83 e0       	ldi	r24, 0x03	; 3
 108:	8a 87       	std	Y+10, r24	; 0x0a
 10a:	84 e0       	ldi	r24, 0x04	; 4
 10c:	8b 87       	std	Y+11, r24	; 0x0b
 10e:	85 e0       	ldi	r24, 0x05	; 5
 110:	8c 87       	std	Y+12, r24	; 0x0c

	for (uint8_t i=0;i<4;i++) {
 112:	10 e0       	ldi	r17, 0x00	; 0
 114:	2b c0       	rjmp	.+86     	; 0x16c <play+0xa8>
		ocr = (F_CPU / (2UL * presc_list[i] * freq)) - 1;
 116:	c1 2e       	mov	r12, r17
 118:	d1 2c       	mov	r13, r1
 11a:	f6 01       	movw	r30, r12
 11c:	ee 0f       	add	r30, r30
 11e:	ff 1f       	adc	r31, r31
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	8c 0f       	add	r24, r28
 126:	9d 1f       	adc	r25, r29
 128:	e8 0f       	add	r30, r24
 12a:	f9 1f       	adc	r31, r25
 12c:	20 81       	ld	r18, Z
 12e:	31 81       	ldd	r19, Z+1	; 0x01
 130:	d7 01       	movw	r26, r14
 132:	0e 94 19 01 	call	0x232	; 0x232 <__umulhisi3>
 136:	9b 01       	movw	r18, r22
 138:	ac 01       	movw	r20, r24
 13a:	22 0f       	add	r18, r18
 13c:	33 1f       	adc	r19, r19
 13e:	44 1f       	adc	r20, r20
 140:	55 1f       	adc	r21, r21
 142:	60 e0       	ldi	r22, 0x00	; 0
 144:	74 e2       	ldi	r23, 0x24	; 36
 146:	84 ef       	ldi	r24, 0xF4	; 244
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	0e 94 f7 00 	call	0x1ee	; 0x1ee <__udivmodsi4>
 14e:	21 50       	subi	r18, 0x01	; 1
 150:	31 09       	sbc	r19, r1
		if (ocr <= 255) { presc_bits = bits_list[i]; break; }
 152:	2f 3f       	cpi	r18, 0xFF	; 255
 154:	31 05       	cpc	r19, r1
 156:	09 f0       	breq	.+2      	; 0x15a <play+0x96>
 158:	40 f4       	brcc	.+16     	; 0x16a <play+0xa6>
 15a:	e9 e0       	ldi	r30, 0x09	; 9
 15c:	f0 e0       	ldi	r31, 0x00	; 0
 15e:	ec 0f       	add	r30, r28
 160:	fd 1f       	adc	r31, r29
 162:	ec 0d       	add	r30, r12
 164:	fd 1d       	adc	r31, r13
 166:	80 81       	ld	r24, Z
 168:	04 c0       	rjmp	.+8      	; 0x172 <play+0xae>

	// Probar prescalers
	const uint16_t presc_list[] = {8, 64, 256, 1024};
	const uint8_t  bits_list[]  = { 0b010, 0b011, 0b100, 0b101 };

	for (uint8_t i=0;i<4;i++) {
 16a:	1f 5f       	subi	r17, 0xFF	; 255
 16c:	14 30       	cpi	r17, 0x04	; 4
 16e:	98 f2       	brcs	.-90     	; 0x116 <play+0x52>

void play(uint16_t freq){
	if (!freq) return;
	DDRD |= (1 << PORTD6);

	uint8_t presc_bits = 0b0; // Valor por defecto
 170:	80 e0       	ldi	r24, 0x00	; 0
	for (uint8_t i=0;i<4;i++) {
		ocr = (F_CPU / (2UL * presc_list[i] * freq)) - 1;
		if (ocr <= 255) { presc_bits = bits_list[i]; break; }
	}

	TCCR0A = (1 << COM0A0) | (1 << WGM01);
 172:	92 e4       	ldi	r25, 0x42	; 66
 174:	94 bd       	out	0x24, r25	; 36
	TCCR0B = presc_bits;        // chosen prescaler
 176:	85 bd       	out	0x25, r24	; 37
	OCR0A  = (uint8_t)ocr;
 178:	27 bd       	out	0x27, r18	; 39
}
 17a:	2c 96       	adiw	r28, 0x0c	; 12
 17c:	0f b6       	in	r0, 0x3f	; 63
 17e:	f8 94       	cli
 180:	de bf       	out	0x3e, r29	; 62
 182:	0f be       	out	0x3f, r0	; 63
 184:	cd bf       	out	0x3d, r28	; 61
 186:	df 91       	pop	r29
 188:	cf 91       	pop	r28
 18a:	1f 91       	pop	r17
 18c:	ff 90       	pop	r15
 18e:	ef 90       	pop	r14
 190:	df 90       	pop	r13
 192:	cf 90       	pop	r12
 194:	08 95       	ret

Disassembly of section .text.main:

00000196 <main>:
		

int main(void) {
	play(300);
 196:	8c e2       	ldi	r24, 0x2C	; 44
 198:	91 e0       	ldi	r25, 0x01	; 1
 19a:	0e 94 62 00 	call	0xc4	; 0xc4 <__data_load_end>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 19e:	2f ef       	ldi	r18, 0xFF	; 255
 1a0:	89 e6       	ldi	r24, 0x69	; 105
 1a2:	98 e1       	ldi	r25, 0x18	; 24
 1a4:	21 50       	subi	r18, 0x01	; 1
 1a6:	80 40       	sbci	r24, 0x00	; 0
 1a8:	90 40       	sbci	r25, 0x00	; 0
 1aa:	e1 f7       	brne	.-8      	; 0x1a4 <main+0xe>
 1ac:	00 c0       	rjmp	.+0      	; 0x1ae <main+0x18>
 1ae:	00 00       	nop
	_delay_ms(500);
	play(400);
 1b0:	80 e9       	ldi	r24, 0x90	; 144
 1b2:	91 e0       	ldi	r25, 0x01	; 1
 1b4:	0e 94 62 00 	call	0xc4	; 0xc4 <__data_load_end>
 1b8:	2f ef       	ldi	r18, 0xFF	; 255
 1ba:	89 e6       	ldi	r24, 0x69	; 105
 1bc:	98 e1       	ldi	r25, 0x18	; 24
 1be:	21 50       	subi	r18, 0x01	; 1
 1c0:	80 40       	sbci	r24, 0x00	; 0
 1c2:	90 40       	sbci	r25, 0x00	; 0
 1c4:	e1 f7       	brne	.-8      	; 0x1be <main+0x28>
 1c6:	00 c0       	rjmp	.+0      	; 0x1c8 <main+0x32>
 1c8:	00 00       	nop
	_delay_ms(500);
	play(500);
 1ca:	84 ef       	ldi	r24, 0xF4	; 244
 1cc:	91 e0       	ldi	r25, 0x01	; 1
 1ce:	0e 94 62 00 	call	0xc4	; 0xc4 <__data_load_end>
 1d2:	2f ef       	ldi	r18, 0xFF	; 255
 1d4:	89 e6       	ldi	r24, 0x69	; 105
 1d6:	98 e1       	ldi	r25, 0x18	; 24
 1d8:	21 50       	subi	r18, 0x01	; 1
 1da:	80 40       	sbci	r24, 0x00	; 0
 1dc:	90 40       	sbci	r25, 0x00	; 0
 1de:	e1 f7       	brne	.-8      	; 0x1d8 <main+0x42>
 1e0:	00 c0       	rjmp	.+0      	; 0x1e2 <main+0x4c>
 1e2:	00 00       	nop
	_delay_ms(500);
	play(600);
 1e4:	88 e5       	ldi	r24, 0x58	; 88
 1e6:	92 e0       	ldi	r25, 0x02	; 2
 1e8:	0e 94 62 00 	call	0xc4	; 0xc4 <__data_load_end>
 1ec:	ff cf       	rjmp	.-2      	; 0x1ec <main+0x56>

Disassembly of section .text.libgcc.div:

000001ee <__udivmodsi4>:
 1ee:	a1 e2       	ldi	r26, 0x21	; 33
 1f0:	1a 2e       	mov	r1, r26
 1f2:	aa 1b       	sub	r26, r26
 1f4:	bb 1b       	sub	r27, r27
 1f6:	fd 01       	movw	r30, r26
 1f8:	0d c0       	rjmp	.+26     	; 0x214 <__udivmodsi4_ep>

000001fa <__udivmodsi4_loop>:
 1fa:	aa 1f       	adc	r26, r26
 1fc:	bb 1f       	adc	r27, r27
 1fe:	ee 1f       	adc	r30, r30
 200:	ff 1f       	adc	r31, r31
 202:	a2 17       	cp	r26, r18
 204:	b3 07       	cpc	r27, r19
 206:	e4 07       	cpc	r30, r20
 208:	f5 07       	cpc	r31, r21
 20a:	20 f0       	brcs	.+8      	; 0x214 <__udivmodsi4_ep>
 20c:	a2 1b       	sub	r26, r18
 20e:	b3 0b       	sbc	r27, r19
 210:	e4 0b       	sbc	r30, r20
 212:	f5 0b       	sbc	r31, r21

00000214 <__udivmodsi4_ep>:
 214:	66 1f       	adc	r22, r22
 216:	77 1f       	adc	r23, r23
 218:	88 1f       	adc	r24, r24
 21a:	99 1f       	adc	r25, r25
 21c:	1a 94       	dec	r1
 21e:	69 f7       	brne	.-38     	; 0x1fa <__udivmodsi4_loop>
 220:	60 95       	com	r22
 222:	70 95       	com	r23
 224:	80 95       	com	r24
 226:	90 95       	com	r25
 228:	9b 01       	movw	r18, r22
 22a:	ac 01       	movw	r20, r24
 22c:	bd 01       	movw	r22, r26
 22e:	cf 01       	movw	r24, r30
 230:	08 95       	ret

Disassembly of section .text.libgcc.mul:

00000232 <__umulhisi3>:
 232:	a2 9f       	mul	r26, r18
 234:	b0 01       	movw	r22, r0
 236:	b3 9f       	mul	r27, r19
 238:	c0 01       	movw	r24, r0
 23a:	a3 9f       	mul	r26, r19
 23c:	70 0d       	add	r23, r0
 23e:	81 1d       	adc	r24, r1
 240:	11 24       	eor	r1, r1
 242:	91 1d       	adc	r25, r1
 244:	b2 9f       	mul	r27, r18
 246:	70 0d       	add	r23, r0
 248:	81 1d       	adc	r24, r1
 24a:	11 24       	eor	r1, r1
 24c:	91 1d       	adc	r25, r1
 24e:	08 95       	ret

Disassembly of section .text.__dummy_fini:

0000026e <_fini>:
 26e:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

00000270 <__funcs_on_exit>:
 270:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

00000272 <__simulator_exit>:
 272:	08 95       	ret

Disassembly of section .text.exit:

00000250 <exit>:
 250:	ec 01       	movw	r28, r24
 252:	0e 94 38 01 	call	0x270	; 0x270 <__funcs_on_exit>
 256:	0e 94 37 01 	call	0x26e	; 0x26e <_fini>
 25a:	ce 01       	movw	r24, r28
 25c:	0e 94 39 01 	call	0x272	; 0x272 <__simulator_exit>
 260:	ce 01       	movw	r24, r28
 262:	0e 94 35 01 	call	0x26a	; 0x26a <_Exit>

Disassembly of section .text._Exit:

0000026a <_Exit>:
 26a:	0e 94 60 00 	call	0xc0	; 0xc0 <_exit>
