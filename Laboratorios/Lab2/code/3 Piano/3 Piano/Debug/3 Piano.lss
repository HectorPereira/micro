
3 Piano.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001e2  2**0
                  ALLOC, LOAD, DATA
  1 .text         00000080  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  000001e2  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000001c  00000000  00000000  00000211  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  0000022d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008d3  00000000  00000000  00000255  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000063c  00000000  00000000  00000b28  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000022e  00000000  00000000  00001164  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000040  00000000  00000000  00001394  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000208  00000000  00000000  000013d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000089  00000000  00000000  000015dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001665  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  00000160  00000160  000001d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001680  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.play    0000007c  00000080  00000080  000000f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.main    0000000a  00000156  00000156  000001ca  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.libgcc.div 00000044  000000fc  000000fc  00000170  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.__dummy_fini 00000002  00000168  00000168  000001dc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.__dummy_funcs_on_exit 00000002  0000016a  0000016a  000001de  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.__dummy_simulator_exit 00000002  0000016c  0000016c  000001e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.exit    00000016  00000140  00000140  000001b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text._Exit   00000004  00000164  00000164  000001d8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
   8:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
   c:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  10:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  14:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  18:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  1c:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  20:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  24:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  28:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  2c:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  30:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  34:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  38:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  3c:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  40:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  44:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  48:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  4c:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  50:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  54:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  58:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  5c:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  60:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  64:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 ab 00 	call	0x156	; 0x156 <main>
  78:	0c 94 a0 00 	jmp	0x140	; 0x140 <exit>

0000007c <_exit>:
  7c:	f8 94       	cli

0000007e <__stop_program>:
  7e:	ff cf       	rjmp	.-2      	; 0x7e <__stop_program>

Disassembly of section .text:

00000160 <__bad_interrupt>:
 160:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.play:

00000080 <play>:
 */ 

#define F_CPU 16000000UL
#include <avr/io.h>

void play(uint16_t Fout){
  80:	cf 93       	push	r28
  82:	df 93       	push	r29
  84:	ec 01       	movw	r28, r24
	DDRD |= (1 << PORTD6);				// OC0A = PD6
  86:	8a b1       	in	r24, 0x0a	; 10
  88:	80 64       	ori	r24, 0x40	; 64
  8a:	8a b9       	out	0x0a, r24	; 10
	
	uint16_t prescaler = 0;
	if (Fout < 128) prescaler = 1024;
  8c:	c0 38       	cpi	r28, 0x80	; 128
  8e:	d1 05       	cpc	r29, r1
  90:	38 f0       	brcs	.+14     	; 0xa0 <play+0x20>
	else if (Fout < 490) prescaler = 256;
  92:	ca 3e       	cpi	r28, 0xEA	; 234
  94:	81 e0       	ldi	r24, 0x01	; 1
  96:	d8 07       	cpc	r29, r24
  98:	30 f4       	brcc	.+12     	; 0xa6 <play+0x26>
  9a:	80 e0       	ldi	r24, 0x00	; 0
  9c:	91 e0       	ldi	r25, 0x01	; 1
  9e:	05 c0       	rjmp	.+10     	; 0xaa <play+0x2a>

void play(uint16_t Fout){
	DDRD |= (1 << PORTD6);				// OC0A = PD6
	
	uint16_t prescaler = 0;
	if (Fout < 128) prescaler = 1024;
  a0:	80 e0       	ldi	r24, 0x00	; 0
  a2:	94 e0       	ldi	r25, 0x04	; 4
  a4:	02 c0       	rjmp	.+4      	; 0xaa <play+0x2a>
	else if (Fout < 490) prescaler = 256;
	else prescaler = 64;
  a6:	80 e4       	ldi	r24, 0x40	; 64
  a8:	90 e0       	ldi	r25, 0x00	; 0

	OCR0A = (F_CPU/(2*prescaler*Fout))+1;
  aa:	8c 9f       	mul	r24, r28
  ac:	90 01       	movw	r18, r0
  ae:	8d 9f       	mul	r24, r29
  b0:	30 0d       	add	r19, r0
  b2:	9c 9f       	mul	r25, r28
  b4:	30 0d       	add	r19, r0
  b6:	11 24       	eor	r1, r1
  b8:	22 0f       	add	r18, r18
  ba:	33 1f       	adc	r19, r19
  bc:	40 e0       	ldi	r20, 0x00	; 0
  be:	50 e0       	ldi	r21, 0x00	; 0
  c0:	60 e0       	ldi	r22, 0x00	; 0
  c2:	74 e2       	ldi	r23, 0x24	; 36
  c4:	84 ef       	ldi	r24, 0xF4	; 244
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	0e 94 7e 00 	call	0xfc	; 0xfc <__udivmodsi4>
  cc:	2f 5f       	subi	r18, 0xFF	; 255
  ce:	27 bd       	out	0x27, r18	; 39
	
	TCCR0A = (1 << WGM01);              // CTC mode
  d0:	82 e0       	ldi	r24, 0x02	; 2
  d2:	84 bd       	out	0x24, r24	; 36
	TCCR0A |= (1 << COM0A0);            // Toggle OC0A on match
  d4:	84 b5       	in	r24, 0x24	; 36
  d6:	80 64       	ori	r24, 0x40	; 64
  d8:	84 bd       	out	0x24, r24	; 36
	
	if (Fout < 128) TCCR0B  = 0b101;
  da:	c0 38       	cpi	r28, 0x80	; 128
  dc:	d1 05       	cpc	r29, r1
  de:	18 f4       	brcc	.+6      	; 0xe6 <play+0x66>
  e0:	85 e0       	ldi	r24, 0x05	; 5
  e2:	85 bd       	out	0x25, r24	; 37
  e4:	08 c0       	rjmp	.+16     	; 0xf6 <play+0x76>
	else if (Fout < 490) TCCR0B  = 0b100;
  e6:	ca 3e       	cpi	r28, 0xEA	; 234
  e8:	d1 40       	sbci	r29, 0x01	; 1
  ea:	18 f4       	brcc	.+6      	; 0xf2 <play+0x72>
  ec:	84 e0       	ldi	r24, 0x04	; 4
  ee:	85 bd       	out	0x25, r24	; 37
  f0:	02 c0       	rjmp	.+4      	; 0xf6 <play+0x76>
	else TCCR0B  = 0b011;
  f2:	83 e0       	ldi	r24, 0x03	; 3
  f4:	85 bd       	out	0x25, r24	; 37
	
}
  f6:	df 91       	pop	r29
  f8:	cf 91       	pop	r28
  fa:	08 95       	ret

Disassembly of section .text.main:

00000156 <main>:
		

int main(void) {
	play(500);
 156:	84 ef       	ldi	r24, 0xF4	; 244
 158:	91 e0       	ldi	r25, 0x01	; 1
 15a:	0e 94 40 00 	call	0x80	; 0x80 <__data_load_end>
 15e:	ff cf       	rjmp	.-2      	; 0x15e <main+0x8>

Disassembly of section .text.libgcc.div:

000000fc <__udivmodsi4>:
  fc:	a1 e2       	ldi	r26, 0x21	; 33
  fe:	1a 2e       	mov	r1, r26
 100:	aa 1b       	sub	r26, r26
 102:	bb 1b       	sub	r27, r27
 104:	fd 01       	movw	r30, r26
 106:	0d c0       	rjmp	.+26     	; 0x122 <__udivmodsi4_ep>

00000108 <__udivmodsi4_loop>:
 108:	aa 1f       	adc	r26, r26
 10a:	bb 1f       	adc	r27, r27
 10c:	ee 1f       	adc	r30, r30
 10e:	ff 1f       	adc	r31, r31
 110:	a2 17       	cp	r26, r18
 112:	b3 07       	cpc	r27, r19
 114:	e4 07       	cpc	r30, r20
 116:	f5 07       	cpc	r31, r21
 118:	20 f0       	brcs	.+8      	; 0x122 <__udivmodsi4_ep>
 11a:	a2 1b       	sub	r26, r18
 11c:	b3 0b       	sbc	r27, r19
 11e:	e4 0b       	sbc	r30, r20
 120:	f5 0b       	sbc	r31, r21

00000122 <__udivmodsi4_ep>:
 122:	66 1f       	adc	r22, r22
 124:	77 1f       	adc	r23, r23
 126:	88 1f       	adc	r24, r24
 128:	99 1f       	adc	r25, r25
 12a:	1a 94       	dec	r1
 12c:	69 f7       	brne	.-38     	; 0x108 <__udivmodsi4_loop>
 12e:	60 95       	com	r22
 130:	70 95       	com	r23
 132:	80 95       	com	r24
 134:	90 95       	com	r25
 136:	9b 01       	movw	r18, r22
 138:	ac 01       	movw	r20, r24
 13a:	bd 01       	movw	r22, r26
 13c:	cf 01       	movw	r24, r30
 13e:	08 95       	ret

Disassembly of section .text.__dummy_fini:

00000168 <_fini>:
 168:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

0000016a <__funcs_on_exit>:
 16a:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

0000016c <__simulator_exit>:
 16c:	08 95       	ret

Disassembly of section .text.exit:

00000140 <exit>:
 140:	ec 01       	movw	r28, r24
 142:	0e 94 b5 00 	call	0x16a	; 0x16a <__funcs_on_exit>
 146:	0e 94 b4 00 	call	0x168	; 0x168 <_fini>
 14a:	ce 01       	movw	r24, r28
 14c:	0e 94 b6 00 	call	0x16c	; 0x16c <__simulator_exit>
 150:	ce 01       	movw	r24, r28
 152:	0e 94 b2 00 	call	0x164	; 0x164 <_Exit>

Disassembly of section .text._Exit:

00000164 <_Exit>:
 164:	0e 94 3e 00 	call	0x7c	; 0x7c <_exit>
