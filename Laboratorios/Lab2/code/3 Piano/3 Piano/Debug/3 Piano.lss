
3 Piano.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000132  2**0
                  ALLOC, LOAD, DATA
  1 .text         00000080  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  00000132  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  00000161  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  0000016f  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000086b  00000000  00000000  0000018f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005ed  00000000  00000000  000009fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001d6  00000000  00000000  00000fe7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000011c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000208  00000000  00000000  000011e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  000013ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  000000b0  000000b0  00000124  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000013fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.main    0000001a  00000080  00000080  000000f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.__dummy_fini 00000002  000000b8  000000b8  0000012c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.__dummy_funcs_on_exit 00000002  000000ba  000000ba  0000012e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.__dummy_simulator_exit 00000002  000000bc  000000bc  00000130  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.exit    00000016  0000009a  0000009a  0000010e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text._Exit   00000004  000000b4  000000b4  00000128  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   8:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  10:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  14:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  18:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  1c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  20:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  24:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  28:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  2c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  30:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  34:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  38:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  3c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  40:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  44:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  48:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  4c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  50:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  54:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  58:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  5c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  60:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  64:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <_etext>
  78:	0c 94 4d 00 	jmp	0x9a	; 0x9a <exit>

0000007c <_exit>:
  7c:	f8 94       	cli

0000007e <__stop_program>:
  7e:	ff cf       	rjmp	.-2      	; 0x7e <__stop_program>

Disassembly of section .text:

000000b0 <__bad_interrupt>:
  b0:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.main:

00000080 <main>:
#define F_CPU 16000000UL
#include <avr/io.h>

int main(void) {
	// --- Output pin setup (OC0A = PB7 on ATmega328P) ---
	DDRD |= (1 << PD6);   // OC0A is PD6 on Arduino Uno
  80:	8a b1       	in	r24, 0x0a	; 10
  82:	80 64       	ori	r24, 0x40	; 64
  84:	8a b9       	out	0x0a, r24	; 10

	// --- Timer0 CTC mode ---
	TCCR0A = (1 << WGM01);              // CTC mode (WGM01=1)
  86:	82 e0       	ldi	r24, 0x02	; 2
  88:	84 bd       	out	0x24, r24	; 36
	TCCR0A |= (1 << COM0A0);            // Toggle OC0A on compare match
  8a:	84 b5       	in	r24, 0x24	; 36
  8c:	80 64       	ori	r24, 0x40	; 64
  8e:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1 << CS01) | (1 << CS00); // Prescaler 64
  90:	83 e0       	ldi	r24, 0x03	; 3
  92:	85 bd       	out	0x25, r24	; 37

	// --- Compare value for desired frequency ---
	OCR0A = 124;  // Example: ~1 kHz square wave with F_CPU=16 MHz and prescaler=64
  94:	8c e7       	ldi	r24, 0x7C	; 124
  96:	87 bd       	out	0x27, r24	; 39
  98:	ff cf       	rjmp	.-2      	; 0x98 <main+0x18>

Disassembly of section .text.__dummy_fini:

000000b8 <_fini>:
  b8:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

000000ba <__funcs_on_exit>:
  ba:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

000000bc <__simulator_exit>:
  bc:	08 95       	ret

Disassembly of section .text.exit:

0000009a <exit>:
  9a:	ec 01       	movw	r28, r24
  9c:	0e 94 5d 00 	call	0xba	; 0xba <__funcs_on_exit>
  a0:	0e 94 5c 00 	call	0xb8	; 0xb8 <_fini>
  a4:	ce 01       	movw	r24, r28
  a6:	0e 94 5e 00 	call	0xbc	; 0xbc <__simulator_exit>
  aa:	ce 01       	movw	r24, r28
  ac:	0e 94 5a 00 	call	0xb4	; 0xb4 <_Exit>

Disassembly of section .text._Exit:

000000b4 <_Exit>:
  b4:	0e 94 3e 00 	call	0x7c	; 0x7c <_exit>
