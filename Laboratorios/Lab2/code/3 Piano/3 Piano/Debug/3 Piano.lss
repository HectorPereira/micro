
3 Piano.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000c12  00000cc6  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000c8  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  00000cc6  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000002a  00000000  00000000  00000cf5  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  00000d1f  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000ba2  00000000  00000000  00000d67  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006fd  00000000  00000000  00001909  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000033a  00000000  00000000  00002006  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000120  00000000  00000000  00002340  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000208  00000000  00000000  00002460  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000031d  00000000  00000000  00002668  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00002985  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  00000bf8  00000bf8  00000cac  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000029c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.read_midi_event 00000072  00000ae4  00000ae4  00000b98  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .rodata       00000008  00800100  00000c0a  00000cbe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 16 .text.playA   00000126  000008f6  000008f6  000009aa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.stopA   00000004  00000bfc  00000bfc  00000cb0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.__vector_13 000000c8  00000a1c  00000a1c  00000ad0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.timer1_init 00000022  00000b9a  00000b9a  00000c4e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.main    00000008  00000bf0  00000bf0  00000ca4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .bss.enableCountAoff 00000001  00800110  00800110  00000cc6  2**0
                  ALLOC
 22 .bss.enableCountAon 00000001  00800111  00800111  00000cc6  2**0
                  ALLOC
 23 .bss.maxCountAoff 00000002  00800108  00800108  00000cc6  2**0
                  ALLOC
 24 .bss.maxCountAon 00000002  0080010a  0080010a  00000cc6  2**0
                  ALLOC
 25 .bss.countA   00000002  0080010c  0080010c  00000cc6  2**0
                  ALLOC
 26 .bss.indexA   00000002  0080010e  0080010e  00000cc6  2**0
                  ALLOC
 27 .progmemx.data.midiA 0000082e  000000c8  000000c8  0000017c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 28 .text.libgcc.div 00000044  00000b56  00000b56  00000c0a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.libgcc.mul 0000001e  00000bbc  00000bbc  00000c70  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.__dummy_fini 00000002  00000c04  00000c04  00000cb8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.__dummy_funcs_on_exit 00000002  00000c06  00000c06  00000cba  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text.__dummy_simulator_exit 00000002  00000c08  00000c08  00000cbc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .text.exit    00000016  00000bda  00000bda  00000c8e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .text._Exit   00000004  00000c00  00000c00  00000cb4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3a 00 	jmp	0x74	; 0x74 <__ctors_end>
   4:	0c 94 fc 05 	jmp	0xbf8	; 0xbf8 <__bad_interrupt>
   8:	0c 94 fc 05 	jmp	0xbf8	; 0xbf8 <__bad_interrupt>
   c:	0c 94 fc 05 	jmp	0xbf8	; 0xbf8 <__bad_interrupt>
  10:	0c 94 fc 05 	jmp	0xbf8	; 0xbf8 <__bad_interrupt>
  14:	0c 94 fc 05 	jmp	0xbf8	; 0xbf8 <__bad_interrupt>
  18:	0c 94 fc 05 	jmp	0xbf8	; 0xbf8 <__bad_interrupt>
  1c:	0c 94 fc 05 	jmp	0xbf8	; 0xbf8 <__bad_interrupt>
  20:	0c 94 fc 05 	jmp	0xbf8	; 0xbf8 <__bad_interrupt>
  24:	0c 94 fc 05 	jmp	0xbf8	; 0xbf8 <__bad_interrupt>
  28:	0c 94 fc 05 	jmp	0xbf8	; 0xbf8 <__bad_interrupt>
  2c:	0c 94 fc 05 	jmp	0xbf8	; 0xbf8 <__bad_interrupt>
  30:	0c 94 fc 05 	jmp	0xbf8	; 0xbf8 <__bad_interrupt>
  34:	0c 94 0e 05 	jmp	0xa1c	; 0xa1c <__vector_13>
  38:	0c 94 fc 05 	jmp	0xbf8	; 0xbf8 <__bad_interrupt>
  3c:	0c 94 fc 05 	jmp	0xbf8	; 0xbf8 <__bad_interrupt>
  40:	0c 94 fc 05 	jmp	0xbf8	; 0xbf8 <__bad_interrupt>
  44:	0c 94 fc 05 	jmp	0xbf8	; 0xbf8 <__bad_interrupt>
  48:	0c 94 fc 05 	jmp	0xbf8	; 0xbf8 <__bad_interrupt>
  4c:	0c 94 fc 05 	jmp	0xbf8	; 0xbf8 <__bad_interrupt>
  50:	0c 94 fc 05 	jmp	0xbf8	; 0xbf8 <__bad_interrupt>
  54:	0c 94 fc 05 	jmp	0xbf8	; 0xbf8 <__bad_interrupt>
  58:	0c 94 fc 05 	jmp	0xbf8	; 0xbf8 <__bad_interrupt>
  5c:	0c 94 fc 05 	jmp	0xbf8	; 0xbf8 <__bad_interrupt>
  60:	0c 94 fc 05 	jmp	0xbf8	; 0xbf8 <__bad_interrupt>
  64:	0c 94 fc 05 	jmp	0xbf8	; 0xbf8 <__bad_interrupt>

00000068 <.dinit>:
  68:	01 00       	.word	0x0001	; ????
  6a:	01 08       	sbc	r0, r1
  6c:	00 0c       	add	r0, r0
  6e:	0a 01       	movw	r0, r20
  70:	08 01       	movw	r0, r16
  72:	12 80       	ldd	r1, Z+2	; 0x02

00000074 <__ctors_end>:
  74:	11 24       	eor	r1, r1
  76:	1f be       	out	0x3f, r1	; 63
  78:	cf ef       	ldi	r28, 0xFF	; 255
  7a:	d8 e0       	ldi	r29, 0x08	; 8
  7c:	de bf       	out	0x3e, r29	; 62
  7e:	cd bf       	out	0x3d, r28	; 61

00000080 <__do_copy_data>:
  80:	e8 e6       	ldi	r30, 0x68	; 104
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	40 e0       	ldi	r20, 0x00	; 0
  86:	17 c0       	rjmp	.+46     	; 0xb6 <__do_clear_bss+0x8>
  88:	b5 91       	lpm	r27, Z+
  8a:	a5 91       	lpm	r26, Z+
  8c:	35 91       	lpm	r19, Z+
  8e:	25 91       	lpm	r18, Z+
  90:	05 91       	lpm	r16, Z+
  92:	07 fd       	sbrc	r16, 7
  94:	0c c0       	rjmp	.+24     	; 0xae <__do_clear_bss>
  96:	95 91       	lpm	r25, Z+
  98:	85 91       	lpm	r24, Z+
  9a:	ef 01       	movw	r28, r30
  9c:	f9 2f       	mov	r31, r25
  9e:	e8 2f       	mov	r30, r24
  a0:	05 90       	lpm	r0, Z+
  a2:	0d 92       	st	X+, r0
  a4:	a2 17       	cp	r26, r18
  a6:	b3 07       	cpc	r27, r19
  a8:	d9 f7       	brne	.-10     	; 0xa0 <__do_copy_data+0x20>
  aa:	fe 01       	movw	r30, r28
  ac:	04 c0       	rjmp	.+8      	; 0xb6 <__do_clear_bss+0x8>

000000ae <__do_clear_bss>:
  ae:	1d 92       	st	X+, r1
  b0:	a2 17       	cp	r26, r18
  b2:	b3 07       	cpc	r27, r19
  b4:	e1 f7       	brne	.-8      	; 0xae <__do_clear_bss>
  b6:	e4 37       	cpi	r30, 0x74	; 116
  b8:	f4 07       	cpc	r31, r20
  ba:	31 f7       	brne	.-52     	; 0x88 <__do_copy_data+0x8>
  bc:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <main>
  c0:	0c 94 ed 05 	jmp	0xbda	; 0xbda <exit>

000000c4 <_exit>:
  c4:	f8 94       	cli

000000c6 <__stop_program>:
  c6:	ff cf       	rjmp	.-2      	; 0xc6 <__stop_program>

Disassembly of section .text:

00000bf8 <__bad_interrupt>:
 bf8:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.read_midi_event:

00000ae4 <read_midi_event>:
uint16_t maxCountAoff = 0;
uint8_t enableCountAon = 0;
uint8_t enableCountAoff = 0;


void read_midi_event(const int (*track)[3], uint16_t index, int out_values[3]) {
 ae4:	8f 92       	push	r8
 ae6:	9f 92       	push	r9
 ae8:	af 92       	push	r10
 aea:	cf 92       	push	r12
 aec:	df 92       	push	r13
 aee:	ef 92       	push	r14
 af0:	1f 93       	push	r17
 af2:	cf 93       	push	r28
 af4:	df 93       	push	r29
 af6:	6b 01       	movw	r12, r22
 af8:	e8 2e       	mov	r14, r24
	for (uint8_t i = 0; i < 3; i++) {
 afa:	10 e0       	ldi	r17, 0x00	; 0
 afc:	20 c0       	rjmp	.+64     	; 0xb3e <read_midi_event+0x5a>
		out_values[i] = pgm_read_word(&(track[index][i]));
 afe:	61 2f       	mov	r22, r17
 b00:	70 e0       	ldi	r23, 0x00	; 0
 b02:	66 0f       	add	r22, r22
 b04:	77 1f       	adc	r23, r23
 b06:	e9 01       	movw	r28, r18
 b08:	c6 0f       	add	r28, r22
 b0a:	d7 1f       	adc	r29, r23
 b0c:	ca 01       	movw	r24, r20
 b0e:	88 0f       	add	r24, r24
 b10:	99 1f       	adc	r25, r25
 b12:	84 0f       	add	r24, r20
 b14:	95 1f       	adc	r25, r21
 b16:	88 0f       	add	r24, r24
 b18:	99 1f       	adc	r25, r25
 b1a:	46 01       	movw	r8, r12
 b1c:	ae 2c       	mov	r10, r14
 b1e:	88 0e       	add	r8, r24
 b20:	99 1e       	adc	r9, r25
 b22:	a1 1c       	adc	r10, r1
 b24:	97 fd       	sbrc	r25, 7
 b26:	aa 94       	dec	r10
 b28:	aa 2d       	mov	r26, r10
 b2a:	c4 01       	movw	r24, r8
 b2c:	86 0f       	add	r24, r22
 b2e:	97 1f       	adc	r25, r23
 b30:	a1 1d       	adc	r26, r1
 b32:	fc 01       	movw	r30, r24
 b34:	85 91       	lpm	r24, Z+
 b36:	94 91       	lpm	r25, Z
 b38:	99 83       	std	Y+1, r25	; 0x01
 b3a:	88 83       	st	Y, r24
uint8_t enableCountAon = 0;
uint8_t enableCountAoff = 0;


void read_midi_event(const int (*track)[3], uint16_t index, int out_values[3]) {
	for (uint8_t i = 0; i < 3; i++) {
 b3c:	1f 5f       	subi	r17, 0xFF	; 255
 b3e:	13 30       	cpi	r17, 0x03	; 3
 b40:	f0 f2       	brcs	.-68     	; 0xafe <read_midi_event+0x1a>
		out_values[i] = pgm_read_word(&(track[index][i]));
	}
}
 b42:	df 91       	pop	r29
 b44:	cf 91       	pop	r28
 b46:	1f 91       	pop	r17
 b48:	ef 90       	pop	r14
 b4a:	df 90       	pop	r13
 b4c:	cf 90       	pop	r12
 b4e:	af 90       	pop	r10
 b50:	9f 90       	pop	r9
 b52:	8f 90       	pop	r8
 b54:	08 95       	ret

Disassembly of section .text.playA:

000008f6 <playA>:
// CONFIGURE TIMER 1 FOR 1MS OVERFLOW
// Handles note timing


// Timer 0 handles track A wave generation
void playA(){
 8f6:	af 92       	push	r10
 8f8:	bf 92       	push	r11
 8fa:	cf 92       	push	r12
 8fc:	df 92       	push	r13
 8fe:	ef 92       	push	r14
 900:	ff 92       	push	r15
 902:	1f 93       	push	r17
 904:	cf 93       	push	r28
 906:	df 93       	push	r29
 908:	cd b7       	in	r28, 0x3d	; 61
 90a:	de b7       	in	r29, 0x3e	; 62
 90c:	62 97       	sbiw	r28, 0x12	; 18
 90e:	0f b6       	in	r0, 0x3f	; 63
 910:	f8 94       	cli
 912:	de bf       	out	0x3e, r29	; 62
 914:	0f be       	out	0x3f, r0	; 63
 916:	cd bf       	out	0x3d, r28	; 61
	int values[3]; 
	read_midi_event(midiA, indexA++, values);
 918:	40 91 0e 01 	lds	r20, 0x010E	; 0x80010e <indexA>
 91c:	50 91 0f 01 	lds	r21, 0x010F	; 0x80010f <indexA+0x1>
 920:	ca 01       	movw	r24, r20
 922:	01 96       	adiw	r24, 0x01	; 1
 924:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <indexA+0x1>
 928:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <indexA>
 92c:	9e 01       	movw	r18, r28
 92e:	2f 5f       	subi	r18, 0xFF	; 255
 930:	3f 4f       	sbci	r19, 0xFF	; 255
 932:	68 ec       	ldi	r22, 0xC8	; 200
 934:	70 e0       	ldi	r23, 0x00	; 0
 936:	80 e0       	ldi	r24, 0x00	; 0
 938:	0e 94 72 05 	call	0xae4	; 0xae4 <read_midi_event>
	uint16_t freq = values[0];
 93c:	e9 80       	ldd	r14, Y+1	; 0x01
 93e:	fa 80       	ldd	r15, Y+2	; 0x02
	maxCountAon = values[1];
 940:	8b 81       	ldd	r24, Y+3	; 0x03
 942:	9c 81       	ldd	r25, Y+4	; 0x04
 944:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <maxCountAon+0x1>
 948:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <maxCountAon>
	maxCountAoff = values[2];
 94c:	8d 81       	ldd	r24, Y+5	; 0x05
 94e:	9e 81       	ldd	r25, Y+6	; 0x06
 950:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <maxCountAoff+0x1>
 954:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <maxCountAoff>
	
	if (!freq) return;
 958:	e1 14       	cp	r14, r1
 95a:	f1 04       	cpc	r15, r1
 95c:	09 f4       	brne	.+2      	; 0x960 <__stack+0x61>
 95e:	4e c0       	rjmp	.+156    	; 0x9fc <__stack+0xfd>
	DDRD |= (1 << PORTD6);
 960:	8a b1       	in	r24, 0x0a	; 10
 962:	80 64       	ori	r24, 0x40	; 64
 964:	8a b9       	out	0x0a, r24	; 10

	uint8_t presc_bits = 0b0; // Valor por defecto
	uint16_t ocr;

	// Probar todos los prescalers
	const uint16_t presc_list[] = {8, 64, 256, 1024};
 966:	88 e0       	ldi	r24, 0x08	; 8
 968:	e0 e0       	ldi	r30, 0x00	; 0
 96a:	f1 e0       	ldi	r31, 0x01	; 1
 96c:	de 01       	movw	r26, r28
 96e:	17 96       	adiw	r26, 0x07	; 7
 970:	01 90       	ld	r0, Z+
 972:	0d 92       	st	X+, r0
 974:	8a 95       	dec	r24
 976:	e1 f7       	brne	.-8      	; 0x970 <__stack+0x71>
	const uint8_t  bits_list[]  = { 0b010, 0b011, 0b100, 0b101 };
 978:	82 e0       	ldi	r24, 0x02	; 2
 97a:	8f 87       	std	Y+15, r24	; 0x0f
 97c:	83 e0       	ldi	r24, 0x03	; 3
 97e:	88 8b       	std	Y+16, r24	; 0x10
 980:	84 e0       	ldi	r24, 0x04	; 4
 982:	89 8b       	std	Y+17, r24	; 0x11
 984:	85 e0       	ldi	r24, 0x05	; 5
 986:	8a 8b       	std	Y+18, r24	; 0x12

	for (uint8_t i=0;i<4;i++) {
 988:	10 e0       	ldi	r17, 0x00	; 0
 98a:	2e c0       	rjmp	.+92     	; 0x9e8 <__stack+0xe9>
		ocr = (F_CPU / (2UL * presc_list[i] * freq)) - 1;
 98c:	c1 2e       	mov	r12, r17
 98e:	d1 2c       	mov	r13, r1
 990:	f6 01       	movw	r30, r12
 992:	ee 0f       	add	r30, r30
 994:	ff 1f       	adc	r31, r31
 996:	81 e0       	ldi	r24, 0x01	; 1
 998:	90 e0       	ldi	r25, 0x00	; 0
 99a:	8c 0f       	add	r24, r28
 99c:	9d 1f       	adc	r25, r29
 99e:	e8 0f       	add	r30, r24
 9a0:	f9 1f       	adc	r31, r25
 9a2:	26 81       	ldd	r18, Z+6	; 0x06
 9a4:	37 81       	ldd	r19, Z+7	; 0x07
 9a6:	d7 01       	movw	r26, r14
 9a8:	0e 94 de 05 	call	0xbbc	; 0xbbc <__umulhisi3>
 9ac:	9b 01       	movw	r18, r22
 9ae:	ac 01       	movw	r20, r24
 9b0:	22 0f       	add	r18, r18
 9b2:	33 1f       	adc	r19, r19
 9b4:	44 1f       	adc	r20, r20
 9b6:	55 1f       	adc	r21, r21
 9b8:	60 e0       	ldi	r22, 0x00	; 0
 9ba:	74 e2       	ldi	r23, 0x24	; 36
 9bc:	84 ef       	ldi	r24, 0xF4	; 244
 9be:	90 e0       	ldi	r25, 0x00	; 0
 9c0:	0e 94 ab 05 	call	0xb56	; 0xb56 <__udivmodsi4>
 9c4:	59 01       	movw	r10, r18
 9c6:	91 e0       	ldi	r25, 0x01	; 1
 9c8:	a9 1a       	sub	r10, r25
 9ca:	b1 08       	sbc	r11, r1
		if (ocr <= 255) { presc_bits = bits_list[i]; break; }
 9cc:	8f ef       	ldi	r24, 0xFF	; 255
 9ce:	a8 16       	cp	r10, r24
 9d0:	b1 04       	cpc	r11, r1
 9d2:	09 f0       	breq	.+2      	; 0x9d6 <__stack+0xd7>
 9d4:	40 f4       	brcc	.+16     	; 0x9e6 <__stack+0xe7>
 9d6:	ef e0       	ldi	r30, 0x0F	; 15
 9d8:	f0 e0       	ldi	r31, 0x00	; 0
 9da:	ec 0f       	add	r30, r28
 9dc:	fd 1f       	adc	r31, r29
 9de:	ec 0d       	add	r30, r12
 9e0:	fd 1d       	adc	r31, r13
 9e2:	80 81       	ld	r24, Z
 9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__stack+0xef>

	// Probar todos los prescalers
	const uint16_t presc_list[] = {8, 64, 256, 1024};
	const uint8_t  bits_list[]  = { 0b010, 0b011, 0b100, 0b101 };

	for (uint8_t i=0;i<4;i++) {
 9e6:	1f 5f       	subi	r17, 0xFF	; 255
 9e8:	14 30       	cpi	r17, 0x04	; 4
 9ea:	80 f2       	brcs	.-96     	; 0x98c <__stack+0x8d>
	maxCountAoff = values[2];
	
	if (!freq) return;
	DDRD |= (1 << PORTD6);

	uint8_t presc_bits = 0b0; // Valor por defecto
 9ec:	80 e0       	ldi	r24, 0x00	; 0
	for (uint8_t i=0;i<4;i++) {
		ocr = (F_CPU / (2UL * presc_list[i] * freq)) - 1;
		if (ocr <= 255) { presc_bits = bits_list[i]; break; }
	}

	TCCR0A = (1 << COM0A0) | (1 << WGM01);
 9ee:	92 e4       	ldi	r25, 0x42	; 66
 9f0:	94 bd       	out	0x24, r25	; 36
	TCCR0B = presc_bits;        // prescaler elegido
 9f2:	85 bd       	out	0x25, r24	; 37
	OCR0A  = (uint8_t)ocr;
 9f4:	a7 bc       	out	0x27, r10	; 39
	
	enableCountAon = 1; // Start playing
 9f6:	81 e0       	ldi	r24, 0x01	; 1
 9f8:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <enableCountAon>
}
 9fc:	62 96       	adiw	r28, 0x12	; 18
 9fe:	0f b6       	in	r0, 0x3f	; 63
 a00:	f8 94       	cli
 a02:	de bf       	out	0x3e, r29	; 62
 a04:	0f be       	out	0x3f, r0	; 63
 a06:	cd bf       	out	0x3d, r28	; 61
 a08:	df 91       	pop	r29
 a0a:	cf 91       	pop	r28
 a0c:	1f 91       	pop	r17
 a0e:	ff 90       	pop	r15
 a10:	ef 90       	pop	r14
 a12:	df 90       	pop	r13
 a14:	cf 90       	pop	r12
 a16:	bf 90       	pop	r11
 a18:	af 90       	pop	r10
 a1a:	08 95       	ret

Disassembly of section .text.stopA:

00000bfc <stopA>:



void stopA(void){
	TCCR0B = 0b0;
 bfc:	15 bc       	out	0x25, r1	; 37
 bfe:	08 95       	ret

Disassembly of section .text.__vector_13:

00000a1c <__vector_13>:
}

ISR(TIMER1_OVF_vect){
 a1c:	1f 92       	push	r1
 a1e:	0f 92       	push	r0
 a20:	0f b6       	in	r0, 0x3f	; 63
 a22:	0f 92       	push	r0
 a24:	11 24       	eor	r1, r1
 a26:	2f 93       	push	r18
 a28:	3f 93       	push	r19
 a2a:	4f 93       	push	r20
 a2c:	5f 93       	push	r21
 a2e:	6f 93       	push	r22
 a30:	7f 93       	push	r23
 a32:	8f 93       	push	r24
 a34:	9f 93       	push	r25
 a36:	af 93       	push	r26
 a38:	bf 93       	push	r27
 a3a:	ef 93       	push	r30
 a3c:	ff 93       	push	r31
	TCNT1 = 65536 - 250;  // 1ms preload
 a3e:	86 e0       	ldi	r24, 0x06	; 6
 a40:	9f ef       	ldi	r25, 0xFF	; 255
 a42:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 a46:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	
	if (enableCountAon) {
 a4a:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <enableCountAon>
 a4e:	88 23       	and	r24, r24
 a50:	e1 f0       	breq	.+56     	; 0xa8a <__vector_13+0x6e>
		if (++countA > maxCountAon) {
 a52:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <countA>
 a56:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <countA+0x1>
 a5a:	01 96       	adiw	r24, 0x01	; 1
 a5c:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <countA+0x1>
 a60:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <countA>
 a64:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <maxCountAon>
 a68:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <maxCountAon+0x1>
 a6c:	28 17       	cp	r18, r24
 a6e:	39 07       	cpc	r19, r25
 a70:	40 f5       	brcc	.+80     	; 0xac2 <__vector_13+0xa6>
			countA = 0;
 a72:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <countA+0x1>
 a76:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <countA>
			enableCountAon = 0;
 a7a:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <enableCountAon>
			enableCountAoff = 1;
 a7e:	81 e0       	ldi	r24, 0x01	; 1
 a80:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <enableCountAoff>
			stopA();
 a84:	0e 94 fe 05 	call	0xbfc	; 0xbfc <stopA>
 a88:	1c c0       	rjmp	.+56     	; 0xac2 <__vector_13+0xa6>
		}
		
	} else if (enableCountAoff){
 a8a:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <enableCountAoff>
 a8e:	88 23       	and	r24, r24
 a90:	c1 f0       	breq	.+48     	; 0xac2 <__vector_13+0xa6>
		if (++countA > maxCountAoff){
 a92:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <countA>
 a96:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <countA+0x1>
 a9a:	01 96       	adiw	r24, 0x01	; 1
 a9c:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <countA+0x1>
 aa0:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <countA>
 aa4:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <maxCountAoff>
 aa8:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <maxCountAoff+0x1>
 aac:	28 17       	cp	r18, r24
 aae:	39 07       	cpc	r19, r25
 ab0:	40 f4       	brcc	.+16     	; 0xac2 <__vector_13+0xa6>
			countA = 0;
 ab2:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <countA+0x1>
 ab6:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <countA>
			enableCountAoff = 0;
 aba:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <enableCountAoff>
			playA();
 abe:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <playA>
			
		}
	}
	
}
 ac2:	ff 91       	pop	r31
 ac4:	ef 91       	pop	r30
 ac6:	bf 91       	pop	r27
 ac8:	af 91       	pop	r26
 aca:	9f 91       	pop	r25
 acc:	8f 91       	pop	r24
 ace:	7f 91       	pop	r23
 ad0:	6f 91       	pop	r22
 ad2:	5f 91       	pop	r21
 ad4:	4f 91       	pop	r20
 ad6:	3f 91       	pop	r19
 ad8:	2f 91       	pop	r18
 ada:	0f 90       	pop	r0
 adc:	0f be       	out	0x3f, r0	; 63
 ade:	0f 90       	pop	r0
 ae0:	1f 90       	pop	r1
 ae2:	18 95       	reti

Disassembly of section .text.timer1_init:

00000b9a <timer1_init>:

// Overflow = 1ms
void timer1_init(void) {
		TCCR1A = 0x00;
 b9a:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
		TCCR1B = (1 << CS11) | (1 << CS10);  // 64
 b9e:	83 e0       	ldi	r24, 0x03	; 3
 ba0:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
		TCNT1 = 65536 - 250;  
 ba4:	86 e0       	ldi	r24, 0x06	; 6
 ba6:	9f ef       	ldi	r25, 0xFF	; 255
 ba8:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 bac:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
		TIMSK1 |= (1 << TOIE1);
 bb0:	ef e6       	ldi	r30, 0x6F	; 111
 bb2:	f0 e0       	ldi	r31, 0x00	; 0
 bb4:	80 81       	ld	r24, Z
 bb6:	81 60       	ori	r24, 0x01	; 1
 bb8:	80 83       	st	Z, r24
 bba:	08 95       	ret

Disassembly of section .text.main:

00000bf0 <main>:
}

		

int main(void) {
	timer1_init();
 bf0:	0e 94 cd 05 	call	0xb9a	; 0xb9a <timer1_init>
	sei();
 bf4:	78 94       	sei
 bf6:	ff cf       	rjmp	.-2      	; 0xbf6 <main+0x6>

Disassembly of section .text.libgcc.div:

00000b56 <__udivmodsi4>:
 b56:	a1 e2       	ldi	r26, 0x21	; 33
 b58:	1a 2e       	mov	r1, r26
 b5a:	aa 1b       	sub	r26, r26
 b5c:	bb 1b       	sub	r27, r27
 b5e:	fd 01       	movw	r30, r26
 b60:	0d c0       	rjmp	.+26     	; 0xb7c <__udivmodsi4_ep>

00000b62 <__udivmodsi4_loop>:
 b62:	aa 1f       	adc	r26, r26
 b64:	bb 1f       	adc	r27, r27
 b66:	ee 1f       	adc	r30, r30
 b68:	ff 1f       	adc	r31, r31
 b6a:	a2 17       	cp	r26, r18
 b6c:	b3 07       	cpc	r27, r19
 b6e:	e4 07       	cpc	r30, r20
 b70:	f5 07       	cpc	r31, r21
 b72:	20 f0       	brcs	.+8      	; 0xb7c <__udivmodsi4_ep>
 b74:	a2 1b       	sub	r26, r18
 b76:	b3 0b       	sbc	r27, r19
 b78:	e4 0b       	sbc	r30, r20
 b7a:	f5 0b       	sbc	r31, r21

00000b7c <__udivmodsi4_ep>:
 b7c:	66 1f       	adc	r22, r22
 b7e:	77 1f       	adc	r23, r23
 b80:	88 1f       	adc	r24, r24
 b82:	99 1f       	adc	r25, r25
 b84:	1a 94       	dec	r1
 b86:	69 f7       	brne	.-38     	; 0xb62 <__udivmodsi4_loop>
 b88:	60 95       	com	r22
 b8a:	70 95       	com	r23
 b8c:	80 95       	com	r24
 b8e:	90 95       	com	r25
 b90:	9b 01       	movw	r18, r22
 b92:	ac 01       	movw	r20, r24
 b94:	bd 01       	movw	r22, r26
 b96:	cf 01       	movw	r24, r30
 b98:	08 95       	ret

Disassembly of section .text.libgcc.mul:

00000bbc <__umulhisi3>:
 bbc:	a2 9f       	mul	r26, r18
 bbe:	b0 01       	movw	r22, r0
 bc0:	b3 9f       	mul	r27, r19
 bc2:	c0 01       	movw	r24, r0
 bc4:	a3 9f       	mul	r26, r19
 bc6:	70 0d       	add	r23, r0
 bc8:	81 1d       	adc	r24, r1
 bca:	11 24       	eor	r1, r1
 bcc:	91 1d       	adc	r25, r1
 bce:	b2 9f       	mul	r27, r18
 bd0:	70 0d       	add	r23, r0
 bd2:	81 1d       	adc	r24, r1
 bd4:	11 24       	eor	r1, r1
 bd6:	91 1d       	adc	r25, r1
 bd8:	08 95       	ret

Disassembly of section .text.__dummy_fini:

00000c04 <_fini>:
 c04:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

00000c06 <__funcs_on_exit>:
 c06:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

00000c08 <__simulator_exit>:
 c08:	08 95       	ret

Disassembly of section .text.exit:

00000bda <exit>:
 bda:	ec 01       	movw	r28, r24
 bdc:	0e 94 03 06 	call	0xc06	; 0xc06 <__funcs_on_exit>
 be0:	0e 94 02 06 	call	0xc04	; 0xc04 <_fini>
 be4:	ce 01       	movw	r24, r28
 be6:	0e 94 04 06 	call	0xc08	; 0xc08 <__simulator_exit>
 bea:	ce 01       	movw	r24, r28
 bec:	0e 94 00 06 	call	0xc00	; 0xc00 <_Exit>

Disassembly of section .text._Exit:

00000c00 <_Exit>:
 c00:	0e 94 62 00 	call	0xc4	; 0xc4 <_exit>
