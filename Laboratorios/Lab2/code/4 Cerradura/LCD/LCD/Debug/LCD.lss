
LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000003a0  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000c2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  000003a0  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  000003cf  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000098  00000000  00000000  000003dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000f42  00000000  00000000  00000475  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000795  00000000  00000000  000013b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000059e  00000000  00000000  00001b4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000144  00000000  00000000  000020ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000022e  00000000  00000000  00002230  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000043a  00000000  00000000  0000245e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000088  00000000  00000000  00002898  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  000002fe  000002fe  00000392  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002920  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.twi_init 00000028  000001ec  000001ec  00000280  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.twi_start 0000001a  000002a6  000002a6  0000033a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.twi_write_cmd 0000001e  00000214  00000214  000002a8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.twi_write_dwr 0000001e  00000232  00000232  000002c6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.twi_stop 00000008  000002ee  000002ee  00000382  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.PCF8574_write 0000001c  0000026e  0000026e  00000302  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.twi_lcd_4bit_send 00000074  000000dc  000000dc  00000170  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.twi_lcd_cmd 00000018  000002c0  000002c0  00000354  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.twi_lcd_dwr 0000001c  0000028a  0000028a  0000031e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.twi_lcd_msg 0000002c  000001c0  000001c0  00000254  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.twi_lcd_clear 00000008  000002f6  000002f6  0000038a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .progmemx.data 0000001a  000000c2  000000c2  00000156  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 26 .text.twi_lcd_init 00000070  00000150  00000150  000001e4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.main    0000001e  00000250  00000250  000002e4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .bss.lcd      00000001  00800100  00800100  000003a0  2**0
                  ALLOC
 29 .text.__dummy_fini 00000002  00000306  00000306  0000039a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.__dummy_funcs_on_exit 00000002  00000308  00000308  0000039c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.__dummy_simulator_exit 00000002  0000030a  0000030a  0000039e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text.exit    00000016  000002d8  000002d8  0000036c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .text._Exit   00000004  00000302  00000302  00000396  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 37 00 	jmp	0x6e	; 0x6e <__ctors_end>
   4:	0c 94 7f 01 	jmp	0x2fe	; 0x2fe <__bad_interrupt>
   8:	0c 94 7f 01 	jmp	0x2fe	; 0x2fe <__bad_interrupt>
   c:	0c 94 7f 01 	jmp	0x2fe	; 0x2fe <__bad_interrupt>
  10:	0c 94 7f 01 	jmp	0x2fe	; 0x2fe <__bad_interrupt>
  14:	0c 94 7f 01 	jmp	0x2fe	; 0x2fe <__bad_interrupt>
  18:	0c 94 7f 01 	jmp	0x2fe	; 0x2fe <__bad_interrupt>
  1c:	0c 94 7f 01 	jmp	0x2fe	; 0x2fe <__bad_interrupt>
  20:	0c 94 7f 01 	jmp	0x2fe	; 0x2fe <__bad_interrupt>
  24:	0c 94 7f 01 	jmp	0x2fe	; 0x2fe <__bad_interrupt>
  28:	0c 94 7f 01 	jmp	0x2fe	; 0x2fe <__bad_interrupt>
  2c:	0c 94 7f 01 	jmp	0x2fe	; 0x2fe <__bad_interrupt>
  30:	0c 94 7f 01 	jmp	0x2fe	; 0x2fe <__bad_interrupt>
  34:	0c 94 7f 01 	jmp	0x2fe	; 0x2fe <__bad_interrupt>
  38:	0c 94 7f 01 	jmp	0x2fe	; 0x2fe <__bad_interrupt>
  3c:	0c 94 7f 01 	jmp	0x2fe	; 0x2fe <__bad_interrupt>
  40:	0c 94 7f 01 	jmp	0x2fe	; 0x2fe <__bad_interrupt>
  44:	0c 94 7f 01 	jmp	0x2fe	; 0x2fe <__bad_interrupt>
  48:	0c 94 7f 01 	jmp	0x2fe	; 0x2fe <__bad_interrupt>
  4c:	0c 94 7f 01 	jmp	0x2fe	; 0x2fe <__bad_interrupt>
  50:	0c 94 7f 01 	jmp	0x2fe	; 0x2fe <__bad_interrupt>
  54:	0c 94 7f 01 	jmp	0x2fe	; 0x2fe <__bad_interrupt>
  58:	0c 94 7f 01 	jmp	0x2fe	; 0x2fe <__bad_interrupt>
  5c:	0c 94 7f 01 	jmp	0x2fe	; 0x2fe <__bad_interrupt>
  60:	0c 94 7f 01 	jmp	0x2fe	; 0x2fe <__bad_interrupt>
  64:	0c 94 7f 01 	jmp	0x2fe	; 0x2fe <__bad_interrupt>

00000068 <.dinit>:
  68:	01 00       	.word	0x0001	; ????
  6a:	01 01       	movw	r0, r2
  6c:	80 00       	.word	0x0080	; ????

0000006e <__ctors_end>:
  6e:	11 24       	eor	r1, r1
  70:	1f be       	out	0x3f, r1	; 63
  72:	cf ef       	ldi	r28, 0xFF	; 255
  74:	d8 e0       	ldi	r29, 0x08	; 8
  76:	de bf       	out	0x3e, r29	; 62
  78:	cd bf       	out	0x3d, r28	; 61

0000007a <__do_copy_data>:
  7a:	e8 e6       	ldi	r30, 0x68	; 104
  7c:	f0 e0       	ldi	r31, 0x00	; 0
  7e:	40 e0       	ldi	r20, 0x00	; 0
  80:	17 c0       	rjmp	.+46     	; 0xb0 <__do_clear_bss+0x8>
  82:	b5 91       	lpm	r27, Z+
  84:	a5 91       	lpm	r26, Z+
  86:	35 91       	lpm	r19, Z+
  88:	25 91       	lpm	r18, Z+
  8a:	05 91       	lpm	r16, Z+
  8c:	07 fd       	sbrc	r16, 7
  8e:	0c c0       	rjmp	.+24     	; 0xa8 <__do_clear_bss>
  90:	95 91       	lpm	r25, Z+
  92:	85 91       	lpm	r24, Z+
  94:	ef 01       	movw	r28, r30
  96:	f9 2f       	mov	r31, r25
  98:	e8 2f       	mov	r30, r24
  9a:	05 90       	lpm	r0, Z+
  9c:	0d 92       	st	X+, r0
  9e:	a2 17       	cp	r26, r18
  a0:	b3 07       	cpc	r27, r19
  a2:	d9 f7       	brne	.-10     	; 0x9a <__do_copy_data+0x20>
  a4:	fe 01       	movw	r30, r28
  a6:	04 c0       	rjmp	.+8      	; 0xb0 <__do_clear_bss+0x8>

000000a8 <__do_clear_bss>:
  a8:	1d 92       	st	X+, r1
  aa:	a2 17       	cp	r26, r18
  ac:	b3 07       	cpc	r27, r19
  ae:	e1 f7       	brne	.-8      	; 0xa8 <__do_clear_bss>
  b0:	ed 36       	cpi	r30, 0x6D	; 109
  b2:	f4 07       	cpc	r31, r20
  b4:	31 f7       	brne	.-52     	; 0x82 <__do_copy_data+0x8>
  b6:	0e 94 28 01 	call	0x250	; 0x250 <main>
  ba:	0c 94 6c 01 	jmp	0x2d8	; 0x2d8 <exit>

000000be <_exit>:
  be:	f8 94       	cli

000000c0 <__stop_program>:
  c0:	ff cf       	rjmp	.-2      	; 0xc0 <__stop_program>

Disassembly of section .text:

000002fe <__bad_interrupt>:
 2fe:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.twi_init:

000001ec <twi_init>:
{
	TWCR=(1<<TWEN)|(1<<TWINT);					//--- No Acknowledgment Condition as per Datasheet
	while (!(TWCR & (1<<TWINT)));				//--- Wait until No Acknowledgment Condition is transmitted to Slave
	while(TW_STATUS != TW_MR_DATA_NACK);		//--- Check for Acknowledgment
	return TWDR;								//--- Return received data
}
 1ec:	83 e0       	ldi	r24, 0x03	; 3
 1ee:	87 b9       	out	0x07, r24	; 7
 1f0:	88 b9       	out	0x08, r24	; 8
 1f2:	ec eb       	ldi	r30, 0xBC	; 188
 1f4:	f0 e0       	ldi	r31, 0x00	; 0
 1f6:	80 81       	ld	r24, Z
 1f8:	8b 7f       	andi	r24, 0xFB	; 251
 1fa:	80 83       	st	Z, r24
 1fc:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 200:	8c e0       	ldi	r24, 0x0C	; 12
 202:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
 206:	84 e0       	ldi	r24, 0x04	; 4
 208:	80 83       	st	Z, r24
 20a:	85 e3       	ldi	r24, 0x35	; 53
 20c:	8a 95       	dec	r24
 20e:	f1 f7       	brne	.-4      	; 0x20c <twi_init+0x20>
 210:	00 00       	nop
 212:	08 95       	ret

Disassembly of section .text.twi_start:

000002a6 <twi_start>:

/* Function to Send Start Condition */

void twi_start()
{
	TWCR= (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);		//--- Start Condition as per Datasheet
 2a6:	84 ea       	ldi	r24, 0xA4	; 164
 2a8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(!(TWCR & (1<<TWINT)));				//--- Wait till start condition is transmitted to Slave
 2ac:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 2b0:	88 23       	and	r24, r24
 2b2:	e4 f7       	brge	.-8      	; 0x2ac <twi_start+0x6>
	while(TW_STATUS != TW_START);				//--- Check for the acknowledgment 0x08 = TW_START
 2b4:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 2b8:	88 7f       	andi	r24, 0xF8	; 248
 2ba:	88 30       	cpi	r24, 0x08	; 8
 2bc:	d9 f7       	brne	.-10     	; 0x2b4 <twi_start+0xe>
}
 2be:	08 95       	ret

Disassembly of section .text.twi_write_cmd:

00000214 <twi_write_cmd>:
{
	TWCR=(1<<TWEN)|(1<<TWINT);					//--- No Acknowledgment Condition as per Datasheet
	while (!(TWCR & (1<<TWINT)));				//--- Wait until No Acknowledgment Condition is transmitted to Slave
	while(TW_STATUS != TW_MR_DATA_NACK);		//--- Check for Acknowledgment
	return TWDR;								//--- Return received data
}
 214:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 218:	84 e8       	ldi	r24, 0x84	; 132
 21a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 21e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 222:	88 23       	and	r24, r24
 224:	e4 f7       	brge	.-8      	; 0x21e <twi_write_cmd+0xa>
 226:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 22a:	88 7f       	andi	r24, 0xF8	; 248
 22c:	88 31       	cpi	r24, 0x18	; 24
 22e:	d9 f7       	brne	.-10     	; 0x226 <twi_write_cmd+0x12>
 230:	08 95       	ret

Disassembly of section .text.twi_write_dwr:

00000232 <twi_write_dwr>:
 232:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 236:	84 e8       	ldi	r24, 0x84	; 132
 238:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 23c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 240:	88 23       	and	r24, r24
 242:	e4 f7       	brge	.-8      	; 0x23c <twi_write_dwr+0xa>
 244:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 248:	88 7f       	andi	r24, 0xF8	; 248
 24a:	88 32       	cpi	r24, 0x28	; 40
 24c:	d9 f7       	brne	.-10     	; 0x244 <twi_write_dwr+0x12>
 24e:	08 95       	ret

Disassembly of section .text.twi_stop:

000002ee <twi_stop>:

/* Function to Send Stop Condition */

void twi_stop()
{
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);		//--- Stop Condition as per Datasheet
 2ee:	84 e9       	ldi	r24, 0x94	; 148
 2f0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 2f4:	08 95       	ret

Disassembly of section .text.PCF8574_write:

0000026e <PCF8574_write>:

unsigned char lcd = 0x00;						//--- Declaring a variable as lcd for data operation

/* Function to Write data in PCF8574 */
void PCF8574_write(unsigned char x)
{
 26e:	cf 93       	push	r28
 270:	c8 2f       	mov	r28, r24
		twi_start();							//--- Start Condition 
 272:	0e 94 53 01 	call	0x2a6	; 0x2a6 <twi_start>
		twi_write_cmd((PCF8574 << 1)| WRITE);	//--- SLA+W is Send 0x40 
 276:	8e e4       	ldi	r24, 0x4E	; 78
 278:	0e 94 0a 01 	call	0x214	; 0x214 <twi_write_cmd>
		twi_write_dwr(x);						//--- Data to Slave Device
 27c:	8c 2f       	mov	r24, r28
 27e:	0e 94 19 01 	call	0x232	; 0x232 <twi_write_dwr>
		twi_stop();								//--- Stop Condition 
 282:	0e 94 77 01 	call	0x2ee	; 0x2ee <twi_stop>
}
 286:	cf 91       	pop	r28
 288:	08 95       	ret

Disassembly of section .text.twi_lcd_4bit_send:

000000dc <twi_lcd_4bit_send>:
{
	TWCR=(1<<TWEN)|(1<<TWINT);					//--- No Acknowledgment Condition as per Datasheet
	while (!(TWCR & (1<<TWINT)));				//--- Wait until No Acknowledgment Condition is transmitted to Slave
	while(TW_STATUS != TW_MR_DATA_NACK);		//--- Check for Acknowledgment
	return TWDR;								//--- Return received data
}
  dc:	cf 93       	push	r28
  de:	c8 2f       	mov	r28, r24
  e0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  e4:	8f 70       	andi	r24, 0x0F	; 15
  e6:	9c 2f       	mov	r25, r28
  e8:	90 7f       	andi	r25, 0xF0	; 240
  ea:	89 2b       	or	r24, r25
  ec:	84 60       	ori	r24, 0x04	; 4
  ee:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
  f2:	0e 94 37 01 	call	0x26e	; 0x26e <PCF8574_write>
  f6:	85 e0       	ldi	r24, 0x05	; 5
  f8:	8a 95       	dec	r24
  fa:	f1 f7       	brne	.-4      	; 0xf8 <twi_lcd_4bit_send+0x1c>
  fc:	00 00       	nop
  fe:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 102:	8b 7f       	andi	r24, 0xFB	; 251
 104:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 108:	0e 94 37 01 	call	0x26e	; 0x26e <PCF8574_write>
 10c:	8a e1       	ldi	r24, 0x1A	; 26
 10e:	8a 95       	dec	r24
 110:	f1 f7       	brne	.-4      	; 0x10e <twi_lcd_4bit_send+0x32>
 112:	00 c0       	rjmp	.+0      	; 0x114 <twi_lcd_4bit_send+0x38>
 114:	80 e1       	ldi	r24, 0x10	; 16
 116:	c8 9f       	mul	r28, r24
 118:	90 01       	movw	r18, r0
 11a:	11 24       	eor	r1, r1
 11c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 120:	8f 70       	andi	r24, 0x0F	; 15
 122:	82 2b       	or	r24, r18
 124:	84 60       	ori	r24, 0x04	; 4
 126:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 12a:	0e 94 37 01 	call	0x26e	; 0x26e <PCF8574_write>
 12e:	85 e0       	ldi	r24, 0x05	; 5
 130:	8a 95       	dec	r24
 132:	f1 f7       	brne	.-4      	; 0x130 <twi_lcd_4bit_send+0x54>
 134:	00 00       	nop
 136:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 13a:	8b 7f       	andi	r24, 0xFB	; 251
 13c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 140:	0e 94 37 01 	call	0x26e	; 0x26e <PCF8574_write>
 144:	8a e1       	ldi	r24, 0x1A	; 26
 146:	8a 95       	dec	r24
 148:	f1 f7       	brne	.-4      	; 0x146 <twi_lcd_4bit_send+0x6a>
 14a:	00 c0       	rjmp	.+0      	; 0x14c <twi_lcd_4bit_send+0x70>
 14c:	cf 91       	pop	r28
 14e:	08 95       	ret

Disassembly of section .text.twi_lcd_cmd:

000002c0 <twi_lcd_cmd>:
	
}

/* Function to Write to LCD Command Register */
void twi_lcd_cmd(const unsigned char x)
{
 2c0:	cf 93       	push	r28
 2c2:	c8 2f       	mov	r28, r24
	lcd = 0x08;									//--- Enable Backlight Pin
 2c4:	88 e0       	ldi	r24, 0x08	; 8
 2c6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	lcd &= ~(0x01);								//--- Select Command Register By RS = 0
	PCF8574_write(lcd);							//--- Send Data From PCF8574 to LCD PORT
 2ca:	0e 94 37 01 	call	0x26e	; 0x26e <PCF8574_write>
	twi_lcd_4bit_send(x);						//--- Function to Write 4-bit data to LCD 	
 2ce:	8c 2f       	mov	r24, r28
 2d0:	0e 94 6e 00 	call	0xdc	; 0xdc <twi_lcd_4bit_send>
}
 2d4:	cf 91       	pop	r28
 2d6:	08 95       	ret

Disassembly of section .text.twi_lcd_dwr:

0000028a <twi_lcd_dwr>:

/* Function to Write to LCD Command Register */
void twi_lcd_dwr(unsigned char x)
{
 28a:	cf 93       	push	r28
 28c:	c8 2f       	mov	r28, r24
	lcd |= 0x09;								//--- Enable Backlight Pin & Select Data Register By RS = 1
 28e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 292:	89 60       	ori	r24, 0x09	; 9
 294:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	PCF8574_write(lcd);							//--- Send Data From PCF8574 to LCD PORT	
 298:	0e 94 37 01 	call	0x26e	; 0x26e <PCF8574_write>
	twi_lcd_4bit_send(x);						//--- Function to Write 4-bit data to LCD
 29c:	8c 2f       	mov	r24, r28
 29e:	0e 94 6e 00 	call	0xdc	; 0xdc <twi_lcd_4bit_send>
}
 2a2:	cf 91       	pop	r28
 2a4:	08 95       	ret

Disassembly of section .text.twi_lcd_msg:

000001c0 <twi_lcd_msg>:
 1c0:	cf 92       	push	r12
 1c2:	df 92       	push	r13
 1c4:	ef 92       	push	r14
 1c6:	6b 01       	movw	r12, r22
 1c8:	e8 2e       	mov	r14, r24
 1ca:	06 c0       	rjmp	.+12     	; 0x1d8 <twi_lcd_msg+0x18>
 1cc:	9f ef       	ldi	r25, 0xFF	; 255
 1ce:	c9 1a       	sub	r12, r25
 1d0:	d9 0a       	sbc	r13, r25
 1d2:	e9 0a       	sbc	r14, r25
 1d4:	0e 94 45 01 	call	0x28a	; 0x28a <twi_lcd_dwr>
 1d8:	f6 01       	movw	r30, r12
 1da:	84 91       	lpm	r24, Z
 1dc:	e7 fc       	sbrc	r14, 7
 1de:	80 81       	ld	r24, Z
 1e0:	81 11       	cpse	r24, r1
 1e2:	f4 cf       	rjmp	.-24     	; 0x1cc <twi_lcd_msg+0xc>
 1e4:	ef 90       	pop	r14
 1e6:	df 90       	pop	r13
 1e8:	cf 90       	pop	r12
 1ea:	08 95       	ret

Disassembly of section .text.twi_lcd_clear:

000002f6 <twi_lcd_clear>:
}

/* Function to Execute Clear LCD Command */
void twi_lcd_clear()
{
	twi_lcd_cmd(0x01);
 2f6:	81 e0       	ldi	r24, 0x01	; 1
 2f8:	0e 94 60 01 	call	0x2c0	; 0x2c0 <twi_lcd_cmd>
 2fc:	08 95       	ret

Disassembly of section .text.twi_lcd_init:

00000150 <twi_lcd_init>:
 150:	84 e0       	ldi	r24, 0x04	; 4
 152:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 156:	0e 94 37 01 	call	0x26e	; 0x26e <PCF8574_write>
 15a:	25 e8       	ldi	r18, 0x85	; 133
 15c:	2a 95       	dec	r18
 15e:	f1 f7       	brne	.-4      	; 0x15c <twi_lcd_init+0xc>
 160:	00 00       	nop
 162:	83 e0       	ldi	r24, 0x03	; 3
 164:	0e 94 60 01 	call	0x2c0	; 0x2c0 <twi_lcd_cmd>
 168:	83 e0       	ldi	r24, 0x03	; 3
 16a:	0e 94 60 01 	call	0x2c0	; 0x2c0 <twi_lcd_cmd>
 16e:	83 e0       	ldi	r24, 0x03	; 3
 170:	0e 94 60 01 	call	0x2c0	; 0x2c0 <twi_lcd_cmd>
 174:	82 e0       	ldi	r24, 0x02	; 2
 176:	0e 94 60 01 	call	0x2c0	; 0x2c0 <twi_lcd_cmd>
 17a:	88 e2       	ldi	r24, 0x28	; 40
 17c:	0e 94 60 01 	call	0x2c0	; 0x2c0 <twi_lcd_cmd>
 180:	8f e0       	ldi	r24, 0x0F	; 15
 182:	0e 94 60 01 	call	0x2c0	; 0x2c0 <twi_lcd_cmd>
 186:	81 e0       	ldi	r24, 0x01	; 1
 188:	0e 94 60 01 	call	0x2c0	; 0x2c0 <twi_lcd_cmd>
 18c:	86 e0       	ldi	r24, 0x06	; 6
 18e:	0e 94 60 01 	call	0x2c0	; 0x2c0 <twi_lcd_cmd>
 192:	80 e8       	ldi	r24, 0x80	; 128
 194:	0e 94 60 01 	call	0x2c0	; 0x2c0 <twi_lcd_cmd>
 198:	62 ec       	ldi	r22, 0xC2	; 194
 19a:	70 e0       	ldi	r23, 0x00	; 0
 19c:	80 e0       	ldi	r24, 0x00	; 0
 19e:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <twi_lcd_msg>
 1a2:	8f ef       	ldi	r24, 0xFF	; 255
 1a4:	93 ed       	ldi	r25, 0xD3	; 211
 1a6:	20 e3       	ldi	r18, 0x30	; 48
 1a8:	81 50       	subi	r24, 0x01	; 1
 1aa:	90 40       	sbci	r25, 0x00	; 0
 1ac:	20 40       	sbci	r18, 0x00	; 0
 1ae:	e1 f7       	brne	.-8      	; 0x1a8 <twi_lcd_init+0x58>
 1b0:	00 c0       	rjmp	.+0      	; 0x1b2 <twi_lcd_init+0x62>
 1b2:	00 00       	nop
 1b4:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <twi_lcd_clear>
 1b8:	80 e8       	ldi	r24, 0x80	; 128
 1ba:	0e 94 60 01 	call	0x2c0	; 0x2c0 <twi_lcd_cmd>
 1be:	08 95       	ret

Disassembly of section .text.main:

00000250 <main>:
 250:	0e 94 f6 00 	call	0x1ec	; 0x1ec <twi_init>
 254:	0e 94 a8 00 	call	0x150	; 0x150 <twi_lcd_init>
 258:	80 e8       	ldi	r24, 0x80	; 128
 25a:	0e 94 60 01 	call	0x2c0	; 0x2c0 <twi_lcd_cmd>
 25e:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <twi_lcd_clear>
 262:	62 ed       	ldi	r22, 0xD2	; 210
 264:	70 e0       	ldi	r23, 0x00	; 0
 266:	80 e0       	ldi	r24, 0x00	; 0
 268:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <twi_lcd_msg>
 26c:	ff cf       	rjmp	.-2      	; 0x26c <main+0x1c>

Disassembly of section .text.__dummy_fini:

00000306 <_fini>:
 306:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

00000308 <__funcs_on_exit>:
 308:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

0000030a <__simulator_exit>:
 30a:	08 95       	ret

Disassembly of section .text.exit:

000002d8 <exit>:
 2d8:	ec 01       	movw	r28, r24
 2da:	0e 94 84 01 	call	0x308	; 0x308 <__funcs_on_exit>
 2de:	0e 94 83 01 	call	0x306	; 0x306 <_fini>
 2e2:	ce 01       	movw	r24, r28
 2e4:	0e 94 85 01 	call	0x30a	; 0x30a <__simulator_exit>
 2e8:	ce 01       	movw	r24, r28
 2ea:	0e 94 81 01 	call	0x302	; 0x302 <_Exit>

Disassembly of section .text._Exit:

00000302 <_Exit>:
 302:	0e 94 5f 00 	call	0xbe	; 0xbe <_exit>
