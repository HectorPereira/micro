
4 Cerradura.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000690  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000bc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  00000690  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000001c  00000000  00000000  000006bf  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000140  00000000  00000000  000006db  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001d08  00000000  00000000  0000081b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000082c  00000000  00000000  00002523  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000009d9  00000000  00000000  00002d4f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000035c  00000000  00000000  00003728  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000260  00000000  00000000  00003a84  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000ffc  00000000  00000000  00003ce4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000130  00000000  00000000  00004ce0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  000005ee  000005ee  00000682  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004e10  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .progmemx.data 00000107  000000bc  000000bc  00000150  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 15 .text.i2c_master_start 00000058  0000038c  0000038c  00000420  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.i2c_master_write 00000024  000004e4  000004e4  00000578  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.i2c_master_stop 00000008  000005de  000005de  00000672  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.i2c_master_sendByte 00000022  00000508  00000508  0000059c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.lq_transmitI2C 0000000e  000005c2  000005c2  00000656  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.lq_turnOnBacklight 0000000e  000005d0  000005d0  00000664  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.lq_writeDevicePulse 00000036  0000045c  0000045c  000004f0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.lq_writeDevice4Bits 0000001e  0000052a  0000052a  000005be  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.lq_writeDeviceByte 0000003a  00000422  00000422  000004b6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.lq_print 0000002a  00000492  00000492  00000526  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.lq_sendCommand 00000008  000005e6  000005e6  0000067a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.lq_setCursor 0000003e  000003e4  000003e4  00000478  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.lq_clear 00000028  000004bc  000004bc  00000550  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.lq_returnHome 00000014  00000578  00000578  0000060c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.lq_turnOnDisplay 00000012  0000058c  0000058c  00000620  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.lq_turnOnCursor 00000012  0000059e  0000059e  00000632  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.lq_turnOnBlink 00000012  000005b0  000005b0  00000644  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text.lq_init 0000011c  000001c4  000001c4  00000258  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .text.main    000000ac  000002e0  000002e0  00000374  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .text.libgcc  0000001a  00000548  00000548  000005dc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .text.__dummy_fini 00000002  000005f6  000005f6  0000068a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 36 .text.__dummy_funcs_on_exit 00000002  000005f8  000005f8  0000068c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 37 .text.__dummy_simulator_exit 00000002  000005fa  000005fa  0000068e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 38 .text.exit    00000016  00000562  00000562  000005f6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 39 .text._Exit   00000004  000005f2  000005f2  00000686  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 f7 02 	jmp	0x5ee	; 0x5ee <__bad_interrupt>
   8:	0c 94 f7 02 	jmp	0x5ee	; 0x5ee <__bad_interrupt>
   c:	0c 94 f7 02 	jmp	0x5ee	; 0x5ee <__bad_interrupt>
  10:	0c 94 f7 02 	jmp	0x5ee	; 0x5ee <__bad_interrupt>
  14:	0c 94 f7 02 	jmp	0x5ee	; 0x5ee <__bad_interrupt>
  18:	0c 94 f7 02 	jmp	0x5ee	; 0x5ee <__bad_interrupt>
  1c:	0c 94 f7 02 	jmp	0x5ee	; 0x5ee <__bad_interrupt>
  20:	0c 94 f7 02 	jmp	0x5ee	; 0x5ee <__bad_interrupt>
  24:	0c 94 f7 02 	jmp	0x5ee	; 0x5ee <__bad_interrupt>
  28:	0c 94 f7 02 	jmp	0x5ee	; 0x5ee <__bad_interrupt>
  2c:	0c 94 f7 02 	jmp	0x5ee	; 0x5ee <__bad_interrupt>
  30:	0c 94 f7 02 	jmp	0x5ee	; 0x5ee <__bad_interrupt>
  34:	0c 94 f7 02 	jmp	0x5ee	; 0x5ee <__bad_interrupt>
  38:	0c 94 f7 02 	jmp	0x5ee	; 0x5ee <__bad_interrupt>
  3c:	0c 94 f7 02 	jmp	0x5ee	; 0x5ee <__bad_interrupt>
  40:	0c 94 f7 02 	jmp	0x5ee	; 0x5ee <__bad_interrupt>
  44:	0c 94 f7 02 	jmp	0x5ee	; 0x5ee <__bad_interrupt>
  48:	0c 94 f7 02 	jmp	0x5ee	; 0x5ee <__bad_interrupt>
  4c:	0c 94 f7 02 	jmp	0x5ee	; 0x5ee <__bad_interrupt>
  50:	0c 94 f7 02 	jmp	0x5ee	; 0x5ee <__bad_interrupt>
  54:	0c 94 f7 02 	jmp	0x5ee	; 0x5ee <__bad_interrupt>
  58:	0c 94 f7 02 	jmp	0x5ee	; 0x5ee <__bad_interrupt>
  5c:	0c 94 f7 02 	jmp	0x5ee	; 0x5ee <__bad_interrupt>
  60:	0c 94 f7 02 	jmp	0x5ee	; 0x5ee <__bad_interrupt>
  64:	0c 94 f7 02 	jmp	0x5ee	; 0x5ee <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	e8 e6       	ldi	r30, 0x68	; 104
  76:	f0 e0       	ldi	r31, 0x00	; 0
  78:	40 e0       	ldi	r20, 0x00	; 0
  7a:	17 c0       	rjmp	.+46     	; 0xaa <__do_clear_bss+0x8>
  7c:	b5 91       	lpm	r27, Z+
  7e:	a5 91       	lpm	r26, Z+
  80:	35 91       	lpm	r19, Z+
  82:	25 91       	lpm	r18, Z+
  84:	05 91       	lpm	r16, Z+
  86:	07 fd       	sbrc	r16, 7
  88:	0c c0       	rjmp	.+24     	; 0xa2 <__do_clear_bss>
  8a:	95 91       	lpm	r25, Z+
  8c:	85 91       	lpm	r24, Z+
  8e:	ef 01       	movw	r28, r30
  90:	f9 2f       	mov	r31, r25
  92:	e8 2f       	mov	r30, r24
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	a2 17       	cp	r26, r18
  9a:	b3 07       	cpc	r27, r19
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0x20>
  9e:	fe 01       	movw	r30, r28
  a0:	04 c0       	rjmp	.+8      	; 0xaa <__do_clear_bss+0x8>

000000a2 <__do_clear_bss>:
  a2:	1d 92       	st	X+, r1
  a4:	a2 17       	cp	r26, r18
  a6:	b3 07       	cpc	r27, r19
  a8:	e1 f7       	brne	.-8      	; 0xa2 <__do_clear_bss>
  aa:	e8 36       	cpi	r30, 0x68	; 104
  ac:	f4 07       	cpc	r31, r20
  ae:	31 f7       	brne	.-52     	; 0x7c <__do_copy_data+0x8>
  b0:	0e 94 70 01 	call	0x2e0	; 0x2e0 <main>
  b4:	0c 94 b1 02 	jmp	0x562	; 0x562 <exit>

000000b8 <_exit>:
  b8:	f8 94       	cli

000000ba <__stop_program>:
  ba:	ff cf       	rjmp	.-2      	; 0xba <__stop_program>

Disassembly of section .text:

000005ee <__bad_interrupt>:
 5ee:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.i2c_master_start:

0000038c <i2c_master_start>:
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );

	// return received data from TWDR
	return TWDR;
}
 38c:	ec eb       	ldi	r30, 0xBC	; 188
 38e:	f0 e0       	ldi	r31, 0x00	; 0
 390:	10 82       	st	Z, r1
 392:	94 ea       	ldi	r25, 0xA4	; 164
 394:	90 83       	st	Z, r25
 396:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 39a:	99 23       	and	r25, r25
 39c:	e4 f7       	brge	.-8      	; 0x396 <i2c_master_start+0xa>
 39e:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 3a2:	98 7f       	andi	r25, 0xF8	; 248
 3a4:	98 30       	cpi	r25, 0x08	; 8
 3a6:	11 f0       	breq	.+4      	; 0x3ac <i2c_master_start+0x20>
 3a8:	90 31       	cpi	r25, 0x10	; 16
 3aa:	b1 f4       	brne	.+44     	; 0x3d8 <i2c_master_start+0x4c>
 3ac:	90 e0       	ldi	r25, 0x00	; 0
 3ae:	88 0f       	add	r24, r24
 3b0:	99 1f       	adc	r25, r25
 3b2:	86 2b       	or	r24, r22
 3b4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 3b8:	84 e8       	ldi	r24, 0x84	; 132
 3ba:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 3be:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 3c2:	88 23       	and	r24, r24
 3c4:	e4 f7       	brge	.-8      	; 0x3be <i2c_master_start+0x32>
 3c6:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 3ca:	88 7f       	andi	r24, 0xF8	; 248
 3cc:	88 31       	cpi	r24, 0x18	; 24
 3ce:	31 f0       	breq	.+12     	; 0x3dc <i2c_master_start+0x50>
 3d0:	80 34       	cpi	r24, 0x40	; 64
 3d2:	31 f4       	brne	.+12     	; 0x3e0 <i2c_master_start+0x54>
 3d4:	80 e0       	ldi	r24, 0x00	; 0
 3d6:	08 95       	ret
 3d8:	8a e0       	ldi	r24, 0x0A	; 10
 3da:	08 95       	ret
 3dc:	80 e0       	ldi	r24, 0x00	; 0
 3de:	08 95       	ret
 3e0:	84 e1       	ldi	r24, 0x14	; 20
 3e2:	08 95       	ret

Disassembly of section .text.i2c_master_write:

000004e4 <i2c_master_write>:
 4e4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 4e8:	84 e8       	ldi	r24, 0x84	; 132
 4ea:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 4ee:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 4f2:	88 23       	and	r24, r24
 4f4:	e4 f7       	brge	.-8      	; 0x4ee <i2c_master_write+0xa>
 4f6:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 4fa:	88 7f       	andi	r24, 0xF8	; 248
 4fc:	88 32       	cpi	r24, 0x28	; 40
 4fe:	11 f0       	breq	.+4      	; 0x504 <i2c_master_write+0x20>
 500:	85 e1       	ldi	r24, 0x15	; 21
 502:	08 95       	ret
 504:	80 e0       	ldi	r24, 0x00	; 0
 506:	08 95       	ret

Disassembly of section .text.i2c_master_stop:

000005de <i2c_master_stop>:
	return I2C_STATUS_SUCCESS;
}

void i2c_master_stop(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 5de:	84 e9       	ldi	r24, 0x94	; 148
 5e0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 5e4:	08 95       	ret

Disassembly of section .text.i2c_master_sendByte:

00000508 <i2c_master_sendByte>:
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );

	// return received data from TWDR
	return TWDR;
}
 508:	cf 93       	push	r28
 50a:	c6 2f       	mov	r28, r22
 50c:	60 e0       	ldi	r22, 0x00	; 0
 50e:	0e 94 c6 01 	call	0x38c	; 0x38c <i2c_master_start>
 512:	81 11       	cpse	r24, r1
 514:	08 c0       	rjmp	.+16     	; 0x526 <i2c_master_sendByte+0x1e>
 516:	8c 2f       	mov	r24, r28
 518:	0e 94 72 02 	call	0x4e4	; 0x4e4 <i2c_master_write>
 51c:	81 11       	cpse	r24, r1
 51e:	03 c0       	rjmp	.+6      	; 0x526 <i2c_master_sendByte+0x1e>
 520:	0e 94 ef 02 	call	0x5de	; 0x5de <i2c_master_stop>
 524:	80 e0       	ldi	r24, 0x00	; 0
 526:	cf 91       	pop	r28
 528:	08 95       	ret

Disassembly of section .text.lq_transmitI2C:

000005c2 <lq_transmitI2C>:
 5c2:	fc 01       	movw	r30, r24
 5c4:	23 81       	ldd	r18, Z+3	; 0x03
 5c6:	62 2b       	or	r22, r18
 5c8:	80 81       	ld	r24, Z
 5ca:	0e 94 84 02 	call	0x508	; 0x508 <i2c_master_sendByte>
 5ce:	08 95       	ret

Disassembly of section .text.lq_turnOnBacklight:

000005d0 <lq_turnOnBacklight>:
 5d0:	28 e0       	ldi	r18, 0x08	; 8
 5d2:	fc 01       	movw	r30, r24
 5d4:	23 83       	std	Z+3, r18	; 0x03
 5d6:	60 e0       	ldi	r22, 0x00	; 0
 5d8:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <lq_transmitI2C>
 5dc:	08 95       	ret

Disassembly of section .text.lq_writeDevicePulse:

0000045c <lq_writeDevicePulse>:
 45c:	0f 93       	push	r16
 45e:	1f 93       	push	r17
 460:	cf 93       	push	r28
 462:	8c 01       	movw	r16, r24
 464:	c6 2f       	mov	r28, r22
 466:	64 60       	ori	r22, 0x04	; 4
 468:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <lq_transmitI2C>
 46c:	8a e0       	ldi	r24, 0x0A	; 10
 46e:	8a 95       	dec	r24
 470:	f1 f7       	brne	.-4      	; 0x46e <lq_writeDevicePulse+0x12>
 472:	00 c0       	rjmp	.+0      	; 0x474 <lq_writeDevicePulse+0x18>
 474:	6c 2f       	mov	r22, r28
 476:	6b 7f       	andi	r22, 0xFB	; 251
 478:	c8 01       	movw	r24, r16
 47a:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <lq_transmitI2C>
 47e:	87 ec       	ldi	r24, 0xC7	; 199
 480:	90 e0       	ldi	r25, 0x00	; 0
 482:	01 97       	sbiw	r24, 0x01	; 1
 484:	f1 f7       	brne	.-4      	; 0x482 <lq_writeDevicePulse+0x26>
 486:	00 c0       	rjmp	.+0      	; 0x488 <lq_writeDevicePulse+0x2c>
 488:	00 00       	nop
 48a:	cf 91       	pop	r28
 48c:	1f 91       	pop	r17
 48e:	0f 91       	pop	r16
 490:	08 95       	ret

Disassembly of section .text.lq_writeDevice4Bits:

0000052a <lq_writeDevice4Bits>:
 52a:	1f 93       	push	r17
 52c:	cf 93       	push	r28
 52e:	df 93       	push	r29
 530:	ec 01       	movw	r28, r24
 532:	16 2f       	mov	r17, r22
 534:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <lq_transmitI2C>
 538:	61 2f       	mov	r22, r17
 53a:	ce 01       	movw	r24, r28
 53c:	0e 94 2e 02 	call	0x45c	; 0x45c <lq_writeDevicePulse>
 540:	df 91       	pop	r29
 542:	cf 91       	pop	r28
 544:	1f 91       	pop	r17
 546:	08 95       	ret

Disassembly of section .text.lq_writeDeviceByte:

00000422 <lq_writeDeviceByte>:
 422:	ff 92       	push	r15
 424:	0f 93       	push	r16
 426:	1f 93       	push	r17
 428:	cf 93       	push	r28
 42a:	df 93       	push	r29
 42c:	8c 01       	movw	r16, r24
 42e:	f4 2e       	mov	r15, r20
 430:	86 2f       	mov	r24, r22
 432:	80 7f       	andi	r24, 0xF0	; 240
 434:	90 e1       	ldi	r25, 0x10	; 16
 436:	69 9f       	mul	r22, r25
 438:	e0 01       	movw	r28, r0
 43a:	11 24       	eor	r1, r1
 43c:	68 2f       	mov	r22, r24
 43e:	64 2b       	or	r22, r20
 440:	c8 01       	movw	r24, r16
 442:	0e 94 95 02 	call	0x52a	; 0x52a <lq_writeDevice4Bits>
 446:	6c 2f       	mov	r22, r28
 448:	6f 29       	or	r22, r15
 44a:	c8 01       	movw	r24, r16
 44c:	0e 94 95 02 	call	0x52a	; 0x52a <lq_writeDevice4Bits>
 450:	df 91       	pop	r29
 452:	cf 91       	pop	r28
 454:	1f 91       	pop	r17
 456:	0f 91       	pop	r16
 458:	ff 90       	pop	r15
 45a:	08 95       	ret

Disassembly of section .text.lq_print:

00000492 <lq_print>:
 492:	0f 93       	push	r16
 494:	1f 93       	push	r17
 496:	cf 93       	push	r28
 498:	df 93       	push	r29
 49a:	8c 01       	movw	r16, r24
 49c:	eb 01       	movw	r28, r22
 49e:	68 81       	ld	r22, Y
 4a0:	06 c0       	rjmp	.+12     	; 0x4ae <lq_print+0x1c>
 4a2:	41 e0       	ldi	r20, 0x01	; 1
 4a4:	c8 01       	movw	r24, r16
 4a6:	0e 94 11 02 	call	0x422	; 0x422 <lq_writeDeviceByte>
 4aa:	21 96       	adiw	r28, 0x01	; 1
 4ac:	68 81       	ld	r22, Y
 4ae:	61 11       	cpse	r22, r1
 4b0:	f8 cf       	rjmp	.-16     	; 0x4a2 <lq_print+0x10>
 4b2:	df 91       	pop	r29
 4b4:	cf 91       	pop	r28
 4b6:	1f 91       	pop	r17
 4b8:	0f 91       	pop	r16
 4ba:	08 95       	ret

Disassembly of section .text.lq_sendCommand:

000005e6 <lq_sendCommand>:
}


void lq_sendCommand(LiquidCrystalDevice_t* device, uint8_t command)
{
	lq_writeDeviceByte(device, command, 0);
 5e6:	40 e0       	ldi	r20, 0x00	; 0
 5e8:	0e 94 11 02 	call	0x422	; 0x422 <lq_writeDeviceByte>
 5ec:	08 95       	ret

Disassembly of section .text.lq_setCursor:

000003e4 <lq_setCursor>:
 3e4:	cf 93       	push	r28
 3e6:	df 93       	push	r29
 3e8:	00 d0       	rcall	.+0      	; 0x3ea <lq_setCursor+0x6>
 3ea:	00 d0       	rcall	.+0      	; 0x3ec <lq_setCursor+0x8>
 3ec:	cd b7       	in	r28, 0x3d	; 61
 3ee:	de b7       	in	r29, 0x3e	; 62
 3f0:	19 82       	std	Y+1, r1	; 0x01
 3f2:	20 e4       	ldi	r18, 0x40	; 64
 3f4:	2a 83       	std	Y+2, r18	; 0x02
 3f6:	24 e1       	ldi	r18, 0x14	; 20
 3f8:	2b 83       	std	Y+3, r18	; 0x03
 3fa:	24 e5       	ldi	r18, 0x54	; 84
 3fc:	2c 83       	std	Y+4, r18	; 0x04
 3fe:	e1 e0       	ldi	r30, 0x01	; 1
 400:	f0 e0       	ldi	r31, 0x00	; 0
 402:	ec 0f       	add	r30, r28
 404:	fd 1f       	adc	r31, r29
 406:	e6 0f       	add	r30, r22
 408:	f1 1d       	adc	r31, r1
 40a:	60 81       	ld	r22, Z
 40c:	64 0f       	add	r22, r20
 40e:	60 68       	ori	r22, 0x80	; 128
 410:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <lq_sendCommand>
 414:	0f 90       	pop	r0
 416:	0f 90       	pop	r0
 418:	0f 90       	pop	r0
 41a:	0f 90       	pop	r0
 41c:	df 91       	pop	r29
 41e:	cf 91       	pop	r28
 420:	08 95       	ret

Disassembly of section .text.lq_clear:

000004bc <lq_clear>:
 4bc:	cf 93       	push	r28
 4be:	df 93       	push	r29
 4c0:	ec 01       	movw	r28, r24
 4c2:	61 e0       	ldi	r22, 0x01	; 1
 4c4:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <lq_sendCommand>
 4c8:	8f e3       	ldi	r24, 0x3F	; 63
 4ca:	9f e1       	ldi	r25, 0x1F	; 31
 4cc:	01 97       	sbiw	r24, 0x01	; 1
 4ce:	f1 f7       	brne	.-4      	; 0x4cc <lq_clear+0x10>
 4d0:	00 c0       	rjmp	.+0      	; 0x4d2 <lq_clear+0x16>
 4d2:	00 00       	nop
 4d4:	40 e0       	ldi	r20, 0x00	; 0
 4d6:	60 e0       	ldi	r22, 0x00	; 0
 4d8:	ce 01       	movw	r24, r28
 4da:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <lq_setCursor>
 4de:	df 91       	pop	r29
 4e0:	cf 91       	pop	r28
 4e2:	08 95       	ret

Disassembly of section .text.lq_returnHome:

00000578 <lq_returnHome>:
 578:	62 e0       	ldi	r22, 0x02	; 2
 57a:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <lq_sendCommand>
 57e:	8f e3       	ldi	r24, 0x3F	; 63
 580:	9f e1       	ldi	r25, 0x1F	; 31
 582:	01 97       	sbiw	r24, 0x01	; 1
 584:	f1 f7       	brne	.-4      	; 0x582 <lq_returnHome+0xa>
 586:	00 c0       	rjmp	.+0      	; 0x588 <lq_returnHome+0x10>
 588:	00 00       	nop
 58a:	08 95       	ret

Disassembly of section .text.lq_turnOnDisplay:

0000058c <lq_turnOnDisplay>:
 58c:	fc 01       	movw	r30, r24
 58e:	65 81       	ldd	r22, Z+5	; 0x05
 590:	26 2f       	mov	r18, r22
 592:	24 60       	ori	r18, 0x04	; 4
 594:	25 83       	std	Z+5, r18	; 0x05
 596:	6c 60       	ori	r22, 0x0C	; 12
 598:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <lq_sendCommand>
 59c:	08 95       	ret

Disassembly of section .text.lq_turnOnCursor:

0000059e <lq_turnOnCursor>:
 59e:	fc 01       	movw	r30, r24
 5a0:	65 81       	ldd	r22, Z+5	; 0x05
 5a2:	26 2f       	mov	r18, r22
 5a4:	22 60       	ori	r18, 0x02	; 2
 5a6:	25 83       	std	Z+5, r18	; 0x05
 5a8:	6a 60       	ori	r22, 0x0A	; 10
 5aa:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <lq_sendCommand>
 5ae:	08 95       	ret

Disassembly of section .text.lq_turnOnBlink:

000005b0 <lq_turnOnBlink>:
 5b0:	fc 01       	movw	r30, r24
 5b2:	65 81       	ldd	r22, Z+5	; 0x05
 5b4:	26 2f       	mov	r18, r22
 5b6:	21 60       	ori	r18, 0x01	; 1
 5b8:	25 83       	std	Z+5, r18	; 0x05
 5ba:	69 60       	ori	r22, 0x09	; 9
 5bc:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <lq_sendCommand>
 5c0:	08 95       	ret

Disassembly of section .text.lq_init:

000001c4 <lq_init>:
 1c4:	cf 93       	push	r28
 1c6:	df 93       	push	r29
 1c8:	cd b7       	in	r28, 0x3d	; 61
 1ca:	de b7       	in	r29, 0x3e	; 62
 1cc:	2e 97       	sbiw	r28, 0x0e	; 14
 1ce:	0f b6       	in	r0, 0x3f	; 63
 1d0:	f8 94       	cli
 1d2:	de bf       	out	0x3e, r29	; 62
 1d4:	0f be       	out	0x3f, r0	; 63
 1d6:	cd bf       	out	0x3d, r28	; 61
 1d8:	88 87       	std	Y+8, r24	; 0x08
 1da:	69 87       	std	Y+9, r22	; 0x09
 1dc:	4a 87       	std	Y+10, r20	; 0x0a
 1de:	1b 86       	std	Y+11, r1	; 0x0b
 1e0:	2c 87       	std	Y+12, r18	; 0x0c
 1e2:	84 e0       	ldi	r24, 0x04	; 4
 1e4:	8d 87       	std	Y+13, r24	; 0x0d
 1e6:	82 e0       	ldi	r24, 0x02	; 2
 1e8:	8e 87       	std	Y+14, r24	; 0x0e
 1ea:	42 30       	cpi	r20, 0x02	; 2
 1ec:	18 f0       	brcs	.+6      	; 0x1f4 <lq_init+0x30>
 1ee:	82 2f       	mov	r24, r18
 1f0:	88 60       	ori	r24, 0x08	; 8
 1f2:	8c 87       	std	Y+12, r24	; 0x0c
 1f4:	22 23       	and	r18, r18
 1f6:	29 f0       	breq	.+10     	; 0x202 <lq_init+0x3e>
 1f8:	41 30       	cpi	r20, 0x01	; 1
 1fa:	19 f4       	brne	.+6      	; 0x202 <lq_init+0x3e>
 1fc:	8c 85       	ldd	r24, Y+12	; 0x0c
 1fe:	84 60       	ori	r24, 0x04	; 4
 200:	8c 87       	std	Y+12, r24	; 0x0c
 202:	2f ef       	ldi	r18, 0xFF	; 255
 204:	81 ee       	ldi	r24, 0xE1	; 225
 206:	94 e0       	ldi	r25, 0x04	; 4
 208:	21 50       	subi	r18, 0x01	; 1
 20a:	80 40       	sbci	r24, 0x00	; 0
 20c:	90 40       	sbci	r25, 0x00	; 0
 20e:	e1 f7       	brne	.-8      	; 0x208 <lq_init+0x44>
 210:	00 c0       	rjmp	.+0      	; 0x212 <lq_init+0x4e>
 212:	00 00       	nop
 214:	60 e0       	ldi	r22, 0x00	; 0
 216:	ce 01       	movw	r24, r28
 218:	08 96       	adiw	r24, 0x08	; 8
 21a:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <lq_transmitI2C>
 21e:	2f ef       	ldi	r18, 0xFF	; 255
 220:	83 ed       	ldi	r24, 0xD3	; 211
 222:	90 e3       	ldi	r25, 0x30	; 48
 224:	21 50       	subi	r18, 0x01	; 1
 226:	80 40       	sbci	r24, 0x00	; 0
 228:	90 40       	sbci	r25, 0x00	; 0
 22a:	e1 f7       	brne	.-8      	; 0x224 <lq_init+0x60>
 22c:	00 c0       	rjmp	.+0      	; 0x22e <lq_init+0x6a>
 22e:	00 00       	nop
 230:	60 e3       	ldi	r22, 0x30	; 48
 232:	ce 01       	movw	r24, r28
 234:	08 96       	adiw	r24, 0x08	; 8
 236:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <lq_transmitI2C>
 23a:	8f e4       	ldi	r24, 0x4F	; 79
 23c:	96 e4       	ldi	r25, 0x46	; 70
 23e:	01 97       	sbiw	r24, 0x01	; 1
 240:	f1 f7       	brne	.-4      	; 0x23e <lq_init+0x7a>
 242:	00 c0       	rjmp	.+0      	; 0x244 <lq_init+0x80>
 244:	00 00       	nop
 246:	60 e3       	ldi	r22, 0x30	; 48
 248:	ce 01       	movw	r24, r28
 24a:	08 96       	adiw	r24, 0x08	; 8
 24c:	0e 94 95 02 	call	0x52a	; 0x52a <lq_writeDevice4Bits>
 250:	8f e4       	ldi	r24, 0x4F	; 79
 252:	96 e4       	ldi	r25, 0x46	; 70
 254:	01 97       	sbiw	r24, 0x01	; 1
 256:	f1 f7       	brne	.-4      	; 0x254 <lq_init+0x90>
 258:	00 c0       	rjmp	.+0      	; 0x25a <lq_init+0x96>
 25a:	00 00       	nop
 25c:	60 e3       	ldi	r22, 0x30	; 48
 25e:	ce 01       	movw	r24, r28
 260:	08 96       	adiw	r24, 0x08	; 8
 262:	0e 94 95 02 	call	0x52a	; 0x52a <lq_writeDevice4Bits>
 266:	87 e5       	ldi	r24, 0x57	; 87
 268:	92 e0       	ldi	r25, 0x02	; 2
 26a:	01 97       	sbiw	r24, 0x01	; 1
 26c:	f1 f7       	brne	.-4      	; 0x26a <lq_init+0xa6>
 26e:	00 c0       	rjmp	.+0      	; 0x270 <lq_init+0xac>
 270:	00 00       	nop
 272:	60 e2       	ldi	r22, 0x20	; 32
 274:	ce 01       	movw	r24, r28
 276:	08 96       	adiw	r24, 0x08	; 8
 278:	0e 94 95 02 	call	0x52a	; 0x52a <lq_writeDevice4Bits>
 27c:	6c 85       	ldd	r22, Y+12	; 0x0c
 27e:	60 62       	ori	r22, 0x20	; 32
 280:	ce 01       	movw	r24, r28
 282:	08 96       	adiw	r24, 0x08	; 8
 284:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <lq_sendCommand>
 288:	ce 01       	movw	r24, r28
 28a:	08 96       	adiw	r24, 0x08	; 8
 28c:	0e 94 c6 02 	call	0x58c	; 0x58c <lq_turnOnDisplay>
 290:	ce 01       	movw	r24, r28
 292:	08 96       	adiw	r24, 0x08	; 8
 294:	0e 94 5e 02 	call	0x4bc	; 0x4bc <lq_clear>
 298:	6e 85       	ldd	r22, Y+14	; 0x0e
 29a:	64 60       	ori	r22, 0x04	; 4
 29c:	ce 01       	movw	r24, r28
 29e:	08 96       	adiw	r24, 0x08	; 8
 2a0:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <lq_sendCommand>
 2a4:	ce 01       	movw	r24, r28
 2a6:	08 96       	adiw	r24, 0x08	; 8
 2a8:	0e 94 bc 02 	call	0x578	; 0x578 <lq_returnHome>
 2ac:	87 e0       	ldi	r24, 0x07	; 7
 2ae:	fe 01       	movw	r30, r28
 2b0:	38 96       	adiw	r30, 0x08	; 8
 2b2:	de 01       	movw	r26, r28
 2b4:	11 96       	adiw	r26, 0x01	; 1
 2b6:	01 90       	ld	r0, Z+
 2b8:	0d 92       	st	X+, r0
 2ba:	8a 95       	dec	r24
 2bc:	e1 f7       	brne	.-8      	; 0x2b6 <lq_init+0xf2>
 2be:	29 81       	ldd	r18, Y+1	; 0x01
 2c0:	3a 81       	ldd	r19, Y+2	; 0x02
 2c2:	4b 81       	ldd	r20, Y+3	; 0x03
 2c4:	5c 81       	ldd	r21, Y+4	; 0x04
 2c6:	6d 81       	ldd	r22, Y+5	; 0x05
 2c8:	7e 81       	ldd	r23, Y+6	; 0x06
 2ca:	8f 81       	ldd	r24, Y+7	; 0x07
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	2e 96       	adiw	r28, 0x0e	; 14
 2d0:	0f b6       	in	r0, 0x3f	; 63
 2d2:	f8 94       	cli
 2d4:	de bf       	out	0x3e, r29	; 62
 2d6:	0f be       	out	0x3f, r0	; 63
 2d8:	cd bf       	out	0x3d, r28	; 61
 2da:	df 91       	pop	r29
 2dc:	cf 91       	pop	r28
 2de:	08 95       	ret

Disassembly of section .text.main:

000002e0 <main>:
 2e0:	cf 93       	push	r28
 2e2:	df 93       	push	r29
 2e4:	cd b7       	in	r28, 0x3d	; 61
 2e6:	de b7       	in	r29, 0x3e	; 62
 2e8:	6e 97       	sbiw	r28, 0x1e	; 30
 2ea:	0f b6       	in	r0, 0x3f	; 63
 2ec:	f8 94       	cli
 2ee:	de bf       	out	0x3e, r29	; 62
 2f0:	0f be       	out	0x3f, r0	; 63
 2f2:	cd bf       	out	0x3d, r28	; 61
 2f4:	20 e0       	ldi	r18, 0x00	; 0
 2f6:	42 e0       	ldi	r20, 0x02	; 2
 2f8:	60 e1       	ldi	r22, 0x10	; 16
 2fa:	87 e2       	ldi	r24, 0x27	; 39
 2fc:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <lq_init>
 300:	29 83       	std	Y+1, r18	; 0x01
 302:	3a 83       	std	Y+2, r19	; 0x02
 304:	4b 83       	std	Y+3, r20	; 0x03
 306:	5c 83       	std	Y+4, r21	; 0x04
 308:	6d 83       	std	Y+5, r22	; 0x05
 30a:	7e 83       	std	Y+6, r23	; 0x06
 30c:	8f 83       	std	Y+7, r24	; 0x07
 30e:	ce 01       	movw	r24, r28
 310:	01 96       	adiw	r24, 0x01	; 1
 312:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <lq_turnOnBacklight>
 316:	ce 01       	movw	r24, r28
 318:	01 96       	adiw	r24, 0x01	; 1
 31a:	0e 94 cf 02 	call	0x59e	; 0x59e <lq_turnOnCursor>
 31e:	ce 01       	movw	r24, r28
 320:	01 96       	adiw	r24, 0x01	; 1
 322:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <lq_turnOnBlink>
 326:	2c ea       	ldi	r18, 0xAC	; 172
 328:	31 e0       	ldi	r19, 0x01	; 1
 32a:	40 e0       	ldi	r20, 0x00	; 0
 32c:	8a e0       	ldi	r24, 0x0A	; 10
 32e:	f9 01       	movw	r30, r18
 330:	de 01       	movw	r26, r28
 332:	18 96       	adiw	r26, 0x08	; 8
 334:	74 2f       	mov	r23, r20
 336:	0e 94 a4 02 	call	0x548	; 0x548 <__movmemx_qi>
 33a:	26 eb       	ldi	r18, 0xB6	; 182
 33c:	31 e0       	ldi	r19, 0x01	; 1
 33e:	40 e0       	ldi	r20, 0x00	; 0
 340:	8d e0       	ldi	r24, 0x0D	; 13
 342:	f9 01       	movw	r30, r18
 344:	de 01       	movw	r26, r28
 346:	52 96       	adiw	r26, 0x12	; 18
 348:	74 2f       	mov	r23, r20
 34a:	0e 94 a4 02 	call	0x548	; 0x548 <__movmemx_qi>
 34e:	be 01       	movw	r22, r28
 350:	68 5f       	subi	r22, 0xF8	; 248
 352:	7f 4f       	sbci	r23, 0xFF	; 255
 354:	ce 01       	movw	r24, r28
 356:	01 96       	adiw	r24, 0x01	; 1
 358:	0e 94 49 02 	call	0x492	; 0x492 <lq_print>
 35c:	40 e0       	ldi	r20, 0x00	; 0
 35e:	61 e0       	ldi	r22, 0x01	; 1
 360:	ce 01       	movw	r24, r28
 362:	01 96       	adiw	r24, 0x01	; 1
 364:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <lq_setCursor>
 368:	be 01       	movw	r22, r28
 36a:	6e 5e       	subi	r22, 0xEE	; 238
 36c:	7f 4f       	sbci	r23, 0xFF	; 255
 36e:	ce 01       	movw	r24, r28
 370:	01 96       	adiw	r24, 0x01	; 1
 372:	0e 94 49 02 	call	0x492	; 0x492 <lq_print>
 376:	80 e0       	ldi	r24, 0x00	; 0
 378:	90 e0       	ldi	r25, 0x00	; 0
 37a:	6e 96       	adiw	r28, 0x1e	; 30
 37c:	0f b6       	in	r0, 0x3f	; 63
 37e:	f8 94       	cli
 380:	de bf       	out	0x3e, r29	; 62
 382:	0f be       	out	0x3f, r0	; 63
 384:	cd bf       	out	0x3d, r28	; 61
 386:	df 91       	pop	r29
 388:	cf 91       	pop	r28
 38a:	08 95       	ret

Disassembly of section .text.libgcc:

00000548 <__movmemx_qi>:
 548:	99 27       	eor	r25, r25

0000054a <__movmemx_hi>:
 54a:	77 fd       	sbrc	r23, 7
 54c:	05 c0       	rjmp	.+10     	; 0x558 <__movmemx_hi+0xe>
 54e:	05 90       	lpm	r0, Z+
 550:	0d 92       	st	X+, r0
 552:	01 97       	sbiw	r24, 0x01	; 1
 554:	e1 f7       	brne	.-8      	; 0x54e <__movmemx_hi+0x4>
 556:	08 95       	ret
 558:	01 90       	ld	r0, Z+
 55a:	0d 92       	st	X+, r0
 55c:	01 97       	sbiw	r24, 0x01	; 1
 55e:	e1 f7       	brne	.-8      	; 0x558 <__movmemx_hi+0xe>
 560:	08 95       	ret

Disassembly of section .text.__dummy_fini:

000005f6 <_fini>:
 5f6:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

000005f8 <__funcs_on_exit>:
 5f8:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

000005fa <__simulator_exit>:
 5fa:	08 95       	ret

Disassembly of section .text.exit:

00000562 <exit>:
 562:	ec 01       	movw	r28, r24
 564:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <__funcs_on_exit>
 568:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <_fini>
 56c:	ce 01       	movw	r24, r28
 56e:	0e 94 fd 02 	call	0x5fa	; 0x5fa <__simulator_exit>
 572:	ce 01       	movw	r24, r28
 574:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <_Exit>

Disassembly of section .text._Exit:

000005f2 <_Exit>:
 5f2:	0e 94 5c 00 	call	0xb8	; 0xb8 <_exit>
