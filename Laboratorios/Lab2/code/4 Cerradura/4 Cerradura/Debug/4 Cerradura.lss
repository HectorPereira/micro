
4 Cerradura.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000444  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000c2  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  00000444  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  00000473  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000a0  00000000  00000000  00000481  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000010b2  00000000  00000000  00000521  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000795  00000000  00000000  000015d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000631  00000000  00000000  00001d68  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000164  00000000  00000000  0000239c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000022e  00000000  00000000  00002500  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000004fa  00000000  00000000  0000272e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000090  00000000  00000000  00002c28  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  00000382  00000382  00000436  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002cb8  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.twi_init 00000028  0000028e  0000028e  00000342  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.twi_start 0000001a  0000032a  0000032a  000003de  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.twi_write_cmd 0000001e  000002b6  000002b6  0000036a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.twi_write_dwr 0000001e  000002d4  000002d4  00000388  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.twi_stop 00000008  00000372  00000372  00000426  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.PCF8574_write 0000001c  000002f2  000002f2  000003a6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.twi_lcd_4bit_send 00000074  00000180  00000180  00000234  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.twi_lcd_cmd 00000018  00000344  00000344  000003f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.twi_lcd_dwr 0000001c  0000030e  0000030e  000003c2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.twi_lcd_msg 0000002c  00000262  00000262  00000316  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.twi_lcd_clear 00000008  0000037a  0000037a  0000042e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .progmemx.data 0000001d  000000c2  000000c2  00000176  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 26 .text.twi_lcd_init 000000a0  000000e0  000000e0  00000194  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.lcd_write 00000038  000001f4  000001f4  000002a8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.main    00000036  0000022c  0000022c  000002e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .bss.lcd      00000001  00800100  00800100  00000444  2**0
                  ALLOC
 30 .text.__dummy_fini 00000002  0000038a  0000038a  0000043e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.__dummy_funcs_on_exit 00000002  0000038c  0000038c  00000440  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text.__dummy_simulator_exit 00000002  0000038e  0000038e  00000442  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .text.exit    00000016  0000035c  0000035c  00000410  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .text._Exit   00000004  00000386  00000386  0000043a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 37 00 	jmp	0x6e	; 0x6e <__ctors_end>
   4:	0c 94 c1 01 	jmp	0x382	; 0x382 <__bad_interrupt>
   8:	0c 94 c1 01 	jmp	0x382	; 0x382 <__bad_interrupt>
   c:	0c 94 c1 01 	jmp	0x382	; 0x382 <__bad_interrupt>
  10:	0c 94 c1 01 	jmp	0x382	; 0x382 <__bad_interrupt>
  14:	0c 94 c1 01 	jmp	0x382	; 0x382 <__bad_interrupt>
  18:	0c 94 c1 01 	jmp	0x382	; 0x382 <__bad_interrupt>
  1c:	0c 94 c1 01 	jmp	0x382	; 0x382 <__bad_interrupt>
  20:	0c 94 c1 01 	jmp	0x382	; 0x382 <__bad_interrupt>
  24:	0c 94 c1 01 	jmp	0x382	; 0x382 <__bad_interrupt>
  28:	0c 94 c1 01 	jmp	0x382	; 0x382 <__bad_interrupt>
  2c:	0c 94 c1 01 	jmp	0x382	; 0x382 <__bad_interrupt>
  30:	0c 94 c1 01 	jmp	0x382	; 0x382 <__bad_interrupt>
  34:	0c 94 c1 01 	jmp	0x382	; 0x382 <__bad_interrupt>
  38:	0c 94 c1 01 	jmp	0x382	; 0x382 <__bad_interrupt>
  3c:	0c 94 c1 01 	jmp	0x382	; 0x382 <__bad_interrupt>
  40:	0c 94 c1 01 	jmp	0x382	; 0x382 <__bad_interrupt>
  44:	0c 94 c1 01 	jmp	0x382	; 0x382 <__bad_interrupt>
  48:	0c 94 c1 01 	jmp	0x382	; 0x382 <__bad_interrupt>
  4c:	0c 94 c1 01 	jmp	0x382	; 0x382 <__bad_interrupt>
  50:	0c 94 c1 01 	jmp	0x382	; 0x382 <__bad_interrupt>
  54:	0c 94 c1 01 	jmp	0x382	; 0x382 <__bad_interrupt>
  58:	0c 94 c1 01 	jmp	0x382	; 0x382 <__bad_interrupt>
  5c:	0c 94 c1 01 	jmp	0x382	; 0x382 <__bad_interrupt>
  60:	0c 94 c1 01 	jmp	0x382	; 0x382 <__bad_interrupt>
  64:	0c 94 c1 01 	jmp	0x382	; 0x382 <__bad_interrupt>

00000068 <.dinit>:
  68:	01 00       	.word	0x0001	; ????
  6a:	01 01       	movw	r0, r2
  6c:	80 00       	.word	0x0080	; ????

0000006e <__ctors_end>:
  6e:	11 24       	eor	r1, r1
  70:	1f be       	out	0x3f, r1	; 63
  72:	cf ef       	ldi	r28, 0xFF	; 255
  74:	d8 e0       	ldi	r29, 0x08	; 8
  76:	de bf       	out	0x3e, r29	; 62
  78:	cd bf       	out	0x3d, r28	; 61

0000007a <__do_copy_data>:
  7a:	e8 e6       	ldi	r30, 0x68	; 104
  7c:	f0 e0       	ldi	r31, 0x00	; 0
  7e:	40 e0       	ldi	r20, 0x00	; 0
  80:	17 c0       	rjmp	.+46     	; 0xb0 <__do_clear_bss+0x8>
  82:	b5 91       	lpm	r27, Z+
  84:	a5 91       	lpm	r26, Z+
  86:	35 91       	lpm	r19, Z+
  88:	25 91       	lpm	r18, Z+
  8a:	05 91       	lpm	r16, Z+
  8c:	07 fd       	sbrc	r16, 7
  8e:	0c c0       	rjmp	.+24     	; 0xa8 <__do_clear_bss>
  90:	95 91       	lpm	r25, Z+
  92:	85 91       	lpm	r24, Z+
  94:	ef 01       	movw	r28, r30
  96:	f9 2f       	mov	r31, r25
  98:	e8 2f       	mov	r30, r24
  9a:	05 90       	lpm	r0, Z+
  9c:	0d 92       	st	X+, r0
  9e:	a2 17       	cp	r26, r18
  a0:	b3 07       	cpc	r27, r19
  a2:	d9 f7       	brne	.-10     	; 0x9a <__do_copy_data+0x20>
  a4:	fe 01       	movw	r30, r28
  a6:	04 c0       	rjmp	.+8      	; 0xb0 <__do_clear_bss+0x8>

000000a8 <__do_clear_bss>:
  a8:	1d 92       	st	X+, r1
  aa:	a2 17       	cp	r26, r18
  ac:	b3 07       	cpc	r27, r19
  ae:	e1 f7       	brne	.-8      	; 0xa8 <__do_clear_bss>
  b0:	ed 36       	cpi	r30, 0x6D	; 109
  b2:	f4 07       	cpc	r31, r20
  b4:	31 f7       	brne	.-52     	; 0x82 <__do_copy_data+0x8>
  b6:	0e 94 16 01 	call	0x22c	; 0x22c <main>
  ba:	0c 94 ae 01 	jmp	0x35c	; 0x35c <exit>

000000be <_exit>:
  be:	f8 94       	cli

000000c0 <__stop_program>:
  c0:	ff cf       	rjmp	.-2      	; 0xc0 <__stop_program>

Disassembly of section .text:

00000382 <__bad_interrupt>:
 382:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.twi_init:

0000028e <twi_init>:
{
	TWCR=(1<<TWEN)|(1<<TWINT);					//--- No Acknowledgment Condition as per Datasheet
	while (!(TWCR & (1<<TWINT)));				//--- Wait until No Acknowledgment Condition is transmitted to Slave
	while(TW_STATUS != TW_MR_DATA_NACK);		//--- Check for Acknowledgment
	return TWDR;								//--- Return received data
}
 28e:	83 e0       	ldi	r24, 0x03	; 3
 290:	87 b9       	out	0x07, r24	; 7
 292:	88 b9       	out	0x08, r24	; 8
 294:	ec eb       	ldi	r30, 0xBC	; 188
 296:	f0 e0       	ldi	r31, 0x00	; 0
 298:	80 81       	ld	r24, Z
 29a:	8b 7f       	andi	r24, 0xFB	; 251
 29c:	80 83       	st	Z, r24
 29e:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 2a2:	8c e0       	ldi	r24, 0x0C	; 12
 2a4:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
 2a8:	84 e0       	ldi	r24, 0x04	; 4
 2aa:	80 83       	st	Z, r24
 2ac:	85 e3       	ldi	r24, 0x35	; 53
 2ae:	8a 95       	dec	r24
 2b0:	f1 f7       	brne	.-4      	; 0x2ae <twi_init+0x20>
 2b2:	00 00       	nop
 2b4:	08 95       	ret

Disassembly of section .text.twi_start:

0000032a <twi_start>:

/* Function to Send Start Condition */

void twi_start()
{
	TWCR= (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);		//--- Start Condition as per Datasheet
 32a:	84 ea       	ldi	r24, 0xA4	; 164
 32c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(!(TWCR & (1<<TWINT)));				//--- Wait till start condition is transmitted to Slave
 330:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 334:	88 23       	and	r24, r24
 336:	e4 f7       	brge	.-8      	; 0x330 <twi_start+0x6>
	while(TW_STATUS != TW_START);				//--- Check for the acknowledgment 0x08 = TW_START
 338:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 33c:	88 7f       	andi	r24, 0xF8	; 248
 33e:	88 30       	cpi	r24, 0x08	; 8
 340:	d9 f7       	brne	.-10     	; 0x338 <twi_start+0xe>
}
 342:	08 95       	ret

Disassembly of section .text.twi_write_cmd:

000002b6 <twi_write_cmd>:
{
	TWCR=(1<<TWEN)|(1<<TWINT);					//--- No Acknowledgment Condition as per Datasheet
	while (!(TWCR & (1<<TWINT)));				//--- Wait until No Acknowledgment Condition is transmitted to Slave
	while(TW_STATUS != TW_MR_DATA_NACK);		//--- Check for Acknowledgment
	return TWDR;								//--- Return received data
}
 2b6:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 2ba:	84 e8       	ldi	r24, 0x84	; 132
 2bc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 2c0:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 2c4:	88 23       	and	r24, r24
 2c6:	e4 f7       	brge	.-8      	; 0x2c0 <twi_write_cmd+0xa>
 2c8:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 2cc:	88 7f       	andi	r24, 0xF8	; 248
 2ce:	88 31       	cpi	r24, 0x18	; 24
 2d0:	d9 f7       	brne	.-10     	; 0x2c8 <twi_write_cmd+0x12>
 2d2:	08 95       	ret

Disassembly of section .text.twi_write_dwr:

000002d4 <twi_write_dwr>:
 2d4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 2d8:	84 e8       	ldi	r24, 0x84	; 132
 2da:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 2de:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 2e2:	88 23       	and	r24, r24
 2e4:	e4 f7       	brge	.-8      	; 0x2de <twi_write_dwr+0xa>
 2e6:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 2ea:	88 7f       	andi	r24, 0xF8	; 248
 2ec:	88 32       	cpi	r24, 0x28	; 40
 2ee:	d9 f7       	brne	.-10     	; 0x2e6 <twi_write_dwr+0x12>
 2f0:	08 95       	ret

Disassembly of section .text.twi_stop:

00000372 <twi_stop>:

/* Function to Send Stop Condition */

void twi_stop()
{
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);		//--- Stop Condition as per Datasheet
 372:	84 e9       	ldi	r24, 0x94	; 148
 374:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 378:	08 95       	ret

Disassembly of section .text.PCF8574_write:

000002f2 <PCF8574_write>:

unsigned char lcd = 0x00;						//--- Declaring a variable as lcd for data operation

/* Function to Write data in PCF8574 */
void PCF8574_write(unsigned char x)
{
 2f2:	cf 93       	push	r28
 2f4:	c8 2f       	mov	r28, r24
		twi_start();							//--- Start Condition 
 2f6:	0e 94 95 01 	call	0x32a	; 0x32a <twi_start>
		twi_write_cmd((PCF8574 << 1)| WRITE);	//--- SLA+W is Send 0x40 
 2fa:	8e e4       	ldi	r24, 0x4E	; 78
 2fc:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <twi_write_cmd>
		twi_write_dwr(x);						//--- Data to Slave Device
 300:	8c 2f       	mov	r24, r28
 302:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <twi_write_dwr>
		twi_stop();								//--- Stop Condition 
 306:	0e 94 b9 01 	call	0x372	; 0x372 <twi_stop>
}
 30a:	cf 91       	pop	r28
 30c:	08 95       	ret

Disassembly of section .text.twi_lcd_4bit_send:

00000180 <twi_lcd_4bit_send>:
{
	TWCR=(1<<TWEN)|(1<<TWINT);					//--- No Acknowledgment Condition as per Datasheet
	while (!(TWCR & (1<<TWINT)));				//--- Wait until No Acknowledgment Condition is transmitted to Slave
	while(TW_STATUS != TW_MR_DATA_NACK);		//--- Check for Acknowledgment
	return TWDR;								//--- Return received data
}
 180:	cf 93       	push	r28
 182:	c8 2f       	mov	r28, r24
 184:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 188:	8f 70       	andi	r24, 0x0F	; 15
 18a:	9c 2f       	mov	r25, r28
 18c:	90 7f       	andi	r25, 0xF0	; 240
 18e:	89 2b       	or	r24, r25
 190:	84 60       	ori	r24, 0x04	; 4
 192:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 196:	0e 94 79 01 	call	0x2f2	; 0x2f2 <PCF8574_write>
 19a:	85 e0       	ldi	r24, 0x05	; 5
 19c:	8a 95       	dec	r24
 19e:	f1 f7       	brne	.-4      	; 0x19c <twi_lcd_4bit_send+0x1c>
 1a0:	00 00       	nop
 1a2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1a6:	8b 7f       	andi	r24, 0xFB	; 251
 1a8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 1ac:	0e 94 79 01 	call	0x2f2	; 0x2f2 <PCF8574_write>
 1b0:	8a e1       	ldi	r24, 0x1A	; 26
 1b2:	8a 95       	dec	r24
 1b4:	f1 f7       	brne	.-4      	; 0x1b2 <twi_lcd_4bit_send+0x32>
 1b6:	00 c0       	rjmp	.+0      	; 0x1b8 <twi_lcd_4bit_send+0x38>
 1b8:	80 e1       	ldi	r24, 0x10	; 16
 1ba:	c8 9f       	mul	r28, r24
 1bc:	90 01       	movw	r18, r0
 1be:	11 24       	eor	r1, r1
 1c0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1c4:	8f 70       	andi	r24, 0x0F	; 15
 1c6:	82 2b       	or	r24, r18
 1c8:	84 60       	ori	r24, 0x04	; 4
 1ca:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 1ce:	0e 94 79 01 	call	0x2f2	; 0x2f2 <PCF8574_write>
 1d2:	85 e0       	ldi	r24, 0x05	; 5
 1d4:	8a 95       	dec	r24
 1d6:	f1 f7       	brne	.-4      	; 0x1d4 <twi_lcd_4bit_send+0x54>
 1d8:	00 00       	nop
 1da:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1de:	8b 7f       	andi	r24, 0xFB	; 251
 1e0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 1e4:	0e 94 79 01 	call	0x2f2	; 0x2f2 <PCF8574_write>
 1e8:	8a e1       	ldi	r24, 0x1A	; 26
 1ea:	8a 95       	dec	r24
 1ec:	f1 f7       	brne	.-4      	; 0x1ea <twi_lcd_4bit_send+0x6a>
 1ee:	00 c0       	rjmp	.+0      	; 0x1f0 <twi_lcd_4bit_send+0x70>
 1f0:	cf 91       	pop	r28
 1f2:	08 95       	ret

Disassembly of section .text.twi_lcd_cmd:

00000344 <twi_lcd_cmd>:
	
}

/* Function to Write to LCD Command Register */
void twi_lcd_cmd(const unsigned char x)
{
 344:	cf 93       	push	r28
 346:	c8 2f       	mov	r28, r24
	lcd = 0x08;									//--- Enable Backlight Pin
 348:	88 e0       	ldi	r24, 0x08	; 8
 34a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	lcd &= ~(0x01);								//--- Select Command Register By RS = 0
	PCF8574_write(lcd);							//--- Send Data From PCF8574 to LCD PORT
 34e:	0e 94 79 01 	call	0x2f2	; 0x2f2 <PCF8574_write>
	twi_lcd_4bit_send(x);						//--- Function to Write 4-bit data to LCD 	
 352:	8c 2f       	mov	r24, r28
 354:	0e 94 c0 00 	call	0x180	; 0x180 <twi_lcd_4bit_send>
}
 358:	cf 91       	pop	r28
 35a:	08 95       	ret

Disassembly of section .text.twi_lcd_dwr:

0000030e <twi_lcd_dwr>:

/* Function to Write to LCD Command Register */
void twi_lcd_dwr(unsigned char x)
{
 30e:	cf 93       	push	r28
 310:	c8 2f       	mov	r28, r24
	lcd |= 0x09;								//--- Enable Backlight Pin & Select Data Register By RS = 1
 312:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 316:	89 60       	ori	r24, 0x09	; 9
 318:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	PCF8574_write(lcd);							//--- Send Data From PCF8574 to LCD PORT	
 31c:	0e 94 79 01 	call	0x2f2	; 0x2f2 <PCF8574_write>
	twi_lcd_4bit_send(x);						//--- Function to Write 4-bit data to LCD
 320:	8c 2f       	mov	r24, r28
 322:	0e 94 c0 00 	call	0x180	; 0x180 <twi_lcd_4bit_send>
}
 326:	cf 91       	pop	r28
 328:	08 95       	ret

Disassembly of section .text.twi_lcd_msg:

00000262 <twi_lcd_msg>:
 262:	cf 92       	push	r12
 264:	df 92       	push	r13
 266:	ef 92       	push	r14
 268:	6b 01       	movw	r12, r22
 26a:	e8 2e       	mov	r14, r24
 26c:	06 c0       	rjmp	.+12     	; 0x27a <twi_lcd_msg+0x18>
 26e:	9f ef       	ldi	r25, 0xFF	; 255
 270:	c9 1a       	sub	r12, r25
 272:	d9 0a       	sbc	r13, r25
 274:	e9 0a       	sbc	r14, r25
 276:	0e 94 87 01 	call	0x30e	; 0x30e <twi_lcd_dwr>
 27a:	f6 01       	movw	r30, r12
 27c:	84 91       	lpm	r24, Z
 27e:	e7 fc       	sbrc	r14, 7
 280:	80 81       	ld	r24, Z
 282:	81 11       	cpse	r24, r1
 284:	f4 cf       	rjmp	.-24     	; 0x26e <twi_lcd_msg+0xc>
 286:	ef 90       	pop	r14
 288:	df 90       	pop	r13
 28a:	cf 90       	pop	r12
 28c:	08 95       	ret

Disassembly of section .text.twi_lcd_clear:

0000037a <twi_lcd_clear>:
}

/* Function to Execute Clear LCD Command */
void twi_lcd_clear()
{
	twi_lcd_cmd(0x01);
 37a:	81 e0       	ldi	r24, 0x01	; 1
 37c:	0e 94 a2 01 	call	0x344	; 0x344 <twi_lcd_cmd>
 380:	08 95       	ret

Disassembly of section .text.twi_lcd_init:

000000e0 <twi_lcd_init>:
  e0:	84 e0       	ldi	r24, 0x04	; 4
  e2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
  e6:	0e 94 79 01 	call	0x2f2	; 0x2f2 <PCF8574_write>
  ea:	25 e8       	ldi	r18, 0x85	; 133
  ec:	2a 95       	dec	r18
  ee:	f1 f7       	brne	.-4      	; 0xec <twi_lcd_init+0xc>
  f0:	00 00       	nop
  f2:	83 e0       	ldi	r24, 0x03	; 3
  f4:	0e 94 a2 01 	call	0x344	; 0x344 <twi_lcd_cmd>
  f8:	83 e0       	ldi	r24, 0x03	; 3
  fa:	0e 94 a2 01 	call	0x344	; 0x344 <twi_lcd_cmd>
  fe:	83 e0       	ldi	r24, 0x03	; 3
 100:	0e 94 a2 01 	call	0x344	; 0x344 <twi_lcd_cmd>
 104:	82 e0       	ldi	r24, 0x02	; 2
 106:	0e 94 a2 01 	call	0x344	; 0x344 <twi_lcd_cmd>
 10a:	88 e2       	ldi	r24, 0x28	; 40
 10c:	0e 94 a2 01 	call	0x344	; 0x344 <twi_lcd_cmd>
 110:	8f e0       	ldi	r24, 0x0F	; 15
 112:	0e 94 a2 01 	call	0x344	; 0x344 <twi_lcd_cmd>
 116:	81 e0       	ldi	r24, 0x01	; 1
 118:	0e 94 a2 01 	call	0x344	; 0x344 <twi_lcd_cmd>
 11c:	86 e0       	ldi	r24, 0x06	; 6
 11e:	0e 94 a2 01 	call	0x344	; 0x344 <twi_lcd_cmd>
 122:	80 e8       	ldi	r24, 0x80	; 128
 124:	0e 94 a2 01 	call	0x344	; 0x344 <twi_lcd_cmd>
 128:	86 e0       	ldi	r24, 0x06	; 6
 12a:	0e 94 a2 01 	call	0x344	; 0x344 <twi_lcd_cmd>
 12e:	86 e0       	ldi	r24, 0x06	; 6
 130:	0e 94 a2 01 	call	0x344	; 0x344 <twi_lcd_cmd>
 134:	86 e0       	ldi	r24, 0x06	; 6
 136:	0e 94 a2 01 	call	0x344	; 0x344 <twi_lcd_cmd>
 13a:	86 e0       	ldi	r24, 0x06	; 6
 13c:	0e 94 a2 01 	call	0x344	; 0x344 <twi_lcd_cmd>
 140:	86 e0       	ldi	r24, 0x06	; 6
 142:	0e 94 a2 01 	call	0x344	; 0x344 <twi_lcd_cmd>
 146:	86 e0       	ldi	r24, 0x06	; 6
 148:	0e 94 a2 01 	call	0x344	; 0x344 <twi_lcd_cmd>
 14c:	86 e0       	ldi	r24, 0x06	; 6
 14e:	0e 94 a2 01 	call	0x344	; 0x344 <twi_lcd_cmd>
 152:	86 e0       	ldi	r24, 0x06	; 6
 154:	0e 94 a2 01 	call	0x344	; 0x344 <twi_lcd_cmd>
 158:	86 e0       	ldi	r24, 0x06	; 6
 15a:	0e 94 a2 01 	call	0x344	; 0x344 <twi_lcd_cmd>
 15e:	62 ec       	ldi	r22, 0xC2	; 194
 160:	70 e0       	ldi	r23, 0x00	; 0
 162:	80 e0       	ldi	r24, 0x00	; 0
 164:	0e 94 31 01 	call	0x262	; 0x262 <twi_lcd_msg>
 168:	8f ef       	ldi	r24, 0xFF	; 255
 16a:	93 ed       	ldi	r25, 0xD3	; 211
 16c:	20 e3       	ldi	r18, 0x30	; 48
 16e:	81 50       	subi	r24, 0x01	; 1
 170:	90 40       	sbci	r25, 0x00	; 0
 172:	20 40       	sbci	r18, 0x00	; 0
 174:	e1 f7       	brne	.-8      	; 0x16e <twi_lcd_init+0x8e>
 176:	00 c0       	rjmp	.+0      	; 0x178 <twi_lcd_init+0x98>
 178:	00 00       	nop
 17a:	0e 94 bd 01 	call	0x37a	; 0x37a <twi_lcd_clear>
 17e:	08 95       	ret

Disassembly of section .text.lcd_write:

000001f4 <lcd_write>:
 1f4:	cf 92       	push	r12
 1f6:	df 92       	push	r13
 1f8:	ef 92       	push	r14
 1fa:	6b 01       	movw	r12, r22
 1fc:	e8 2e       	mov	r14, r24
 1fe:	86 e0       	ldi	r24, 0x06	; 6
 200:	0e 94 a2 01 	call	0x344	; 0x344 <twi_lcd_cmd>
 204:	86 e0       	ldi	r24, 0x06	; 6
 206:	0e 94 a2 01 	call	0x344	; 0x344 <twi_lcd_cmd>
 20a:	86 e0       	ldi	r24, 0x06	; 6
 20c:	0e 94 a2 01 	call	0x344	; 0x344 <twi_lcd_cmd>
 210:	86 e0       	ldi	r24, 0x06	; 6
 212:	0e 94 a2 01 	call	0x344	; 0x344 <twi_lcd_cmd>
 216:	86 e0       	ldi	r24, 0x06	; 6
 218:	0e 94 a2 01 	call	0x344	; 0x344 <twi_lcd_cmd>
 21c:	8e 2d       	mov	r24, r14
 21e:	b6 01       	movw	r22, r12
 220:	0e 94 31 01 	call	0x262	; 0x262 <twi_lcd_msg>
 224:	ef 90       	pop	r14
 226:	df 90       	pop	r13
 228:	cf 90       	pop	r12
 22a:	08 95       	ret

Disassembly of section .text.main:

0000022c <main>:
 22c:	0e 94 47 01 	call	0x28e	; 0x28e <twi_init>
 230:	0e 94 70 00 	call	0xe0	; 0xe0 <twi_lcd_init>
 234:	87 b1       	in	r24, 0x07	; 7
 236:	83 60       	ori	r24, 0x03	; 3
 238:	87 b9       	out	0x07, r24	; 7
 23a:	88 b1       	in	r24, 0x08	; 8
 23c:	83 60       	ori	r24, 0x03	; 3
 23e:	88 b9       	out	0x08, r24	; 8
 240:	62 ed       	ldi	r22, 0xD2	; 210
 242:	70 e0       	ldi	r23, 0x00	; 0
 244:	80 e0       	ldi	r24, 0x00	; 0
 246:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_write>
 24a:	2f ef       	ldi	r18, 0xFF	; 255
 24c:	80 e7       	ldi	r24, 0x70	; 112
 24e:	92 e0       	ldi	r25, 0x02	; 2
 250:	21 50       	subi	r18, 0x01	; 1
 252:	80 40       	sbci	r24, 0x00	; 0
 254:	90 40       	sbci	r25, 0x00	; 0
 256:	e1 f7       	brne	.-8      	; 0x250 <main+0x24>
 258:	00 c0       	rjmp	.+0      	; 0x25a <main+0x2e>
 25a:	00 00       	nop
 25c:	0e 94 bd 01 	call	0x37a	; 0x37a <twi_lcd_clear>
 260:	ef cf       	rjmp	.-34     	; 0x240 <main+0x14>

Disassembly of section .text.__dummy_fini:

0000038a <_fini>:
 38a:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

0000038c <__funcs_on_exit>:
 38c:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

0000038e <__simulator_exit>:
 38e:	08 95       	ret

Disassembly of section .text.exit:

0000035c <exit>:
 35c:	ec 01       	movw	r28, r24
 35e:	0e 94 c6 01 	call	0x38c	; 0x38c <__funcs_on_exit>
 362:	0e 94 c5 01 	call	0x38a	; 0x38a <_fini>
 366:	ce 01       	movw	r24, r28
 368:	0e 94 c7 01 	call	0x38e	; 0x38e <__simulator_exit>
 36c:	ce 01       	movw	r24, r28
 36e:	0e 94 c3 01 	call	0x386	; 0x386 <_Exit>

Disassembly of section .text._Exit:

00000386 <_Exit>:
 386:	0e 94 5f 00 	call	0xbe	; 0xbe <_exit>
