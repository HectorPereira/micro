
4 Cerradura.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000023a  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000c2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  0000023a  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  00000269  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000148  00000000  00000000  00000277  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001be3  00000000  00000000  000003bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000862  00000000  00000000  00001fa2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000a5f  00000000  00000000  00002804  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000035c  00000000  00000000  00003264  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000260  00000000  00000000  000035c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000010dd  00000000  00000000  00003820  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000138  00000000  00000000  000048fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  00000198  00000198  0000022c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004a38  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.keypad_scan 000000a0  000000c2  000000c2  00000156  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.main    00000020  00000162  00000162  000001f6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .bss.prevKey.2427 00000001  00800100  00800100  0000023a  2**0
                  ALLOC
 17 .text.__dummy_fini 00000002  000001a0  000001a0  00000234  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.__dummy_funcs_on_exit 00000002  000001a2  000001a2  00000236  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.__dummy_simulator_exit 00000002  000001a4  000001a4  00000238  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.exit    00000016  00000182  00000182  00000216  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text._Exit   00000004  0000019c  0000019c  00000230  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 37 00 	jmp	0x6e	; 0x6e <__ctors_end>
   4:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
   8:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
   c:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
  10:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
  14:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
  18:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
  1c:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
  20:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
  24:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
  28:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
  2c:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
  30:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
  34:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
  38:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
  3c:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
  40:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
  44:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
  48:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
  4c:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
  50:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
  54:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
  58:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
  5c:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
  60:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
  64:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>

00000068 <.dinit>:
  68:	01 00       	.word	0x0001	; ????
  6a:	01 01       	movw	r0, r2
  6c:	80 00       	.word	0x0080	; ????

0000006e <__ctors_end>:
  6e:	11 24       	eor	r1, r1
  70:	1f be       	out	0x3f, r1	; 63
  72:	cf ef       	ldi	r28, 0xFF	; 255
  74:	d8 e0       	ldi	r29, 0x08	; 8
  76:	de bf       	out	0x3e, r29	; 62
  78:	cd bf       	out	0x3d, r28	; 61

0000007a <__do_copy_data>:
  7a:	e8 e6       	ldi	r30, 0x68	; 104
  7c:	f0 e0       	ldi	r31, 0x00	; 0
  7e:	40 e0       	ldi	r20, 0x00	; 0
  80:	17 c0       	rjmp	.+46     	; 0xb0 <__do_clear_bss+0x8>
  82:	b5 91       	lpm	r27, Z+
  84:	a5 91       	lpm	r26, Z+
  86:	35 91       	lpm	r19, Z+
  88:	25 91       	lpm	r18, Z+
  8a:	05 91       	lpm	r16, Z+
  8c:	07 fd       	sbrc	r16, 7
  8e:	0c c0       	rjmp	.+24     	; 0xa8 <__do_clear_bss>
  90:	95 91       	lpm	r25, Z+
  92:	85 91       	lpm	r24, Z+
  94:	ef 01       	movw	r28, r30
  96:	f9 2f       	mov	r31, r25
  98:	e8 2f       	mov	r30, r24
  9a:	05 90       	lpm	r0, Z+
  9c:	0d 92       	st	X+, r0
  9e:	a2 17       	cp	r26, r18
  a0:	b3 07       	cpc	r27, r19
  a2:	d9 f7       	brne	.-10     	; 0x9a <__do_copy_data+0x20>
  a4:	fe 01       	movw	r30, r28
  a6:	04 c0       	rjmp	.+8      	; 0xb0 <__do_clear_bss+0x8>

000000a8 <__do_clear_bss>:
  a8:	1d 92       	st	X+, r1
  aa:	a2 17       	cp	r26, r18
  ac:	b3 07       	cpc	r27, r19
  ae:	e1 f7       	brne	.-8      	; 0xa8 <__do_clear_bss>
  b0:	ed 36       	cpi	r30, 0x6D	; 109
  b2:	f4 07       	cpc	r31, r20
  b4:	31 f7       	brne	.-52     	; 0x82 <__do_copy_data+0x8>
  b6:	0e 94 b1 00 	call	0x162	; 0x162 <main>
  ba:	0c 94 c1 00 	jmp	0x182	; 0x182 <exit>

000000be <_exit>:
  be:	f8 94       	cli

000000c0 <__stop_program>:
  c0:	ff cf       	rjmp	.-2      	; 0xc0 <__stop_program>

Disassembly of section .text:

00000198 <__bad_interrupt>:
 198:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.keypad_scan:

000000c2 <keypad_scan>:
uint8_t keypad_scan(void) {
	uint8_t row, col;
	uint8_t cols;
	static uint8_t prevKey;

	for (row = 0; row < 4; row++) {
  c2:	40 e0       	ldi	r20, 0x00	; 0
  c4:	45 c0       	rjmp	.+138    	; 0x150 <keypad_scan+0x8e>
		// Set all rows HIGH, then pull one LOW
		PORTD = (PORTD | 0xF0) & ~(1 << (row + 4));
  c6:	8b b1       	in	r24, 0x0b	; 11
  c8:	64 2f       	mov	r22, r20
  ca:	70 e0       	ldi	r23, 0x00	; 0
  cc:	fb 01       	movw	r30, r22
  ce:	34 96       	adiw	r30, 0x04	; 4
  d0:	21 e0       	ldi	r18, 0x01	; 1
  d2:	30 e0       	ldi	r19, 0x00	; 0
  d4:	02 c0       	rjmp	.+4      	; 0xda <keypad_scan+0x18>
  d6:	22 0f       	add	r18, r18
  d8:	33 1f       	adc	r19, r19
  da:	ea 95       	dec	r30
  dc:	e2 f7       	brpl	.-8      	; 0xd6 <keypad_scan+0x14>
  de:	80 6f       	ori	r24, 0xF0	; 240
  e0:	20 95       	com	r18
  e2:	28 23       	and	r18, r24
  e4:	2b b9       	out	0x0b, r18	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e6:	2a e1       	ldi	r18, 0x1A	; 26
  e8:	2a 95       	dec	r18
  ea:	f1 f7       	brne	.-4      	; 0xe8 <keypad_scan+0x26>
  ec:	00 c0       	rjmp	.+0      	; 0xee <keypad_scan+0x2c>
		_delay_us(5);  // small delay to settle signals

		cols = PIND & 0x0F;  // read lower 4 bits
  ee:	99 b1       	in	r25, 0x09	; 9
  f0:	9f 70       	andi	r25, 0x0F	; 15

		for (col = 0; col < 4; col++) {
  f2:	80 e0       	ldi	r24, 0x00	; 0
  f4:	2a c0       	rjmp	.+84     	; 0x14a <keypad_scan+0x88>
			if (!(cols & (1 << col)) ) {
  f6:	e8 2f       	mov	r30, r24
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	29 2f       	mov	r18, r25
  fc:	30 e0       	ldi	r19, 0x00	; 0
  fe:	08 2e       	mov	r0, r24
 100:	02 c0       	rjmp	.+4      	; 0x106 <keypad_scan+0x44>
 102:	35 95       	asr	r19
 104:	27 95       	ror	r18
 106:	0a 94       	dec	r0
 108:	e2 f7       	brpl	.-8      	; 0x102 <keypad_scan+0x40>
 10a:	20 fd       	sbrc	r18, 0
 10c:	1d c0       	rjmp	.+58     	; 0x148 <keypad_scan+0x86>
				if ((prevKey == ((row * 4) + col + 1))) return 0;
 10e:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 112:	30 e0       	ldi	r19, 0x00	; 0
 114:	66 0f       	add	r22, r22
 116:	77 1f       	adc	r23, r23
 118:	66 0f       	add	r22, r22
 11a:	77 1f       	adc	r23, r23
 11c:	e6 0f       	add	r30, r22
 11e:	f7 1f       	adc	r31, r23
 120:	31 96       	adiw	r30, 0x01	; 1
 122:	2e 17       	cp	r18, r30
 124:	3f 07       	cpc	r19, r31
 126:	d9 f0       	breq	.+54     	; 0x15e <keypad_scan+0x9c>
				// Key at (row, col) is pressed
				prevKey = (row * 4) + col + 1;
 128:	44 0f       	add	r20, r20
 12a:	44 0f       	add	r20, r20
 12c:	84 0f       	add	r24, r20
 12e:	8f 5f       	subi	r24, 0xFF	; 255
 130:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 134:	3f ef       	ldi	r19, 0xFF	; 255
 136:	96 e7       	ldi	r25, 0x76	; 118
 138:	21 e0       	ldi	r18, 0x01	; 1
 13a:	31 50       	subi	r19, 0x01	; 1
 13c:	90 40       	sbci	r25, 0x00	; 0
 13e:	20 40       	sbci	r18, 0x00	; 0
 140:	e1 f7       	brne	.-8      	; 0x13a <keypad_scan+0x78>
 142:	00 c0       	rjmp	.+0      	; 0x144 <keypad_scan+0x82>
 144:	00 00       	nop
				_delay_ms(30);
				return (row * 4) + col + 1;  // simple numeric code 1–16
 146:	08 95       	ret
		PORTD = (PORTD | 0xF0) & ~(1 << (row + 4));
		_delay_us(5);  // small delay to settle signals

		cols = PIND & 0x0F;  // read lower 4 bits

		for (col = 0; col < 4; col++) {
 148:	8f 5f       	subi	r24, 0xFF	; 255
 14a:	84 30       	cpi	r24, 0x04	; 4
 14c:	a0 f2       	brcs	.-88     	; 0xf6 <keypad_scan+0x34>
uint8_t keypad_scan(void) {
	uint8_t row, col;
	uint8_t cols;
	static uint8_t prevKey;

	for (row = 0; row < 4; row++) {
 14e:	4f 5f       	subi	r20, 0xFF	; 255
 150:	44 30       	cpi	r20, 0x04	; 4
 152:	08 f4       	brcc	.+2      	; 0x156 <keypad_scan+0x94>
 154:	b8 cf       	rjmp	.-144    	; 0xc6 <keypad_scan+0x4>
				_delay_ms(30);
				return (row * 4) + col + 1;  // simple numeric code 1–16
			} 
		}
	}
	prevKey = 0;
 156:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
	return 0; // no key pressed
 15a:	80 e0       	ldi	r24, 0x00	; 0
 15c:	08 95       	ret

		cols = PIND & 0x0F;  // read lower 4 bits

		for (col = 0; col < 4; col++) {
			if (!(cols & (1 << col)) ) {
				if ((prevKey == ((row * 4) + col + 1))) return 0;
 15e:	80 e0       	ldi	r24, 0x00	; 0
			} 
		}
	}
	prevKey = 0;
	return 0; // no key pressed
}
 160:	08 95       	ret

Disassembly of section .text.main:

00000162 <main>:
		} 
	}
}

inline void keypad_init(void){
	DDRD = 0b11110000;
 162:	80 ef       	ldi	r24, 0xF0	; 240
 164:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0b00001111;
 166:	8f e0       	ldi	r24, 0x0F	; 15
 168:	8b b9       	out	0x0b, r24	; 11
inline void keypad_init(void);
uint8_t keypad_scan(void);

int main(void) {
	keypad_init();
	DDRB |= (1<<PORTB5);
 16a:	84 b1       	in	r24, 0x04	; 4
 16c:	80 62       	ori	r24, 0x20	; 32
 16e:	84 b9       	out	0x04, r24	; 4
	

	while (1) {
		uint8_t key = keypad_scan();
 170:	0e 94 61 00 	call	0xc2	; 0xc2 <__data_load_end>
		if (key) {
 174:	88 23       	and	r24, r24
 176:	e1 f3       	breq	.-8      	; 0x170 <main+0xe>
			PORTB ^= (1<<PORTB5);
 178:	95 b1       	in	r25, 0x05	; 5
 17a:	80 e2       	ldi	r24, 0x20	; 32
 17c:	89 27       	eor	r24, r25
 17e:	85 b9       	out	0x05, r24	; 5
 180:	f7 cf       	rjmp	.-18     	; 0x170 <main+0xe>

Disassembly of section .text.__dummy_fini:

000001a0 <_fini>:
 1a0:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

000001a2 <__funcs_on_exit>:
 1a2:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

000001a4 <__simulator_exit>:
 1a4:	08 95       	ret

Disassembly of section .text.exit:

00000182 <exit>:
 182:	ec 01       	movw	r28, r24
 184:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <__funcs_on_exit>
 188:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <_fini>
 18c:	ce 01       	movw	r24, r28
 18e:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <__simulator_exit>
 192:	ce 01       	movw	r24, r28
 194:	0e 94 ce 00 	call	0x19c	; 0x19c <_Exit>

Disassembly of section .text._Exit:

0000019c <_Exit>:
 19c:	0e 94 5f 00 	call	0xbe	; 0xbe <_exit>
