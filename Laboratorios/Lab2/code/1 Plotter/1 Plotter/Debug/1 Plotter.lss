
1 Plotter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000047a  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000c2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000100  00800100  00800100  0000047a  2**0
                  ALLOC
  3 .comment      0000002f  00000000  00000000  0000047a  2**0
                  CONTENTS, READONLY
  4 .stack.descriptors.hdr 0000000e  00000000  00000000  000004a9  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  000004b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ddb  00000000  00000000  00000557  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007d6  00000000  00000000  00001332  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000558  00000000  00000000  00001b08  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000190  00000000  00000000  00002060  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000020f  00000000  00000000  000021f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000028b  00000000  00000000  000023ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  0000268a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .text         00000004  000003d8  000003d8  0000046c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000271c  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .text.__vector_13 0000002e  000002fa  000002fa  0000038e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.serialWrite 0000007e  0000019a  0000019a  0000022e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.__vector_19 00000068  00000218  00000218  000002ac  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.Chardos 00000034  000002c6  000002c6  0000035a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.__vector_18 00000046  00000280  00000280  00000314  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.apagar  00000026  00000380  00000380  00000414  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.Subir   0000000e  000003bc  000003bc  00000450  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.Bajar   0000000e  000003ca  000003ca  0000045e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .progmemx.data 00000052  000000c2  000000c2  00000156  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 24 .text.centrar 0000002c  00000328  00000328  000003bc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.main    00000086  00000114  00000114  000001a8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .bss.CONTADOR 00000001  00800200  00800200  0000047a  2**0
                  ALLOC
 27 .bss.rxWritePos 00000001  00800201  00800201  0000047a  2**0
                  ALLOC
 28 .bss.rxReadPos 00000001  00800202  00800202  0000047a  2**0
                  ALLOC
 29 .bss.serialWritePos 00000001  00800203  00800203  0000047a  2**0
                  ALLOC
 30 .bss.serialReadPos 00000001  00800204  00800204  0000047a  2**0
                  ALLOC
 31 .text.__dummy_fini 00000002  000003e0  000003e0  00000474  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text.__dummy_funcs_on_exit 00000002  000003e2  000003e2  00000476  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .text.__dummy_simulator_exit 00000002  000003e4  000003e4  00000478  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .text.exit    00000016  000003a6  000003a6  0000043a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .text.strlen  0000002c  00000354  00000354  000003e8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 36 .text._Exit   00000004  000003dc  000003dc  00000470  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 37 00 	jmp	0x6e	; 0x6e <__ctors_end>
   4:	0c 94 ec 01 	jmp	0x3d8	; 0x3d8 <__bad_interrupt>
   8:	0c 94 ec 01 	jmp	0x3d8	; 0x3d8 <__bad_interrupt>
   c:	0c 94 ec 01 	jmp	0x3d8	; 0x3d8 <__bad_interrupt>
  10:	0c 94 ec 01 	jmp	0x3d8	; 0x3d8 <__bad_interrupt>
  14:	0c 94 ec 01 	jmp	0x3d8	; 0x3d8 <__bad_interrupt>
  18:	0c 94 ec 01 	jmp	0x3d8	; 0x3d8 <__bad_interrupt>
  1c:	0c 94 ec 01 	jmp	0x3d8	; 0x3d8 <__bad_interrupt>
  20:	0c 94 ec 01 	jmp	0x3d8	; 0x3d8 <__bad_interrupt>
  24:	0c 94 ec 01 	jmp	0x3d8	; 0x3d8 <__bad_interrupt>
  28:	0c 94 ec 01 	jmp	0x3d8	; 0x3d8 <__bad_interrupt>
  2c:	0c 94 ec 01 	jmp	0x3d8	; 0x3d8 <__bad_interrupt>
  30:	0c 94 ec 01 	jmp	0x3d8	; 0x3d8 <__bad_interrupt>
  34:	0c 94 7d 01 	jmp	0x2fa	; 0x2fa <__vector_13>
  38:	0c 94 ec 01 	jmp	0x3d8	; 0x3d8 <__bad_interrupt>
  3c:	0c 94 ec 01 	jmp	0x3d8	; 0x3d8 <__bad_interrupt>
  40:	0c 94 ec 01 	jmp	0x3d8	; 0x3d8 <__bad_interrupt>
  44:	0c 94 ec 01 	jmp	0x3d8	; 0x3d8 <__bad_interrupt>
  48:	0c 94 40 01 	jmp	0x280	; 0x280 <__vector_18>
  4c:	0c 94 0c 01 	jmp	0x218	; 0x218 <__vector_19>
  50:	0c 94 ec 01 	jmp	0x3d8	; 0x3d8 <__bad_interrupt>
  54:	0c 94 ec 01 	jmp	0x3d8	; 0x3d8 <__bad_interrupt>
  58:	0c 94 ec 01 	jmp	0x3d8	; 0x3d8 <__bad_interrupt>
  5c:	0c 94 ec 01 	jmp	0x3d8	; 0x3d8 <__bad_interrupt>
  60:	0c 94 ec 01 	jmp	0x3d8	; 0x3d8 <__bad_interrupt>
  64:	0c 94 ec 01 	jmp	0x3d8	; 0x3d8 <__bad_interrupt>

00000068 <.dinit>:
  68:	01 00       	.word	0x0001	; ????
  6a:	02 05       	cpc	r16, r2
  6c:	80 00       	.word	0x0080	; ????

0000006e <__ctors_end>:
  6e:	11 24       	eor	r1, r1
  70:	1f be       	out	0x3f, r1	; 63
  72:	cf ef       	ldi	r28, 0xFF	; 255
  74:	d8 e0       	ldi	r29, 0x08	; 8
  76:	de bf       	out	0x3e, r29	; 62
  78:	cd bf       	out	0x3d, r28	; 61

0000007a <__do_copy_data>:
  7a:	e8 e6       	ldi	r30, 0x68	; 104
  7c:	f0 e0       	ldi	r31, 0x00	; 0
  7e:	40 e0       	ldi	r20, 0x00	; 0
  80:	17 c0       	rjmp	.+46     	; 0xb0 <__do_clear_bss+0x8>
  82:	b5 91       	lpm	r27, Z+
  84:	a5 91       	lpm	r26, Z+
  86:	35 91       	lpm	r19, Z+
  88:	25 91       	lpm	r18, Z+
  8a:	05 91       	lpm	r16, Z+
  8c:	07 fd       	sbrc	r16, 7
  8e:	0c c0       	rjmp	.+24     	; 0xa8 <__do_clear_bss>
  90:	95 91       	lpm	r25, Z+
  92:	85 91       	lpm	r24, Z+
  94:	ef 01       	movw	r28, r30
  96:	f9 2f       	mov	r31, r25
  98:	e8 2f       	mov	r30, r24
  9a:	05 90       	lpm	r0, Z+
  9c:	0d 92       	st	X+, r0
  9e:	a2 17       	cp	r26, r18
  a0:	b3 07       	cpc	r27, r19
  a2:	d9 f7       	brne	.-10     	; 0x9a <__do_copy_data+0x20>
  a4:	fe 01       	movw	r30, r28
  a6:	04 c0       	rjmp	.+8      	; 0xb0 <__do_clear_bss+0x8>

000000a8 <__do_clear_bss>:
  a8:	1d 92       	st	X+, r1
  aa:	a2 17       	cp	r26, r18
  ac:	b3 07       	cpc	r27, r19
  ae:	e1 f7       	brne	.-8      	; 0xa8 <__do_clear_bss>
  b0:	ed 36       	cpi	r30, 0x6D	; 109
  b2:	f4 07       	cpc	r31, r20
  b4:	31 f7       	brne	.-52     	; 0x82 <__do_copy_data+0x8>
  b6:	0e 94 8a 00 	call	0x114	; 0x114 <main>
  ba:	0c 94 d3 01 	jmp	0x3a6	; 0x3a6 <exit>

000000be <_exit>:
  be:	f8 94       	cli

000000c0 <__stop_program>:
  c0:	ff cf       	rjmp	.-2      	; 0xc0 <__stop_program>

Disassembly of section .text:

000003d8 <__bad_interrupt>:
 3d8:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.__vector_13:

000002fa <__vector_13>:
	if (serialWritePos >= TX_BUFFER_SIZE) {
		serialWritePos = 0;   // wrap-around
	}
}

ISR(TIMER1_OVF_vect) {
 2fa:	1f 92       	push	r1
 2fc:	0f 92       	push	r0
 2fe:	0f b6       	in	r0, 0x3f	; 63
 300:	0f 92       	push	r0
 302:	11 24       	eor	r1, r1
 304:	8f 93       	push	r24
	TCNT1H = (uint8_t)(precarger >> 8);
 306:	87 e2       	ldi	r24, 0x27	; 39
 308:	80 93 85 00 	sts	0x0085, r24	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
	TCNT1L = (uint8_t)(precarger);
 30c:	80 e1       	ldi	r24, 0x10	; 16
 30e:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	CONTADOR ++;
 312:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <CONTADOR>
 316:	8f 5f       	subi	r24, 0xFF	; 255
 318:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <CONTADOR>
}
 31c:	8f 91       	pop	r24
 31e:	0f 90       	pop	r0
 320:	0f be       	out	0x3f, r0	; 63
 322:	0f 90       	pop	r0
 324:	1f 90       	pop	r1
 326:	18 95       	reti

Disassembly of section .text.serialWrite:

0000019a <serialWrite>:
{
	serialBuffer[serialWritePos] = c;
	serialWritePos++;

	if (serialWritePos >= TX_BUFFER_SIZE) {
		serialWritePos = 0;   // wrap-around
 19a:	cf 92       	push	r12
 19c:	df 92       	push	r13
 19e:	ef 92       	push	r14
 1a0:	0f 93       	push	r16
 1a2:	1f 93       	push	r17
 1a4:	cf 93       	push	r28
 1a6:	6b 01       	movw	r12, r22
 1a8:	e8 2e       	mov	r14, r24
 1aa:	c0 e0       	ldi	r28, 0x00	; 0
 1ac:	1f c0       	rjmp	.+62     	; 0x1ec <serialWrite+0x52>
 1ae:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <serialWritePos>
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	4e 2d       	mov	r20, r14
 1b6:	96 01       	movw	r18, r12
 1b8:	2c 0f       	add	r18, r28
 1ba:	31 1d       	adc	r19, r1
 1bc:	41 1d       	adc	r20, r1
 1be:	f9 01       	movw	r30, r18
 1c0:	24 91       	lpm	r18, Z
 1c2:	47 fd       	sbrc	r20, 7
 1c4:	20 81       	ld	r18, Z
 1c6:	fc 01       	movw	r30, r24
 1c8:	e0 58       	subi	r30, 0x80	; 128
 1ca:	fe 4f       	sbci	r31, 0xFE	; 254
 1cc:	20 83       	st	Z, r18
 1ce:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <serialWritePos>
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	01 96       	adiw	r24, 0x01	; 1
 1d6:	8f 77       	andi	r24, 0x7F	; 127
 1d8:	90 78       	andi	r25, 0x80	; 128
 1da:	99 23       	and	r25, r25
 1dc:	24 f4       	brge	.+8      	; 0x1e6 <serialWrite+0x4c>
 1de:	01 97       	sbiw	r24, 0x01	; 1
 1e0:	80 68       	ori	r24, 0x80	; 128
 1e2:	9f 6f       	ori	r25, 0xFF	; 255
 1e4:	01 96       	adiw	r24, 0x01	; 1
 1e6:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <serialWritePos>
 1ea:	cf 5f       	subi	r28, 0xFF	; 255
 1ec:	0c 2f       	mov	r16, r28
 1ee:	10 e0       	ldi	r17, 0x00	; 0
 1f0:	8e 2d       	mov	r24, r14
 1f2:	b6 01       	movw	r22, r12
 1f4:	0e 94 aa 01 	call	0x354	; 0x354 <strlen>
 1f8:	99 27       	eor	r25, r25
 1fa:	08 17       	cp	r16, r24
 1fc:	19 07       	cpc	r17, r25
 1fe:	bc f2       	brlt	.-82     	; 0x1ae <serialWrite+0x14>
 200:	e1 ec       	ldi	r30, 0xC1	; 193
 202:	f0 e0       	ldi	r31, 0x00	; 0
 204:	80 81       	ld	r24, Z
 206:	80 62       	ori	r24, 0x20	; 32
 208:	80 83       	st	Z, r24
 20a:	cf 91       	pop	r28
 20c:	1f 91       	pop	r17
 20e:	0f 91       	pop	r16
 210:	ef 90       	pop	r14
 212:	df 90       	pop	r13
 214:	cf 90       	pop	r12
 216:	08 95       	ret

Disassembly of section .text.__vector_19:

00000218 <__vector_19>:
 218:	1f 92       	push	r1
 21a:	0f 92       	push	r0
 21c:	0f b6       	in	r0, 0x3f	; 63
 21e:	0f 92       	push	r0
 220:	11 24       	eor	r1, r1
 222:	8f 93       	push	r24
 224:	9f 93       	push	r25
 226:	ef 93       	push	r30
 228:	ff 93       	push	r31
 22a:	90 91 04 02 	lds	r25, 0x0204	; 0x800204 <serialReadPos>
 22e:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <serialWritePos>
 232:	98 17       	cp	r25, r24
 234:	b9 f0       	breq	.+46     	; 0x264 <__vector_19+0x4c>
 236:	e0 91 04 02 	lds	r30, 0x0204	; 0x800204 <serialReadPos>
 23a:	f0 e0       	ldi	r31, 0x00	; 0
 23c:	e0 58       	subi	r30, 0x80	; 128
 23e:	fe 4f       	sbci	r31, 0xFE	; 254
 240:	80 81       	ld	r24, Z
 242:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 246:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <serialReadPos>
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	01 96       	adiw	r24, 0x01	; 1
 24e:	8f 77       	andi	r24, 0x7F	; 127
 250:	90 78       	andi	r25, 0x80	; 128
 252:	99 23       	and	r25, r25
 254:	24 f4       	brge	.+8      	; 0x25e <__vector_19+0x46>
 256:	01 97       	sbiw	r24, 0x01	; 1
 258:	80 68       	ori	r24, 0x80	; 128
 25a:	9f 6f       	ori	r25, 0xFF	; 255
 25c:	01 96       	adiw	r24, 0x01	; 1
 25e:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <serialReadPos>
 262:	05 c0       	rjmp	.+10     	; 0x26e <__vector_19+0x56>
 264:	e1 ec       	ldi	r30, 0xC1	; 193
 266:	f0 e0       	ldi	r31, 0x00	; 0
 268:	80 81       	ld	r24, Z
 26a:	8f 7d       	andi	r24, 0xDF	; 223
 26c:	80 83       	st	Z, r24
 26e:	ff 91       	pop	r31
 270:	ef 91       	pop	r30
 272:	9f 91       	pop	r25
 274:	8f 91       	pop	r24
 276:	0f 90       	pop	r0
 278:	0f be       	out	0x3f, r0	; 63
 27a:	0f 90       	pop	r0
 27c:	1f 90       	pop	r1
 27e:	18 95       	reti

Disassembly of section .text.Chardos:

000002c6 <Chardos>:
 2c6:	90 91 02 02 	lds	r25, 0x0202	; 0x800202 <rxReadPos>
 2ca:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <rxWritePos>
 2ce:	98 17       	cp	r25, r24
 2d0:	91 f0       	breq	.+36     	; 0x2f6 <Chardos+0x30>
 2d2:	e0 91 02 02 	lds	r30, 0x0202	; 0x800202 <rxReadPos>
 2d6:	f0 e0       	ldi	r31, 0x00	; 0
 2d8:	e0 50       	subi	r30, 0x00	; 0
 2da:	ff 4f       	sbci	r31, 0xFF	; 255
 2dc:	80 81       	ld	r24, Z
 2de:	90 91 02 02 	lds	r25, 0x0202	; 0x800202 <rxReadPos>
 2e2:	9f 5f       	subi	r25, 0xFF	; 255
 2e4:	90 93 02 02 	sts	0x0202, r25	; 0x800202 <rxReadPos>
 2e8:	90 91 02 02 	lds	r25, 0x0202	; 0x800202 <rxReadPos>
 2ec:	99 23       	and	r25, r25
 2ee:	24 f4       	brge	.+8      	; 0x2f8 <Chardos+0x32>
 2f0:	10 92 02 02 	sts	0x0202, r1	; 0x800202 <rxReadPos>
 2f4:	08 95       	ret
 2f6:	80 e0       	ldi	r24, 0x00	; 0
 2f8:	08 95       	ret

Disassembly of section .text.__vector_18:

00000280 <__vector_18>:
 280:	1f 92       	push	r1
 282:	0f 92       	push	r0
 284:	0f b6       	in	r0, 0x3f	; 63
 286:	0f 92       	push	r0
 288:	11 24       	eor	r1, r1
 28a:	8f 93       	push	r24
 28c:	ef 93       	push	r30
 28e:	ff 93       	push	r31
 290:	e0 91 01 02 	lds	r30, 0x0201	; 0x800201 <rxWritePos>
 294:	f0 e0       	ldi	r31, 0x00	; 0
 296:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 29a:	e0 50       	subi	r30, 0x00	; 0
 29c:	ff 4f       	sbci	r31, 0xFF	; 255
 29e:	80 83       	st	Z, r24
 2a0:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <rxWritePos>
 2a4:	8f 5f       	subi	r24, 0xFF	; 255
 2a6:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <rxWritePos>
 2aa:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <rxWritePos>
 2ae:	88 23       	and	r24, r24
 2b0:	14 f4       	brge	.+4      	; 0x2b6 <__vector_18+0x36>
 2b2:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <rxWritePos>
 2b6:	ff 91       	pop	r31
 2b8:	ef 91       	pop	r30
 2ba:	8f 91       	pop	r24
 2bc:	0f 90       	pop	r0
 2be:	0f be       	out	0x3f, r0	; 63
 2c0:	0f 90       	pop	r0
 2c2:	1f 90       	pop	r1
 2c4:	18 95       	reti

Disassembly of section .text.apagar:

00000380 <apagar>:
	}
}


void apagar(void){
	cbi(PORTD, 4);
 380:	8b b1       	in	r24, 0x0b	; 11
 382:	8f 7e       	andi	r24, 0xEF	; 239
 384:	8b b9       	out	0x0b, r24	; 11
	cbi(PORTD, 4);
 386:	8b b1       	in	r24, 0x0b	; 11
 388:	8f 7e       	andi	r24, 0xEF	; 239
 38a:	8b b9       	out	0x0b, r24	; 11
	cbi(PORTD, 4);
 38c:	8b b1       	in	r24, 0x0b	; 11
 38e:	8f 7e       	andi	r24, 0xEF	; 239
 390:	8b b9       	out	0x0b, r24	; 11
	cbi(PORTD, 4);
 392:	8b b1       	in	r24, 0x0b	; 11
 394:	8f 7e       	andi	r24, 0xEF	; 239
 396:	8b b9       	out	0x0b, r24	; 11
	cbi(PORTD, 4);
 398:	8b b1       	in	r24, 0x0b	; 11
 39a:	8f 7e       	andi	r24, 0xEF	; 239
 39c:	8b b9       	out	0x0b, r24	; 11
	sbi(PORTD, 4);
 39e:	8b b1       	in	r24, 0x0b	; 11
 3a0:	80 61       	ori	r24, 0x10	; 16
 3a2:	8b b9       	out	0x0b, r24	; 11
 3a4:	08 95       	ret

Disassembly of section .text.Subir:

000003bc <Subir>:
}

void Subir(void)
{
	cbi(PORTD, 4);   
 3bc:	8b b1       	in	r24, 0x0b	; 11
 3be:	8f 7e       	andi	r24, 0xEF	; 239
 3c0:	8b b9       	out	0x0b, r24	; 11
	sbi(PORTD, 5);
 3c2:	8b b1       	in	r24, 0x0b	; 11
 3c4:	80 62       	ori	r24, 0x20	; 32
 3c6:	8b b9       	out	0x0b, r24	; 11
 3c8:	08 95       	ret

Disassembly of section .text.Bajar:

000003ca <Bajar>:
}

void Bajar(void)
{
	cbi(PORTD, 5);   
 3ca:	8b b1       	in	r24, 0x0b	; 11
 3cc:	8f 7d       	andi	r24, 0xDF	; 223
 3ce:	8b b9       	out	0x0b, r24	; 11
	sbi(PORTD, 4);
 3d0:	8b b1       	in	r24, 0x0b	; 11
 3d2:	80 61       	ori	r24, 0x10	; 16
 3d4:	8b b9       	out	0x0b, r24	; 11
 3d6:	08 95       	ret

Disassembly of section .text.centrar:

00000328 <centrar>:
}



void centrar(void){
	CONTADOR = 0;
 328:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <CONTADOR>
	while(CONTADOR < 2){
 32c:	07 c0       	rjmp	.+14     	; 0x33c <centrar+0x14>
		Bajar();
 32e:	0e 94 e5 01 	call	0x3ca	; 0x3ca <Bajar>
		serialWrite("Bajando \n");
 332:	62 ec       	ldi	r22, 0xC2	; 194
 334:	70 e0       	ldi	r23, 0x00	; 0
 336:	80 e0       	ldi	r24, 0x00	; 0
 338:	0e 94 cd 00 	call	0x19a	; 0x19a <serialWrite>



void centrar(void){
	CONTADOR = 0;
	while(CONTADOR < 2){
 33c:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <CONTADOR>
 340:	82 30       	cpi	r24, 0x02	; 2
 342:	a8 f3       	brcs	.-22     	; 0x32e <centrar+0x6>
		Bajar();
		serialWrite("Bajando \n");
	}
		apagar();
 344:	0e 94 c0 01 	call	0x380	; 0x380 <apagar>
		serialWrite("Apagado \n");
 348:	6c ec       	ldi	r22, 0xCC	; 204
 34a:	70 e0       	ldi	r23, 0x00	; 0
 34c:	80 e0       	ldi	r24, 0x00	; 0
 34e:	0e 94 cd 00 	call	0x19a	; 0x19a <serialWrite>
 352:	08 95       	ret

Disassembly of section .text.main:

00000114 <main>:
{
	serialBuffer[serialWritePos] = c;
	serialWritePos++;

	if (serialWritePos >= TX_BUFFER_SIZE) {
		serialWritePos = 0;   // wrap-around
 114:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 118:	87 e6       	ldi	r24, 0x67	; 103
 11a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 11e:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
 122:	e1 e8       	ldi	r30, 0x81	; 129
 124:	f0 e0       	ldi	r31, 0x00	; 0
 126:	80 81       	ld	r24, Z
 128:	85 60       	ori	r24, 0x05	; 5
 12a:	80 83       	st	Z, r24
 12c:	ee e6       	ldi	r30, 0x6E	; 110
 12e:	f0 e0       	ldi	r31, 0x00	; 0
 130:	80 81       	ld	r24, Z
 132:	81 60       	ori	r24, 0x01	; 1
 134:	80 83       	st	Z, r24
 136:	88 e9       	ldi	r24, 0x98	; 152
 138:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 13c:	86 e0       	ldi	r24, 0x06	; 6
 13e:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 142:	78 94       	sei
 144:	84 b1       	in	r24, 0x04	; 4
 146:	81 60       	ori	r24, 0x01	; 1
 148:	84 b9       	out	0x04, r24	; 4
 14a:	8e ef       	ldi	r24, 0xFE	; 254
 14c:	8a b9       	out	0x0a, r24	; 10
 14e:	66 ed       	ldi	r22, 0xD6	; 214
 150:	70 e0       	ldi	r23, 0x00	; 0
 152:	80 e0       	ldi	r24, 0x00	; 0
 154:	0e 94 cd 00 	call	0x19a	; 0x19a <serialWrite>
 158:	68 ef       	ldi	r22, 0xF8	; 248
 15a:	70 e0       	ldi	r23, 0x00	; 0
 15c:	80 e0       	ldi	r24, 0x00	; 0
 15e:	0e 94 cd 00 	call	0x19a	; 0x19a <serialWrite>
 162:	81 ee       	ldi	r24, 0xE1	; 225
 164:	94 e0       	ldi	r25, 0x04	; 4
 166:	01 97       	sbiw	r24, 0x01	; 1
 168:	f1 f7       	brne	.-4      	; 0x166 <main+0x52>
 16a:	00 c0       	rjmp	.+0      	; 0x16c <main+0x58>
 16c:	00 00       	nop
 16e:	0e 94 63 01 	call	0x2c6	; 0x2c6 <Chardos>
 172:	81 33       	cpi	r24, 0x31	; 49
 174:	41 f4       	brne	.+16     	; 0x186 <main+0x72>
 176:	67 e0       	ldi	r22, 0x07	; 7
 178:	71 e0       	ldi	r23, 0x01	; 1
 17a:	80 e0       	ldi	r24, 0x00	; 0
 17c:	0e 94 cd 00 	call	0x19a	; 0x19a <serialWrite>
 180:	0e 94 94 01 	call	0x328	; 0x328 <centrar>
 184:	f4 cf       	rjmp	.-24     	; 0x16e <main+0x5a>
 186:	80 33       	cpi	r24, 0x30	; 48
 188:	19 f4       	brne	.+6      	; 0x190 <main+0x7c>
 18a:	0e 94 c0 01 	call	0x380	; 0x380 <apagar>
 18e:	ef cf       	rjmp	.-34     	; 0x16e <main+0x5a>
 190:	82 33       	cpi	r24, 0x32	; 50
 192:	69 f7       	brne	.-38     	; 0x16e <main+0x5a>
 194:	0e 94 de 01 	call	0x3bc	; 0x3bc <Subir>
 198:	ea cf       	rjmp	.-44     	; 0x16e <main+0x5a>

Disassembly of section .text.__dummy_fini:

000003e0 <_fini>:
 3e0:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

000003e2 <__funcs_on_exit>:
 3e2:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

000003e4 <__simulator_exit>:
 3e4:	08 95       	ret

Disassembly of section .text.exit:

000003a6 <exit>:
 3a6:	ec 01       	movw	r28, r24
 3a8:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <__funcs_on_exit>
 3ac:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <_fini>
 3b0:	ce 01       	movw	r24, r28
 3b2:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__simulator_exit>
 3b6:	ce 01       	movw	r24, r28
 3b8:	0e 94 ee 01 	call	0x3dc	; 0x3dc <_Exit>

Disassembly of section .text.strlen:

00000354 <strlen>:
 354:	cf 92       	push	r12
 356:	df 92       	push	r13
 358:	ef 92       	push	r14
 35a:	6b 01       	movw	r12, r22
 35c:	e8 2e       	mov	r14, r24
 35e:	a8 2f       	mov	r26, r24
 360:	cb 01       	movw	r24, r22
 362:	fc 01       	movw	r30, r24
 364:	24 91       	lpm	r18, Z
 366:	a7 fd       	sbrc	r26, 7
 368:	20 81       	ld	r18, Z
 36a:	22 23       	and	r18, r18
 36c:	19 f0       	breq	.+6      	; 0x374 <strlen+0x20>
 36e:	01 96       	adiw	r24, 0x01	; 1
 370:	a1 1d       	adc	r26, r1
 372:	f7 cf       	rjmp	.-18     	; 0x362 <strlen+0xe>
 374:	8c 19       	sub	r24, r12
 376:	9d 09       	sbc	r25, r13
 378:	ef 90       	pop	r14
 37a:	df 90       	pop	r13
 37c:	cf 90       	pop	r12
 37e:	08 95       	ret

Disassembly of section .text._Exit:

000003dc <_Exit>:
 3dc:	0e 94 5f 00 	call	0xbe	; 0xbe <_exit>
