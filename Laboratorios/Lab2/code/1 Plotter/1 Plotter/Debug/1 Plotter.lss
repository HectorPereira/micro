
1 Plotter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000042e  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000c2  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000100  00800100  00800100  0000042e  2**0
                  ALLOC
  3 .comment      0000002f  00000000  00000000  0000042e  2**0
                  CONTENTS, READONLY
  4 .stack.descriptors.hdr 0000000e  00000000  00000000  0000045d  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  0000046b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ca9  00000000  00000000  000004d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007be  00000000  00000000  0000117c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000420  00000000  00000000  0000193a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000011c  00000000  00000000  00001d5c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000020f  00000000  00000000  00001e78  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000246  00000000  00000000  00002087  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  000022cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .text         00000004  0000036c  0000036c  00000420  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002328  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .text.appendSerial 0000001e  00000338  00000338  000003ec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.serialWrite 0000005a  00000192  00000192  00000246  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.__vector_20 0000004a  000001ec  000001ec  000002a0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.Chardos 00000034  000002b6  000002b6  0000036a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.__vector_18 00000046  00000236  00000236  000002ea  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.__vector_13 00000022  00000316  00000316  000003ca  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.Centrar 0000003a  0000027c  0000027c  00000330  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .progmemx.data 0000004b  000000c2  000000c2  00000176  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 23 .text.main    00000084  0000010e  0000010e  000001c2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .bss.serialWritePos 00000001  00800200  00800200  0000042e  2**0
                  ALLOC
 25 .bss.serialReadPos 00000001  00800201  00800201  0000042e  2**0
                  ALLOC
 26 .bss.CONTADOR 00000001  00800202  00800202  0000042e  2**0
                  ALLOC
 27 .bss.rxWritePos 00000001  00800203  00800203  0000042e  2**0
                  ALLOC
 28 .bss.rxReadPos 00000001  00800204  00800204  0000042e  2**0
                  ALLOC
 29 .text.__dummy_fini 00000002  00000374  00000374  00000428  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.__dummy_funcs_on_exit 00000002  00000376  00000376  0000042a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.__dummy_simulator_exit 00000002  00000378  00000378  0000042c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text.exit    00000016  00000356  00000356  0000040a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .text.strlen  0000002c  000002ea  000002ea  0000039e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .text._Exit   00000004  00000370  00000370  00000424  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 37 00 	jmp	0x6e	; 0x6e <__ctors_end>
   4:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
   8:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
   c:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
  10:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
  14:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
  18:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
  1c:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
  20:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
  24:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
  28:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
  2c:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
  30:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
  34:	0c 94 8b 01 	jmp	0x316	; 0x316 <__vector_13>
  38:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
  3c:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
  40:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
  44:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
  48:	0c 94 1b 01 	jmp	0x236	; 0x236 <__vector_18>
  4c:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
  50:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__vector_20>
  54:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
  58:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
  5c:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
  60:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>
  64:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__bad_interrupt>

00000068 <.dinit>:
  68:	01 00       	.word	0x0001	; ????
  6a:	02 05       	cpc	r16, r2
  6c:	80 00       	.word	0x0080	; ????

0000006e <__ctors_end>:
  6e:	11 24       	eor	r1, r1
  70:	1f be       	out	0x3f, r1	; 63
  72:	cf ef       	ldi	r28, 0xFF	; 255
  74:	d8 e0       	ldi	r29, 0x08	; 8
  76:	de bf       	out	0x3e, r29	; 62
  78:	cd bf       	out	0x3d, r28	; 61

0000007a <__do_copy_data>:
  7a:	e8 e6       	ldi	r30, 0x68	; 104
  7c:	f0 e0       	ldi	r31, 0x00	; 0
  7e:	40 e0       	ldi	r20, 0x00	; 0
  80:	17 c0       	rjmp	.+46     	; 0xb0 <__do_clear_bss+0x8>
  82:	b5 91       	lpm	r27, Z+
  84:	a5 91       	lpm	r26, Z+
  86:	35 91       	lpm	r19, Z+
  88:	25 91       	lpm	r18, Z+
  8a:	05 91       	lpm	r16, Z+
  8c:	07 fd       	sbrc	r16, 7
  8e:	0c c0       	rjmp	.+24     	; 0xa8 <__do_clear_bss>
  90:	95 91       	lpm	r25, Z+
  92:	85 91       	lpm	r24, Z+
  94:	ef 01       	movw	r28, r30
  96:	f9 2f       	mov	r31, r25
  98:	e8 2f       	mov	r30, r24
  9a:	05 90       	lpm	r0, Z+
  9c:	0d 92       	st	X+, r0
  9e:	a2 17       	cp	r26, r18
  a0:	b3 07       	cpc	r27, r19
  a2:	d9 f7       	brne	.-10     	; 0x9a <__do_copy_data+0x20>
  a4:	fe 01       	movw	r30, r28
  a6:	04 c0       	rjmp	.+8      	; 0xb0 <__do_clear_bss+0x8>

000000a8 <__do_clear_bss>:
  a8:	1d 92       	st	X+, r1
  aa:	a2 17       	cp	r26, r18
  ac:	b3 07       	cpc	r27, r19
  ae:	e1 f7       	brne	.-8      	; 0xa8 <__do_clear_bss>
  b0:	ed 36       	cpi	r30, 0x6D	; 109
  b2:	f4 07       	cpc	r31, r20
  b4:	31 f7       	brne	.-52     	; 0x82 <__do_copy_data+0x8>
  b6:	0e 94 87 00 	call	0x10e	; 0x10e <main>
  ba:	0c 94 ab 01 	jmp	0x356	; 0x356 <exit>

000000be <_exit>:
  be:	f8 94       	cli

000000c0 <__stop_program>:
  c0:	ff cf       	rjmp	.-2      	; 0xc0 <__stop_program>

Disassembly of section .text:

0000036c <__bad_interrupt>:
 36c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

Disassembly of section .text.appendSerial:

00000338 <appendSerial>:
}


void appendSerial(char c)
{
	serialBuffer[serialWritePos] = c;
 338:	90 91 00 02 	lds	r25, 0x0200	; 0x800200 <_end>
 33c:	e9 2f       	mov	r30, r25
 33e:	f0 e0       	ldi	r31, 0x00	; 0
 340:	e0 58       	subi	r30, 0x80	; 128
 342:	fe 4f       	sbci	r31, 0xFE	; 254
 344:	80 83       	st	Z, r24
	serialWritePos++;
 346:	9f 5f       	subi	r25, 0xFF	; 255
 348:	90 93 00 02 	sts	0x0200, r25	; 0x800200 <_end>

	if (serialWritePos >= TX_BUFFER_SIZE) {
 34c:	99 23       	and	r25, r25
 34e:	14 f4       	brge	.+4      	; 0x354 <appendSerial+0x1c>
		serialWritePos = 0;
 350:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <_end>
 354:	08 95       	ret

Disassembly of section .text.serialWrite:

00000192 <serialWrite>:
	{
		ret = rxBuffer[rxReadPos];
	}

	return ret;
}
 192:	cf 92       	push	r12
 194:	df 92       	push	r13
 196:	ef 92       	push	r14
 198:	0f 93       	push	r16
 19a:	1f 93       	push	r17
 19c:	cf 93       	push	r28
 19e:	6b 01       	movw	r12, r22
 1a0:	e8 2e       	mov	r14, r24
 1a2:	c0 e0       	ldi	r28, 0x00	; 0
 1a4:	0e c0       	rjmp	.+28     	; 0x1c2 <serialWrite+0x30>
 1a6:	ae 2d       	mov	r26, r14
 1a8:	c6 01       	movw	r24, r12
 1aa:	80 0f       	add	r24, r16
 1ac:	91 1f       	adc	r25, r17
 1ae:	a1 1d       	adc	r26, r1
 1b0:	17 fd       	sbrc	r17, 7
 1b2:	aa 95       	dec	r26
 1b4:	fc 01       	movw	r30, r24
 1b6:	84 91       	lpm	r24, Z
 1b8:	a7 fd       	sbrc	r26, 7
 1ba:	80 81       	ld	r24, Z
 1bc:	0e 94 9c 01 	call	0x338	; 0x338 <appendSerial>
 1c0:	cf 5f       	subi	r28, 0xFF	; 255
 1c2:	0c 2f       	mov	r16, r28
 1c4:	10 e0       	ldi	r17, 0x00	; 0
 1c6:	8e 2d       	mov	r24, r14
 1c8:	b6 01       	movw	r22, r12
 1ca:	0e 94 75 01 	call	0x2ea	; 0x2ea <strlen>
 1ce:	08 17       	cp	r16, r24
 1d0:	19 07       	cpc	r17, r25
 1d2:	48 f3       	brcs	.-46     	; 0x1a6 <serialWrite+0x14>
 1d4:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 1d8:	85 fd       	sbrc	r24, 5
 1da:	10 92 c6 00 	sts	0x00C6, r1	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 1de:	cf 91       	pop	r28
 1e0:	1f 91       	pop	r17
 1e2:	0f 91       	pop	r16
 1e4:	ef 90       	pop	r14
 1e6:	df 90       	pop	r13
 1e8:	cf 90       	pop	r12
 1ea:	08 95       	ret

Disassembly of section .text.__vector_20:

000001ec <__vector_20>:
 1ec:	1f 92       	push	r1
 1ee:	0f 92       	push	r0
 1f0:	0f b6       	in	r0, 0x3f	; 63
 1f2:	0f 92       	push	r0
 1f4:	11 24       	eor	r1, r1
 1f6:	8f 93       	push	r24
 1f8:	ef 93       	push	r30
 1fa:	ff 93       	push	r31
 1fc:	e0 91 01 02 	lds	r30, 0x0201	; 0x800201 <serialReadPos>
 200:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <_end>
 204:	e8 17       	cp	r30, r24
 206:	79 f0       	breq	.+30     	; 0x226 <__vector_20+0x3a>
 208:	f0 e0       	ldi	r31, 0x00	; 0
 20a:	e0 58       	subi	r30, 0x80	; 128
 20c:	fe 4f       	sbci	r31, 0xFE	; 254
 20e:	80 81       	ld	r24, Z
 210:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 214:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <serialReadPos>
 218:	8f 5f       	subi	r24, 0xFF	; 255
 21a:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <serialReadPos>
 21e:	88 23       	and	r24, r24
 220:	14 f4       	brge	.+4      	; 0x226 <__vector_20+0x3a>
 222:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <serialReadPos>
 226:	ff 91       	pop	r31
 228:	ef 91       	pop	r30
 22a:	8f 91       	pop	r24
 22c:	0f 90       	pop	r0
 22e:	0f be       	out	0x3f, r0	; 63
 230:	0f 90       	pop	r0
 232:	1f 90       	pop	r1
 234:	18 95       	reti

Disassembly of section .text.Chardos:

000002b6 <Chardos>:

char Chardos(void)
{
	char ret = '\0';

	if (rxReadPos != rxWritePos)
 2b6:	90 91 04 02 	lds	r25, 0x0204	; 0x800204 <rxReadPos>
 2ba:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <rxWritePos>
 2be:	98 17       	cp	r25, r24
 2c0:	91 f0       	breq	.+36     	; 0x2e6 <Chardos+0x30>
	{
		ret = rxBuffer[rxReadPos];
 2c2:	e0 91 04 02 	lds	r30, 0x0204	; 0x800204 <rxReadPos>
 2c6:	f0 e0       	ldi	r31, 0x00	; 0
 2c8:	e0 50       	subi	r30, 0x00	; 0
 2ca:	ff 4f       	sbci	r31, 0xFF	; 255
 2cc:	80 81       	ld	r24, Z

		rxReadPos++;
 2ce:	90 91 04 02 	lds	r25, 0x0204	; 0x800204 <rxReadPos>
 2d2:	9f 5f       	subi	r25, 0xFF	; 255
 2d4:	90 93 04 02 	sts	0x0204, r25	; 0x800204 <rxReadPos>

		if (rxReadPos >= RX_BUFFER_SIZE)
 2d8:	90 91 04 02 	lds	r25, 0x0204	; 0x800204 <rxReadPos>
 2dc:	99 23       	and	r25, r25
 2de:	24 f4       	brge	.+8      	; 0x2e8 <Chardos+0x32>
		{
			rxReadPos = 0;
 2e0:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <rxReadPos>
 2e4:	08 95       	ret
	return ret;
}

char Chardos(void)
{
	char ret = '\0';
 2e6:	80 e0       	ldi	r24, 0x00	; 0
			rxReadPos = 0;
		}
	}

	return ret;
}
 2e8:	08 95       	ret

Disassembly of section .text.__vector_18:

00000236 <__vector_18>:
	{
		ret = rxBuffer[rxReadPos];
	}

	return ret;
}
 236:	1f 92       	push	r1
 238:	0f 92       	push	r0
 23a:	0f b6       	in	r0, 0x3f	; 63
 23c:	0f 92       	push	r0
 23e:	11 24       	eor	r1, r1
 240:	8f 93       	push	r24
 242:	ef 93       	push	r30
 244:	ff 93       	push	r31
 246:	e0 91 03 02 	lds	r30, 0x0203	; 0x800203 <rxWritePos>
 24a:	f0 e0       	ldi	r31, 0x00	; 0
 24c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 250:	e0 50       	subi	r30, 0x00	; 0
 252:	ff 4f       	sbci	r31, 0xFF	; 255
 254:	80 83       	st	Z, r24
 256:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <rxWritePos>
 25a:	8f 5f       	subi	r24, 0xFF	; 255
 25c:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <rxWritePos>
 260:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <rxWritePos>
 264:	88 23       	and	r24, r24
 266:	14 f4       	brge	.+4      	; 0x26c <__vector_18+0x36>
 268:	10 92 03 02 	sts	0x0203, r1	; 0x800203 <rxWritePos>
 26c:	ff 91       	pop	r31
 26e:	ef 91       	pop	r30
 270:	8f 91       	pop	r24
 272:	0f 90       	pop	r0
 274:	0f be       	out	0x3f, r0	; 63
 276:	0f 90       	pop	r0
 278:	1f 90       	pop	r1
 27a:	18 95       	reti

Disassembly of section .text.__vector_13:

00000316 <__vector_13>:
	{
		rxWritePos = 0;
	}
}

ISR(TIMER1_OVF_vect){
 316:	1f 92       	push	r1
 318:	0f 92       	push	r0
 31a:	0f b6       	in	r0, 0x3f	; 63
 31c:	0f 92       	push	r0
 31e:	11 24       	eor	r1, r1
 320:	8f 93       	push	r24
	CONTADOR += 1;
 322:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <CONTADOR>
 326:	8f 5f       	subi	r24, 0xFF	; 255
 328:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <CONTADOR>
}
 32c:	8f 91       	pop	r24
 32e:	0f 90       	pop	r0
 330:	0f be       	out	0x3f, r0	; 63
 332:	0f 90       	pop	r0
 334:	1f 90       	pop	r1
 336:	18 95       	reti

Disassembly of section .text.Centrar:

0000027c <Centrar>:
	{
		ret = rxBuffer[rxReadPos];
	}

	return ret;
}
 27c:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <CONTADOR>
 280:	82 30       	cpi	r24, 0x02	; 2
 282:	20 f4       	brcc	.+8      	; 0x28c <Centrar+0x10>
 284:	8b b1       	in	r24, 0x0b	; 11
 286:	80 61       	ori	r24, 0x10	; 16
 288:	8b b9       	out	0x0b, r24	; 11
 28a:	08 95       	ret
 28c:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <CONTADOR>
 290:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <CONTADOR>
 294:	91 e0       	ldi	r25, 0x01	; 1
 296:	83 30       	cpi	r24, 0x03	; 3
 298:	08 f4       	brcc	.+2      	; 0x29c <Centrar+0x20>
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	81 e0       	ldi	r24, 0x01	; 1
 29e:	22 30       	cpi	r18, 0x02	; 2
 2a0:	08 f0       	brcs	.+2      	; 0x2a4 <Centrar+0x28>
 2a2:	80 e0       	ldi	r24, 0x00	; 0
 2a4:	89 23       	and	r24, r25
 2a6:	31 f0       	breq	.+12     	; 0x2b4 <Centrar+0x38>
 2a8:	8b b1       	in	r24, 0x0b	; 11
 2aa:	8f 7e       	andi	r24, 0xEF	; 239
 2ac:	8b b9       	out	0x0b, r24	; 11
 2ae:	8b b1       	in	r24, 0x0b	; 11
 2b0:	80 62       	ori	r24, 0x20	; 32
 2b2:	8b b9       	out	0x0b, r24	; 11
 2b4:	08 95       	ret

Disassembly of section .text.main:

0000010e <main>:
 10e:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 112:	87 e6       	ldi	r24, 0x67	; 103
 114:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 118:	14 bc       	out	0x24, r1	; 36
 11a:	85 b5       	in	r24, 0x25	; 37
 11c:	85 60       	ori	r24, 0x05	; 5
 11e:	85 bd       	out	0x25, r24	; 37
 120:	ee e6       	ldi	r30, 0x6E	; 110
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	80 81       	ld	r24, Z
 126:	81 60       	ori	r24, 0x01	; 1
 128:	80 83       	st	Z, r24
 12a:	88 ed       	ldi	r24, 0xD8	; 216
 12c:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 130:	86 e0       	ldi	r24, 0x06	; 6
 132:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 136:	78 94       	sei
 138:	84 b1       	in	r24, 0x04	; 4
 13a:	81 60       	ori	r24, 0x01	; 1
 13c:	84 b9       	out	0x04, r24	; 4
 13e:	8a b1       	in	r24, 0x0a	; 10
 140:	8c 6f       	ori	r24, 0xFC	; 252
 142:	8a b9       	out	0x0a, r24	; 10
 144:	62 ec       	ldi	r22, 0xC2	; 194
 146:	70 e0       	ldi	r23, 0x00	; 0
 148:	80 e0       	ldi	r24, 0x00	; 0
 14a:	0e 94 c9 00 	call	0x192	; 0x192 <serialWrite>
 14e:	64 ee       	ldi	r22, 0xE4	; 228
 150:	70 e0       	ldi	r23, 0x00	; 0
 152:	80 e0       	ldi	r24, 0x00	; 0
 154:	0e 94 c9 00 	call	0x192	; 0x192 <serialWrite>
 158:	61 ef       	ldi	r22, 0xF1	; 241
 15a:	70 e0       	ldi	r23, 0x00	; 0
 15c:	80 e0       	ldi	r24, 0x00	; 0
 15e:	0e 94 c9 00 	call	0x192	; 0x192 <serialWrite>
 162:	6f ef       	ldi	r22, 0xFF	; 255
 164:	70 e0       	ldi	r23, 0x00	; 0
 166:	80 e0       	ldi	r24, 0x00	; 0
 168:	0e 94 c9 00 	call	0x192	; 0x192 <serialWrite>
 16c:	81 ee       	ldi	r24, 0xE1	; 225
 16e:	94 e0       	ldi	r25, 0x04	; 4
 170:	01 97       	sbiw	r24, 0x01	; 1
 172:	f1 f7       	brne	.-4      	; 0x170 <main+0x62>
 174:	00 c0       	rjmp	.+0      	; 0x176 <main+0x68>
 176:	00 00       	nop
 178:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <Chardos>
 17c:	82 33       	cpi	r24, 0x32	; 50
 17e:	19 f4       	brne	.+6      	; 0x186 <main+0x78>
 180:	0e 94 3e 01 	call	0x27c	; 0x27c <Centrar>
 184:	f9 cf       	rjmp	.-14     	; 0x178 <main+0x6a>
 186:	80 33       	cpi	r24, 0x30	; 48
 188:	b9 f7       	brne	.-18     	; 0x178 <main+0x6a>
 18a:	8b b1       	in	r24, 0x0b	; 11
 18c:	8f 7e       	andi	r24, 0xEF	; 239
 18e:	8b b9       	out	0x0b, r24	; 11
 190:	f3 cf       	rjmp	.-26     	; 0x178 <main+0x6a>

Disassembly of section .text.__dummy_fini:

00000374 <_fini>:
 374:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

00000376 <__funcs_on_exit>:
 376:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

00000378 <__simulator_exit>:
 378:	08 95       	ret

Disassembly of section .text.exit:

00000356 <exit>:
 356:	ec 01       	movw	r28, r24
 358:	0e 94 bb 01 	call	0x376	; 0x376 <__funcs_on_exit>
 35c:	0e 94 ba 01 	call	0x374	; 0x374 <_fini>
 360:	ce 01       	movw	r24, r28
 362:	0e 94 bc 01 	call	0x378	; 0x378 <__simulator_exit>
 366:	ce 01       	movw	r24, r28
 368:	0e 94 b8 01 	call	0x370	; 0x370 <_Exit>

Disassembly of section .text.strlen:

000002ea <strlen>:
 2ea:	cf 92       	push	r12
 2ec:	df 92       	push	r13
 2ee:	ef 92       	push	r14
 2f0:	6b 01       	movw	r12, r22
 2f2:	e8 2e       	mov	r14, r24
 2f4:	a8 2f       	mov	r26, r24
 2f6:	cb 01       	movw	r24, r22
 2f8:	fc 01       	movw	r30, r24
 2fa:	24 91       	lpm	r18, Z
 2fc:	a7 fd       	sbrc	r26, 7
 2fe:	20 81       	ld	r18, Z
 300:	22 23       	and	r18, r18
 302:	19 f0       	breq	.+6      	; 0x30a <strlen+0x20>
 304:	01 96       	adiw	r24, 0x01	; 1
 306:	a1 1d       	adc	r26, r1
 308:	f7 cf       	rjmp	.-18     	; 0x2f8 <strlen+0xe>
 30a:	8c 19       	sub	r24, r12
 30c:	9d 09       	sbc	r25, r13
 30e:	ef 90       	pop	r14
 310:	df 90       	pop	r13
 312:	cf 90       	pop	r12
 314:	08 95       	ret

Disassembly of section .text._Exit:

00000370 <_Exit>:
 370:	0e 94 5f 00 	call	0xbe	; 0xbe <_exit>
