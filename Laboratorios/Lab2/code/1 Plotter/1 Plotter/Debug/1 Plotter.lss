
1 Plotter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000003a4  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000c2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000100  00800100  00800100  000003a4  2**0
                  ALLOC
  3 .comment      0000002f  00000000  00000000  000003a4  2**0
                  CONTENTS, READONLY
  4 .stack.descriptors.hdr 0000000e  00000000  00000000  000003d3  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  000003e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c4b  00000000  00000000  00000431  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007a6  00000000  00000000  0000107c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003ab  00000000  00000000  00001822  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000dc  00000000  00000000  00001bd0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000020f  00000000  00000000  00001cac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000020a  00000000  00000000  00001ebb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  000020c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .text         00000004  00000302  00000302  00000396  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002108  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .text.appendSerial 0000001e  000002ce  000002ce  00000362  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.serialWrite 0000005a  00000184  00000184  00000218  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.__vector_20 0000004a  000001de  000001de  00000272  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.Chardos 00000034  0000026e  0000026e  00000302  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .progmemx.data 00000050  000000c2  000000c2  00000156  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 20 .text.main    00000072  00000112  00000112  000001a6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.__vector_18 00000046  00000228  00000228  000002bc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .bss.serialWritePos 00000001  00800200  00800200  000003a4  2**0
                  ALLOC
 23 .bss.serialReadPos 00000001  00800201  00800201  000003a4  2**0
                  ALLOC
 24 .bss.rxWritePos 00000001  00800202  00800202  000003a4  2**0
                  ALLOC
 25 .bss.rxReadPos 00000001  00800203  00800203  000003a4  2**0
                  ALLOC
 26 .text.__dummy_fini 00000002  0000030a  0000030a  0000039e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.__dummy_funcs_on_exit 00000002  0000030c  0000030c  000003a0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.__dummy_simulator_exit 00000002  0000030e  0000030e  000003a2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.exit    00000016  000002ec  000002ec  00000380  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.strlen  0000002c  000002a2  000002a2  00000336  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text._Exit   00000004  00000306  00000306  0000039a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 37 00 	jmp	0x6e	; 0x6e <__ctors_end>
   4:	0c 94 81 01 	jmp	0x302	; 0x302 <__bad_interrupt>
   8:	0c 94 81 01 	jmp	0x302	; 0x302 <__bad_interrupt>
   c:	0c 94 81 01 	jmp	0x302	; 0x302 <__bad_interrupt>
  10:	0c 94 81 01 	jmp	0x302	; 0x302 <__bad_interrupt>
  14:	0c 94 81 01 	jmp	0x302	; 0x302 <__bad_interrupt>
  18:	0c 94 81 01 	jmp	0x302	; 0x302 <__bad_interrupt>
  1c:	0c 94 81 01 	jmp	0x302	; 0x302 <__bad_interrupt>
  20:	0c 94 81 01 	jmp	0x302	; 0x302 <__bad_interrupt>
  24:	0c 94 81 01 	jmp	0x302	; 0x302 <__bad_interrupt>
  28:	0c 94 81 01 	jmp	0x302	; 0x302 <__bad_interrupt>
  2c:	0c 94 81 01 	jmp	0x302	; 0x302 <__bad_interrupt>
  30:	0c 94 81 01 	jmp	0x302	; 0x302 <__bad_interrupt>
  34:	0c 94 81 01 	jmp	0x302	; 0x302 <__bad_interrupt>
  38:	0c 94 81 01 	jmp	0x302	; 0x302 <__bad_interrupt>
  3c:	0c 94 81 01 	jmp	0x302	; 0x302 <__bad_interrupt>
  40:	0c 94 81 01 	jmp	0x302	; 0x302 <__bad_interrupt>
  44:	0c 94 81 01 	jmp	0x302	; 0x302 <__bad_interrupt>
  48:	0c 94 14 01 	jmp	0x228	; 0x228 <__vector_18>
  4c:	0c 94 81 01 	jmp	0x302	; 0x302 <__bad_interrupt>
  50:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__vector_20>
  54:	0c 94 81 01 	jmp	0x302	; 0x302 <__bad_interrupt>
  58:	0c 94 81 01 	jmp	0x302	; 0x302 <__bad_interrupt>
  5c:	0c 94 81 01 	jmp	0x302	; 0x302 <__bad_interrupt>
  60:	0c 94 81 01 	jmp	0x302	; 0x302 <__bad_interrupt>
  64:	0c 94 81 01 	jmp	0x302	; 0x302 <__bad_interrupt>

00000068 <.dinit>:
  68:	01 00       	.word	0x0001	; ????
  6a:	02 04       	cpc	r0, r2
  6c:	80 00       	.word	0x0080	; ????

0000006e <__ctors_end>:
  6e:	11 24       	eor	r1, r1
  70:	1f be       	out	0x3f, r1	; 63
  72:	cf ef       	ldi	r28, 0xFF	; 255
  74:	d8 e0       	ldi	r29, 0x08	; 8
  76:	de bf       	out	0x3e, r29	; 62
  78:	cd bf       	out	0x3d, r28	; 61

0000007a <__do_copy_data>:
  7a:	e8 e6       	ldi	r30, 0x68	; 104
  7c:	f0 e0       	ldi	r31, 0x00	; 0
  7e:	40 e0       	ldi	r20, 0x00	; 0
  80:	17 c0       	rjmp	.+46     	; 0xb0 <__do_clear_bss+0x8>
  82:	b5 91       	lpm	r27, Z+
  84:	a5 91       	lpm	r26, Z+
  86:	35 91       	lpm	r19, Z+
  88:	25 91       	lpm	r18, Z+
  8a:	05 91       	lpm	r16, Z+
  8c:	07 fd       	sbrc	r16, 7
  8e:	0c c0       	rjmp	.+24     	; 0xa8 <__do_clear_bss>
  90:	95 91       	lpm	r25, Z+
  92:	85 91       	lpm	r24, Z+
  94:	ef 01       	movw	r28, r30
  96:	f9 2f       	mov	r31, r25
  98:	e8 2f       	mov	r30, r24
  9a:	05 90       	lpm	r0, Z+
  9c:	0d 92       	st	X+, r0
  9e:	a2 17       	cp	r26, r18
  a0:	b3 07       	cpc	r27, r19
  a2:	d9 f7       	brne	.-10     	; 0x9a <__do_copy_data+0x20>
  a4:	fe 01       	movw	r30, r28
  a6:	04 c0       	rjmp	.+8      	; 0xb0 <__do_clear_bss+0x8>

000000a8 <__do_clear_bss>:
  a8:	1d 92       	st	X+, r1
  aa:	a2 17       	cp	r26, r18
  ac:	b3 07       	cpc	r27, r19
  ae:	e1 f7       	brne	.-8      	; 0xa8 <__do_clear_bss>
  b0:	ed 36       	cpi	r30, 0x6D	; 109
  b2:	f4 07       	cpc	r31, r20
  b4:	31 f7       	brne	.-52     	; 0x82 <__do_copy_data+0x8>
  b6:	0e 94 89 00 	call	0x112	; 0x112 <main>
  ba:	0c 94 76 01 	jmp	0x2ec	; 0x2ec <exit>

000000be <_exit>:
  be:	f8 94       	cli

000000c0 <__stop_program>:
  c0:	ff cf       	rjmp	.-2      	; 0xc0 <__stop_program>

Disassembly of section .text:

00000302 <__bad_interrupt>:
 302:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.appendSerial:

000002ce <appendSerial>:
}


void appendSerial(char c)
{
	serialBuffer[serialWritePos] = c;
 2ce:	90 91 00 02 	lds	r25, 0x0200	; 0x800200 <_end>
 2d2:	e9 2f       	mov	r30, r25
 2d4:	f0 e0       	ldi	r31, 0x00	; 0
 2d6:	e0 58       	subi	r30, 0x80	; 128
 2d8:	fe 4f       	sbci	r31, 0xFE	; 254
 2da:	80 83       	st	Z, r24
	serialWritePos++;
 2dc:	9f 5f       	subi	r25, 0xFF	; 255
 2de:	90 93 00 02 	sts	0x0200, r25	; 0x800200 <_end>

	if (serialWritePos >= TX_BUFFER_SIZE) {
 2e2:	99 23       	and	r25, r25
 2e4:	14 f4       	brge	.+4      	; 0x2ea <appendSerial+0x1c>
		serialWritePos = 0;
 2e6:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <_end>
 2ea:	08 95       	ret

Disassembly of section .text.serialWrite:

00000184 <serialWrite>:
	{
		ret = rxBuffer[rxReadPos];
	}

	return ret;
}
 184:	cf 92       	push	r12
 186:	df 92       	push	r13
 188:	ef 92       	push	r14
 18a:	0f 93       	push	r16
 18c:	1f 93       	push	r17
 18e:	cf 93       	push	r28
 190:	6b 01       	movw	r12, r22
 192:	e8 2e       	mov	r14, r24
 194:	c0 e0       	ldi	r28, 0x00	; 0
 196:	0e c0       	rjmp	.+28     	; 0x1b4 <serialWrite+0x30>
 198:	ae 2d       	mov	r26, r14
 19a:	c6 01       	movw	r24, r12
 19c:	80 0f       	add	r24, r16
 19e:	91 1f       	adc	r25, r17
 1a0:	a1 1d       	adc	r26, r1
 1a2:	17 fd       	sbrc	r17, 7
 1a4:	aa 95       	dec	r26
 1a6:	fc 01       	movw	r30, r24
 1a8:	84 91       	lpm	r24, Z
 1aa:	a7 fd       	sbrc	r26, 7
 1ac:	80 81       	ld	r24, Z
 1ae:	0e 94 67 01 	call	0x2ce	; 0x2ce <appendSerial>
 1b2:	cf 5f       	subi	r28, 0xFF	; 255
 1b4:	0c 2f       	mov	r16, r28
 1b6:	10 e0       	ldi	r17, 0x00	; 0
 1b8:	8e 2d       	mov	r24, r14
 1ba:	b6 01       	movw	r22, r12
 1bc:	0e 94 51 01 	call	0x2a2	; 0x2a2 <strlen>
 1c0:	08 17       	cp	r16, r24
 1c2:	19 07       	cpc	r17, r25
 1c4:	48 f3       	brcs	.-46     	; 0x198 <serialWrite+0x14>
 1c6:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 1ca:	85 fd       	sbrc	r24, 5
 1cc:	10 92 c6 00 	sts	0x00C6, r1	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 1d0:	cf 91       	pop	r28
 1d2:	1f 91       	pop	r17
 1d4:	0f 91       	pop	r16
 1d6:	ef 90       	pop	r14
 1d8:	df 90       	pop	r13
 1da:	cf 90       	pop	r12
 1dc:	08 95       	ret

Disassembly of section .text.__vector_20:

000001de <__vector_20>:
 1de:	1f 92       	push	r1
 1e0:	0f 92       	push	r0
 1e2:	0f b6       	in	r0, 0x3f	; 63
 1e4:	0f 92       	push	r0
 1e6:	11 24       	eor	r1, r1
 1e8:	8f 93       	push	r24
 1ea:	ef 93       	push	r30
 1ec:	ff 93       	push	r31
 1ee:	e0 91 01 02 	lds	r30, 0x0201	; 0x800201 <serialReadPos>
 1f2:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <_end>
 1f6:	e8 17       	cp	r30, r24
 1f8:	79 f0       	breq	.+30     	; 0x218 <__vector_20+0x3a>
 1fa:	f0 e0       	ldi	r31, 0x00	; 0
 1fc:	e0 58       	subi	r30, 0x80	; 128
 1fe:	fe 4f       	sbci	r31, 0xFE	; 254
 200:	80 81       	ld	r24, Z
 202:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 206:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <serialReadPos>
 20a:	8f 5f       	subi	r24, 0xFF	; 255
 20c:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <serialReadPos>
 210:	88 23       	and	r24, r24
 212:	14 f4       	brge	.+4      	; 0x218 <__vector_20+0x3a>
 214:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <serialReadPos>
 218:	ff 91       	pop	r31
 21a:	ef 91       	pop	r30
 21c:	8f 91       	pop	r24
 21e:	0f 90       	pop	r0
 220:	0f be       	out	0x3f, r0	; 63
 222:	0f 90       	pop	r0
 224:	1f 90       	pop	r1
 226:	18 95       	reti

Disassembly of section .text.Chardos:

0000026e <Chardos>:

char Chardos(void)
{
	char ret = '\0';

	if (rxReadPos != rxWritePos)
 26e:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <rxReadPos>
 272:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <rxWritePos>
 276:	98 17       	cp	r25, r24
 278:	91 f0       	breq	.+36     	; 0x29e <Chardos+0x30>
	{
		ret = rxBuffer[rxReadPos];
 27a:	e0 91 03 02 	lds	r30, 0x0203	; 0x800203 <rxReadPos>
 27e:	f0 e0       	ldi	r31, 0x00	; 0
 280:	e0 50       	subi	r30, 0x00	; 0
 282:	ff 4f       	sbci	r31, 0xFF	; 255
 284:	80 81       	ld	r24, Z

		rxReadPos++;
 286:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <rxReadPos>
 28a:	9f 5f       	subi	r25, 0xFF	; 255
 28c:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <rxReadPos>

		if (rxReadPos >= RX_BUFFER_SIZE)
 290:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <rxReadPos>
 294:	99 23       	and	r25, r25
 296:	24 f4       	brge	.+8      	; 0x2a0 <Chardos+0x32>
		{
			rxReadPos = 0;
 298:	10 92 03 02 	sts	0x0203, r1	; 0x800203 <rxReadPos>
 29c:	08 95       	ret



char Chardos(void)
{
	char ret = '\0';
 29e:	80 e0       	ldi	r24, 0x00	; 0
			rxReadPos = 0;
		}
	}

	return ret;
}
 2a0:	08 95       	ret

Disassembly of section .text.main:

00000112 <main>:
	{
		ret = rxBuffer[rxReadPos];
	}

	return ret;
}
 112:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 116:	87 e6       	ldi	r24, 0x67	; 103
 118:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 11c:	88 ed       	ldi	r24, 0xD8	; 216
 11e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 122:	86 e0       	ldi	r24, 0x06	; 6
 124:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 128:	78 94       	sei
 12a:	84 b1       	in	r24, 0x04	; 4
 12c:	81 60       	ori	r24, 0x01	; 1
 12e:	84 b9       	out	0x04, r24	; 4
 130:	62 ec       	ldi	r22, 0xC2	; 194
 132:	70 e0       	ldi	r23, 0x00	; 0
 134:	80 e0       	ldi	r24, 0x00	; 0
 136:	0e 94 c2 00 	call	0x184	; 0x184 <serialWrite>
 13a:	64 ee       	ldi	r22, 0xE4	; 228
 13c:	70 e0       	ldi	r23, 0x00	; 0
 13e:	80 e0       	ldi	r24, 0x00	; 0
 140:	0e 94 c2 00 	call	0x184	; 0x184 <serialWrite>
 144:	61 ef       	ldi	r22, 0xF1	; 241
 146:	70 e0       	ldi	r23, 0x00	; 0
 148:	80 e0       	ldi	r24, 0x00	; 0
 14a:	0e 94 c2 00 	call	0x184	; 0x184 <serialWrite>
 14e:	6f ef       	ldi	r22, 0xFF	; 255
 150:	70 e0       	ldi	r23, 0x00	; 0
 152:	80 e0       	ldi	r24, 0x00	; 0
 154:	0e 94 c2 00 	call	0x184	; 0x184 <serialWrite>
 158:	81 ee       	ldi	r24, 0xE1	; 225
 15a:	94 e0       	ldi	r25, 0x04	; 4
 15c:	01 97       	sbiw	r24, 0x01	; 1
 15e:	f1 f7       	brne	.-4      	; 0x15c <main+0x4a>
 160:	00 c0       	rjmp	.+0      	; 0x162 <main+0x50>
 162:	00 00       	nop
 164:	0e 94 37 01 	call	0x26e	; 0x26e <Chardos>
 168:	81 33       	cpi	r24, 0x31	; 49
 16a:	31 f4       	brne	.+12     	; 0x178 <main+0x66>
 16c:	6d e0       	ldi	r22, 0x0D	; 13
 16e:	71 e0       	ldi	r23, 0x01	; 1
 170:	80 e0       	ldi	r24, 0x00	; 0
 172:	0e 94 c2 00 	call	0x184	; 0x184 <serialWrite>
 176:	f6 cf       	rjmp	.-20     	; 0x164 <main+0x52>
 178:	80 33       	cpi	r24, 0x30	; 48
 17a:	a1 f7       	brne	.-24     	; 0x164 <main+0x52>
 17c:	85 b1       	in	r24, 0x05	; 5
 17e:	8e 7f       	andi	r24, 0xFE	; 254
 180:	85 b9       	out	0x05, r24	; 5
 182:	f0 cf       	rjmp	.-32     	; 0x164 <main+0x52>

Disassembly of section .text.__vector_18:

00000228 <__vector_18>:
 228:	1f 92       	push	r1
 22a:	0f 92       	push	r0
 22c:	0f b6       	in	r0, 0x3f	; 63
 22e:	0f 92       	push	r0
 230:	11 24       	eor	r1, r1
 232:	8f 93       	push	r24
 234:	ef 93       	push	r30
 236:	ff 93       	push	r31
 238:	e0 91 02 02 	lds	r30, 0x0202	; 0x800202 <rxWritePos>
 23c:	f0 e0       	ldi	r31, 0x00	; 0
 23e:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 242:	e0 50       	subi	r30, 0x00	; 0
 244:	ff 4f       	sbci	r31, 0xFF	; 255
 246:	80 83       	st	Z, r24
 248:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <rxWritePos>
 24c:	8f 5f       	subi	r24, 0xFF	; 255
 24e:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <rxWritePos>
 252:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <rxWritePos>
 256:	88 23       	and	r24, r24
 258:	14 f4       	brge	.+4      	; 0x25e <__vector_18+0x36>
 25a:	10 92 02 02 	sts	0x0202, r1	; 0x800202 <rxWritePos>
 25e:	ff 91       	pop	r31
 260:	ef 91       	pop	r30
 262:	8f 91       	pop	r24
 264:	0f 90       	pop	r0
 266:	0f be       	out	0x3f, r0	; 63
 268:	0f 90       	pop	r0
 26a:	1f 90       	pop	r1
 26c:	18 95       	reti

Disassembly of section .text.__dummy_fini:

0000030a <_fini>:
 30a:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

0000030c <__funcs_on_exit>:
 30c:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

0000030e <__simulator_exit>:
 30e:	08 95       	ret

Disassembly of section .text.exit:

000002ec <exit>:
 2ec:	ec 01       	movw	r28, r24
 2ee:	0e 94 86 01 	call	0x30c	; 0x30c <__funcs_on_exit>
 2f2:	0e 94 85 01 	call	0x30a	; 0x30a <_fini>
 2f6:	ce 01       	movw	r24, r28
 2f8:	0e 94 87 01 	call	0x30e	; 0x30e <__simulator_exit>
 2fc:	ce 01       	movw	r24, r28
 2fe:	0e 94 83 01 	call	0x306	; 0x306 <_Exit>

Disassembly of section .text.strlen:

000002a2 <strlen>:
 2a2:	cf 92       	push	r12
 2a4:	df 92       	push	r13
 2a6:	ef 92       	push	r14
 2a8:	6b 01       	movw	r12, r22
 2aa:	e8 2e       	mov	r14, r24
 2ac:	a8 2f       	mov	r26, r24
 2ae:	cb 01       	movw	r24, r22
 2b0:	fc 01       	movw	r30, r24
 2b2:	24 91       	lpm	r18, Z
 2b4:	a7 fd       	sbrc	r26, 7
 2b6:	20 81       	ld	r18, Z
 2b8:	22 23       	and	r18, r18
 2ba:	19 f0       	breq	.+6      	; 0x2c2 <strlen+0x20>
 2bc:	01 96       	adiw	r24, 0x01	; 1
 2be:	a1 1d       	adc	r26, r1
 2c0:	f7 cf       	rjmp	.-18     	; 0x2b0 <strlen+0xe>
 2c2:	8c 19       	sub	r24, r12
 2c4:	9d 09       	sbc	r25, r13
 2c6:	ef 90       	pop	r14
 2c8:	df 90       	pop	r13
 2ca:	cf 90       	pop	r12
 2cc:	08 95       	ret

Disassembly of section .text._Exit:

00000306 <_Exit>:
 306:	0e 94 5f 00 	call	0xbe	; 0xbe <_exit>
