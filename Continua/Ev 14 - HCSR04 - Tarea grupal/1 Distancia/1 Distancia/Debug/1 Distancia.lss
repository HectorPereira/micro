
1 Distancia.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000003fc  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000c2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  000003fc  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000002a  00000000  00000000  0000042b  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  00000455  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c90  00000000  00000000  0000048d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000781  00000000  00000000  0000111d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003ce  00000000  00000000  0000189e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000098  00000000  00000000  00001c6c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000022e  00000000  00000000  00001d04  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002d9  00000000  00000000  00001f32  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  0000220b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  0000035a  0000035a  000003ee  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002234  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.hcsr04_read_cm_blocking 000000ae  000000c2  000000c2  00000156  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.__vector_10 0000007e  00000212  00000212  000002a6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.__vector_13 00000052  00000290  00000290  00000324  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.main    000000a2  00000170  00000170  00000204  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .bss.ovf_count 00000004  00800100  00800100  000003fc  2**0
                  ALLOC
 19 .bss.done_flag 00000001  00800108  00800108  000003fc  2**0
                  ALLOC
 20 .bss.capturing 00000001  00800109  00800109  000003fc  2**0
                  ALLOC
 21 .bss.icr_end  00000002  00800104  00800104  000003fc  2**0
                  ALLOC
 22 .bss.icr_start 00000002  00800106  00800106  000003fc  2**0
                  ALLOC
 23 .text.libgcc.div 00000044  000002e2  000002e2  00000376  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.libgcc.mul 0000001e  00000326  00000326  000003ba  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.__dummy_fini 00000002  00000362  00000362  000003f6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.__dummy_funcs_on_exit 00000002  00000364  00000364  000003f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.__dummy_simulator_exit 00000002  00000366  00000366  000003fa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.exit    00000016  00000344  00000344  000003d8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text._Exit   00000004  0000035e  0000035e  000003f2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 37 00 	jmp	0x6e	; 0x6e <__ctors_end>
   4:	0c 94 ad 01 	jmp	0x35a	; 0x35a <__bad_interrupt>
   8:	0c 94 ad 01 	jmp	0x35a	; 0x35a <__bad_interrupt>
   c:	0c 94 ad 01 	jmp	0x35a	; 0x35a <__bad_interrupt>
  10:	0c 94 ad 01 	jmp	0x35a	; 0x35a <__bad_interrupt>
  14:	0c 94 ad 01 	jmp	0x35a	; 0x35a <__bad_interrupt>
  18:	0c 94 ad 01 	jmp	0x35a	; 0x35a <__bad_interrupt>
  1c:	0c 94 ad 01 	jmp	0x35a	; 0x35a <__bad_interrupt>
  20:	0c 94 ad 01 	jmp	0x35a	; 0x35a <__bad_interrupt>
  24:	0c 94 ad 01 	jmp	0x35a	; 0x35a <__bad_interrupt>
  28:	0c 94 09 01 	jmp	0x212	; 0x212 <__vector_10>
  2c:	0c 94 ad 01 	jmp	0x35a	; 0x35a <__bad_interrupt>
  30:	0c 94 ad 01 	jmp	0x35a	; 0x35a <__bad_interrupt>
  34:	0c 94 48 01 	jmp	0x290	; 0x290 <__vector_13>
  38:	0c 94 ad 01 	jmp	0x35a	; 0x35a <__bad_interrupt>
  3c:	0c 94 ad 01 	jmp	0x35a	; 0x35a <__bad_interrupt>
  40:	0c 94 ad 01 	jmp	0x35a	; 0x35a <__bad_interrupt>
  44:	0c 94 ad 01 	jmp	0x35a	; 0x35a <__bad_interrupt>
  48:	0c 94 ad 01 	jmp	0x35a	; 0x35a <__bad_interrupt>
  4c:	0c 94 ad 01 	jmp	0x35a	; 0x35a <__bad_interrupt>
  50:	0c 94 ad 01 	jmp	0x35a	; 0x35a <__bad_interrupt>
  54:	0c 94 ad 01 	jmp	0x35a	; 0x35a <__bad_interrupt>
  58:	0c 94 ad 01 	jmp	0x35a	; 0x35a <__bad_interrupt>
  5c:	0c 94 ad 01 	jmp	0x35a	; 0x35a <__bad_interrupt>
  60:	0c 94 ad 01 	jmp	0x35a	; 0x35a <__bad_interrupt>
  64:	0c 94 ad 01 	jmp	0x35a	; 0x35a <__bad_interrupt>

00000068 <.dinit>:
  68:	01 00       	.word	0x0001	; ????
  6a:	01 0a       	sbc	r0, r17
  6c:	80 00       	.word	0x0080	; ????

0000006e <__ctors_end>:
  6e:	11 24       	eor	r1, r1
  70:	1f be       	out	0x3f, r1	; 63
  72:	cf ef       	ldi	r28, 0xFF	; 255
  74:	d8 e0       	ldi	r29, 0x08	; 8
  76:	de bf       	out	0x3e, r29	; 62
  78:	cd bf       	out	0x3d, r28	; 61

0000007a <__do_copy_data>:
  7a:	e8 e6       	ldi	r30, 0x68	; 104
  7c:	f0 e0       	ldi	r31, 0x00	; 0
  7e:	40 e0       	ldi	r20, 0x00	; 0
  80:	17 c0       	rjmp	.+46     	; 0xb0 <__do_clear_bss+0x8>
  82:	b5 91       	lpm	r27, Z+
  84:	a5 91       	lpm	r26, Z+
  86:	35 91       	lpm	r19, Z+
  88:	25 91       	lpm	r18, Z+
  8a:	05 91       	lpm	r16, Z+
  8c:	07 fd       	sbrc	r16, 7
  8e:	0c c0       	rjmp	.+24     	; 0xa8 <__do_clear_bss>
  90:	95 91       	lpm	r25, Z+
  92:	85 91       	lpm	r24, Z+
  94:	ef 01       	movw	r28, r30
  96:	f9 2f       	mov	r31, r25
  98:	e8 2f       	mov	r30, r24
  9a:	05 90       	lpm	r0, Z+
  9c:	0d 92       	st	X+, r0
  9e:	a2 17       	cp	r26, r18
  a0:	b3 07       	cpc	r27, r19
  a2:	d9 f7       	brne	.-10     	; 0x9a <__do_copy_data+0x20>
  a4:	fe 01       	movw	r30, r28
  a6:	04 c0       	rjmp	.+8      	; 0xb0 <__do_clear_bss+0x8>

000000a8 <__do_clear_bss>:
  a8:	1d 92       	st	X+, r1
  aa:	a2 17       	cp	r26, r18
  ac:	b3 07       	cpc	r27, r19
  ae:	e1 f7       	brne	.-8      	; 0xa8 <__do_clear_bss>
  b0:	ed 36       	cpi	r30, 0x6D	; 109
  b2:	f4 07       	cpc	r31, r20
  b4:	31 f7       	brne	.-52     	; 0x82 <__do_copy_data+0x8>
  b6:	0e 94 b8 00 	call	0x170	; 0x170 <main>
  ba:	0c 94 a2 01 	jmp	0x344	; 0x344 <exit>

000000be <_exit>:
  be:	f8 94       	cli

000000c0 <__stop_program>:
  c0:	ff cf       	rjmp	.-2      	; 0xc0 <__stop_program>

Disassembly of section .text:

0000035a <__bad_interrupt>:
 35a:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.hcsr04_read_cm_blocking:

000000c2 <hcsr04_read_cm_blocking>:
}

/* Blocking read: returns distance in cm, or 0xFFFF on timeout */
static uint16_t hcsr04_read_cm_blocking(void)
{
	done_flag = 0;
  c2:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <done_flag>
	capturing = 0;
  c6:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <capturing>
	TCCR1B |= (1 << ICES1);        // rising first
  ca:	e1 e8       	ldi	r30, 0x81	; 129
  cc:	f0 e0       	ldi	r31, 0x00	; 0
  ce:	80 81       	ld	r24, Z
  d0:	80 64       	ori	r24, 0x40	; 64
  d2:	80 83       	st	Z, r24
	TIFR1 = (1 << ICF1) | (1 << TOV1);
  d4:	81 e2       	ldi	r24, 0x21	; 33
  d6:	86 bb       	out	0x16, r24	; 22
}

/* ------------- HC-SR04 helpers ------------- */
static inline void hcsr04_trigger_10us(void)
{
	TRIG_PORT |= (1 << TRIG_PIN);
  d8:	85 b1       	in	r24, 0x05	; 5
  da:	82 60       	ori	r24, 0x02	; 2
  dc:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  de:	80 e4       	ldi	r24, 0x40	; 64
  e0:	8a 95       	dec	r24
  e2:	f1 f7       	brne	.-4      	; 0xe0 <hcsr04_read_cm_blocking+0x1e>
	_delay_us(12);
	TRIG_PORT &= ~(1 << TRIG_PIN);
  e4:	85 b1       	in	r24, 0x05	; 5
  e6:	8d 7f       	andi	r24, 0xFD	; 253
  e8:	85 b9       	out	0x05, r24	; 5
	TIFR1 = (1 << ICF1) | (1 << TOV1);

	hcsr04_trigger_10us();

	// ~40 ms timeout window
	uint16_t wait_us = 40000;
  ea:	80 e4       	ldi	r24, 0x40	; 64
  ec:	9c e9       	ldi	r25, 0x9C	; 156
	while (!done_flag && wait_us--) _delay_us(1);
  ee:	05 c0       	rjmp	.+10     	; 0xfa <hcsr04_read_cm_blocking+0x38>
  f0:	85 e0       	ldi	r24, 0x05	; 5
  f2:	8a 95       	dec	r24
  f4:	f1 f7       	brne	.-4      	; 0xf2 <hcsr04_read_cm_blocking+0x30>
  f6:	00 00       	nop
  f8:	c9 01       	movw	r24, r18
  fa:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <done_flag>
  fe:	21 11       	cpse	r18, r1
 100:	05 c0       	rjmp	.+10     	; 0x10c <hcsr04_read_cm_blocking+0x4a>
 102:	9c 01       	movw	r18, r24
 104:	21 50       	subi	r18, 0x01	; 1
 106:	31 09       	sbc	r19, r1
 108:	89 2b       	or	r24, r25
 10a:	91 f7       	brne	.-28     	; 0xf0 <hcsr04_read_cm_blocking+0x2e>
	if (!done_flag) return 0xFFFF;
 10c:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <done_flag>
 110:	88 23       	and	r24, r24
 112:	59 f1       	breq	.+86     	; 0x16a <hcsr04_read_cm_blocking+0xa8>

	// ticks = (end - start) + 65536*overflows
	uint32_t ticks = (uint32_t)ovf_count * 65536UL + (uint16_t)(icr_end - icr_start);
 114:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 118:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 11c:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 120:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 124:	dc 01       	movw	r26, r24
 126:	99 27       	eor	r25, r25
 128:	88 27       	eor	r24, r24
 12a:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <icr_end>
 12e:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <icr_end+0x1>
 132:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <icr_start>
 136:	50 91 07 01 	lds	r21, 0x0107	; 0x800107 <icr_start+0x1>
 13a:	24 1b       	sub	r18, r20
 13c:	35 0b       	sbc	r19, r21
 13e:	82 0f       	add	r24, r18
 140:	93 1f       	adc	r25, r19
 142:	a1 1d       	adc	r26, r1
 144:	b1 1d       	adc	r27, r1

	// 0.5 us per tick -> t_us = ticks/2
	uint32_t t_us = ticks >> 1;
 146:	b6 95       	lsr	r27
 148:	a7 95       	ror	r26
 14a:	97 95       	ror	r25
 14c:	87 95       	ror	r24

	// distance_cm ? t_us / 58 (rounded)
	return (uint16_t)((t_us + 29U) / 58U);
 14e:	bc 01       	movw	r22, r24
 150:	cd 01       	movw	r24, r26
 152:	63 5e       	subi	r22, 0xE3	; 227
 154:	7f 4f       	sbci	r23, 0xFF	; 255
 156:	8f 4f       	sbci	r24, 0xFF	; 255
 158:	9f 4f       	sbci	r25, 0xFF	; 255
 15a:	2a e3       	ldi	r18, 0x3A	; 58
 15c:	30 e0       	ldi	r19, 0x00	; 0
 15e:	40 e0       	ldi	r20, 0x00	; 0
 160:	50 e0       	ldi	r21, 0x00	; 0
 162:	0e 94 71 01 	call	0x2e2	; 0x2e2 <__udivmodsi4>
 166:	c9 01       	movw	r24, r18
 168:	08 95       	ret
	hcsr04_trigger_10us();

	// ~40 ms timeout window
	uint16_t wait_us = 40000;
	while (!done_flag && wait_us--) _delay_us(1);
	if (!done_flag) return 0xFFFF;
 16a:	8f ef       	ldi	r24, 0xFF	; 255
 16c:	9f ef       	ldi	r25, 0xFF	; 255
	// 0.5 us per tick -> t_us = ticks/2
	uint32_t t_us = ticks >> 1;

	// distance_cm ? t_us / 58 (rounded)
	return (uint16_t)((t_us + 29U) / 58U);
}
 16e:	08 95       	ret

Disassembly of section .text.__vector_10:

00000212 <__vector_10>:
static volatile uint8_t  done_flag = 0;
static volatile uint32_t ovf_count = 0;

/* ------------- Timer1 / ICP1 ISRs ------------- */
ISR(TIMER1_CAPT_vect)
{
 212:	1f 92       	push	r1
 214:	0f 92       	push	r0
 216:	0f b6       	in	r0, 0x3f	; 63
 218:	0f 92       	push	r0
 21a:	11 24       	eor	r1, r1
 21c:	2f 93       	push	r18
 21e:	8f 93       	push	r24
 220:	9f 93       	push	r25
 222:	ef 93       	push	r30
 224:	ff 93       	push	r31
	uint16_t icr = ICR1;
 226:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
 22a:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>

	if (!capturing) {
 22e:	20 91 09 01 	lds	r18, 0x0109	; 0x800109 <capturing>
 232:	21 11       	cpse	r18, r1
 234:	15 c0       	rjmp	.+42     	; 0x260 <__vector_10+0x4e>
		icr_start = icr;
 236:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <icr_start+0x1>
 23a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <icr_start>
		ovf_count = 0;
 23e:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 242:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 246:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 24a:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
		capturing = 1;
 24e:	81 e0       	ldi	r24, 0x01	; 1
 250:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <capturing>
		TCCR1B &= ~(1 << ICES1);     // next: falling edge
 254:	e1 e8       	ldi	r30, 0x81	; 129
 256:	f0 e0       	ldi	r31, 0x00	; 0
 258:	80 81       	ld	r24, Z
 25a:	8f 7b       	andi	r24, 0xBF	; 191
 25c:	80 83       	st	Z, r24
 25e:	0e c0       	rjmp	.+28     	; 0x27c <__vector_10+0x6a>
		} else {
		icr_end = icr;
 260:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <icr_end+0x1>
 264:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <icr_end>
		capturing = 0;
 268:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <capturing>
		done_flag = 1;
 26c:	81 e0       	ldi	r24, 0x01	; 1
 26e:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <done_flag>
		TCCR1B |= (1 << ICES1);      // re-arm for rising
 272:	e1 e8       	ldi	r30, 0x81	; 129
 274:	f0 e0       	ldi	r31, 0x00	; 0
 276:	80 81       	ld	r24, Z
 278:	80 64       	ori	r24, 0x40	; 64
 27a:	80 83       	st	Z, r24
	}
}
 27c:	ff 91       	pop	r31
 27e:	ef 91       	pop	r30
 280:	9f 91       	pop	r25
 282:	8f 91       	pop	r24
 284:	2f 91       	pop	r18
 286:	0f 90       	pop	r0
 288:	0f be       	out	0x3f, r0	; 63
 28a:	0f 90       	pop	r0
 28c:	1f 90       	pop	r1
 28e:	18 95       	reti

Disassembly of section .text.__vector_13:

00000290 <__vector_13>:

ISR(TIMER1_OVF_vect)
{
 290:	1f 92       	push	r1
 292:	0f 92       	push	r0
 294:	0f b6       	in	r0, 0x3f	; 63
 296:	0f 92       	push	r0
 298:	11 24       	eor	r1, r1
 29a:	8f 93       	push	r24
 29c:	9f 93       	push	r25
 29e:	af 93       	push	r26
 2a0:	bf 93       	push	r27
	if (capturing) ovf_count++;
 2a2:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <capturing>
 2a6:	88 23       	and	r24, r24
 2a8:	99 f0       	breq	.+38     	; 0x2d0 <__vector_13+0x40>
 2aa:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 2ae:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 2b2:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 2b6:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 2ba:	01 96       	adiw	r24, 0x01	; 1
 2bc:	a1 1d       	adc	r26, r1
 2be:	b1 1d       	adc	r27, r1
 2c0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 2c4:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 2c8:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 2cc:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
}
 2d0:	bf 91       	pop	r27
 2d2:	af 91       	pop	r26
 2d4:	9f 91       	pop	r25
 2d6:	8f 91       	pop	r24
 2d8:	0f 90       	pop	r0
 2da:	0f be       	out	0x3f, r0	; 63
 2dc:	0f 90       	pop	r0
 2de:	1f 90       	pop	r1
 2e0:	18 95       	reti

Disassembly of section .text.main:

00000170 <main>:
}

static inline void hcsr04_init(void)
{
	// TRIG as output low
	TRIG_DDR  |=  (1 << TRIG_PIN);
 170:	84 b1       	in	r24, 0x04	; 4
 172:	82 60       	ori	r24, 0x02	; 2
 174:	84 b9       	out	0x04, r24	; 4
	TRIG_PORT &= ~(1 << TRIG_PIN);
 176:	85 b1       	in	r24, 0x05	; 5
 178:	8d 7f       	andi	r24, 0xFD	; 253
 17a:	85 b9       	out	0x05, r24	; 5

	// ECHO (ICP1) as input
	ECHO_DDR  &= ~(1 << ECHO_PIN);
 17c:	84 b1       	in	r24, 0x04	; 4
 17e:	8e 7f       	andi	r24, 0xFE	; 254
 180:	84 b9       	out	0x04, r24	; 4

	// ---- Timer1: input capture timebase ----
	TCCR1A = 0;
 182:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	// ICNC1=1 (noise cancel), ICES1=1 (rising first), CS11=1 (prescaler /8 -> 0.5 us/tick)
	TCCR1B = (1 << ICNC1) | (1 << ICES1) | (1 << CS11);
 186:	82 ec       	ldi	r24, 0xC2	; 194
 188:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	TCCR1C = 0;
 18c:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7f8082>

	// Clear pending flags
	TIFR1 = (1 << ICF1) | (1 << TOV1);
 190:	81 e2       	ldi	r24, 0x21	; 33
 192:	86 bb       	out	0x16, r24	; 22

	// Enable interrupts
	TIMSK1 = (1 << ICIE1) | (1 << TOIE1);
 194:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>

	sei();
 198:	78 94       	sei
}

/* ------------- Timer0 PWM on OC0A (PD6) ------------- */
static inline void pwm_init_timer0_oc0a(void)
{
	LED_DDR |= (1 << LED_PIN);   // PD6 as output
 19a:	8a b1       	in	r24, 0x0a	; 10
 19c:	80 64       	ori	r24, 0x40	; 64
 19e:	8a b9       	out	0x0a, r24	; 10

	// Fast PWM, TOP=0xFF; non-inverting on OC0A
	// COM0A1=1, WGM01=1, WGM00=1
	TCCR0A = (1 << COM0A1) | (1 << WGM01) | (1 << WGM00);
 1a0:	83 e8       	ldi	r24, 0x83	; 131
 1a2:	84 bd       	out	0x24, r24	; 36

	// Prescaler /64 -> ~976 Hz PWM (quiet, flicker-free)
	// CS01=1, CS00=1
	TCCR0B = (1 << CS01) | (1 << CS00);
 1a4:	83 e0       	ldi	r24, 0x03	; 3
 1a6:	85 bd       	out	0x25, r24	; 37

	OCR0A = 0; // start off
 1a8:	17 bc       	out	0x27, r1	; 39
{
	hcsr04_init();
	pwm_init_timer0_oc0a();

	// Optional: simple slew to reduce visible flicker
	uint8_t duty = 0;
 1aa:	c0 e0       	ldi	r28, 0x00	; 0

	for (;;) {
		uint16_t d_cm = hcsr04_read_cm_blocking();
 1ac:	0e 94 61 00 	call	0xc2	; 0xc2 <__data_load_end>
}

/* Map distance [MIN_CM..MAX_CM] -> duty [255..0] (close = bright) */
static inline uint8_t map_cm_to_duty(uint16_t cm)
{
	if (cm == 0xFFFF) return 0;  // no echo -> LED off
 1b0:	8f 3f       	cpi	r24, 0xFF	; 255
 1b2:	2f ef       	ldi	r18, 0xFF	; 255
 1b4:	92 07       	cpc	r25, r18
 1b6:	c9 f0       	breq	.+50     	; 0x1ea <main+0x7a>

	const uint16_t MIN_CM = 5;     // clamp near limit
	const uint16_t MAX_CM = 200;   // far limit

	if (cm <= MIN_CM) return 255;
 1b8:	86 30       	cpi	r24, 0x06	; 6
 1ba:	91 05       	cpc	r25, r1
 1bc:	c0 f0       	brcs	.+48     	; 0x1ee <main+0x7e>
	if (cm >= MAX_CM) return 0;
 1be:	88 3c       	cpi	r24, 0xC8	; 200
 1c0:	91 05       	cpc	r25, r1
 1c2:	b8 f4       	brcc	.+46     	; 0x1f2 <main+0x82>

	uint32_t span = (uint32_t)(MAX_CM - MIN_CM);
	uint32_t val  = (uint32_t)(MAX_CM - cm); // invert so close -> big value
 1c4:	28 ec       	ldi	r18, 0xC8	; 200
 1c6:	30 e0       	ldi	r19, 0x00	; 0
 1c8:	28 1b       	sub	r18, r24
 1ca:	39 0b       	sbc	r19, r25
	uint32_t duty = (val * 255U + (span / 2)) / span; // round
 1cc:	af ef       	ldi	r26, 0xFF	; 255
 1ce:	b0 e0       	ldi	r27, 0x00	; 0
 1d0:	0e 94 93 01 	call	0x326	; 0x326 <__umulhisi3>
 1d4:	6f 59       	subi	r22, 0x9F	; 159
 1d6:	7f 4f       	sbci	r23, 0xFF	; 255
 1d8:	8f 4f       	sbci	r24, 0xFF	; 255
 1da:	9f 4f       	sbci	r25, 0xFF	; 255
 1dc:	23 ec       	ldi	r18, 0xC3	; 195
 1de:	30 e0       	ldi	r19, 0x00	; 0
 1e0:	40 e0       	ldi	r20, 0x00	; 0
 1e2:	50 e0       	ldi	r21, 0x00	; 0
 1e4:	0e 94 71 01 	call	0x2e2	; 0x2e2 <__udivmodsi4>
 1e8:	05 c0       	rjmp	.+10     	; 0x1f4 <main+0x84>
}

/* Map distance [MIN_CM..MAX_CM] -> duty [255..0] (close = bright) */
static inline uint8_t map_cm_to_duty(uint16_t cm)
{
	if (cm == 0xFFFF) return 0;  // no echo -> LED off
 1ea:	20 e0       	ldi	r18, 0x00	; 0
 1ec:	03 c0       	rjmp	.+6      	; 0x1f4 <main+0x84>

	const uint16_t MIN_CM = 5;     // clamp near limit
	const uint16_t MAX_CM = 200;   // far limit

	if (cm <= MIN_CM) return 255;
 1ee:	2f ef       	ldi	r18, 0xFF	; 255
 1f0:	01 c0       	rjmp	.+2      	; 0x1f4 <main+0x84>
	if (cm >= MAX_CM) return 0;
 1f2:	20 e0       	ldi	r18, 0x00	; 0
	for (;;) {
		uint16_t d_cm = hcsr04_read_cm_blocking();
		uint8_t target = map_cm_to_duty(d_cm);

		// Slew 1 step per loop toward target (optional)
		if (duty < target) duty = duty + 5;
 1f4:	c2 17       	cp	r28, r18
 1f6:	10 f4       	brcc	.+4      	; 0x1fc <main+0x8c>
 1f8:	cb 5f       	subi	r28, 0xFB	; 251
 1fa:	03 c0       	rjmp	.+6      	; 0x202 <main+0x92>
		else if (duty > target) duty = duty - 5;
 1fc:	2c 17       	cp	r18, r28
 1fe:	08 f4       	brcc	.+2      	; 0x202 <main+0x92>
 200:	c5 50       	subi	r28, 0x05	; 5

		OCR0A = duty;
 202:	c7 bd       	out	0x27, r28	; 39
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 204:	8f e3       	ldi	r24, 0x3F	; 63
 206:	9c e9       	ldi	r25, 0x9C	; 156
 208:	01 97       	sbiw	r24, 0x01	; 1
 20a:	f1 f7       	brne	.-4      	; 0x208 <main+0x98>
 20c:	00 c0       	rjmp	.+0      	; 0x20e <main+0x9e>
 20e:	00 00       	nop
 210:	cd cf       	rjmp	.-102    	; 0x1ac <main+0x3c>

Disassembly of section .text.libgcc.div:

000002e2 <__udivmodsi4>:
 2e2:	a1 e2       	ldi	r26, 0x21	; 33
 2e4:	1a 2e       	mov	r1, r26
 2e6:	aa 1b       	sub	r26, r26
 2e8:	bb 1b       	sub	r27, r27
 2ea:	fd 01       	movw	r30, r26
 2ec:	0d c0       	rjmp	.+26     	; 0x308 <__udivmodsi4_ep>

000002ee <__udivmodsi4_loop>:
 2ee:	aa 1f       	adc	r26, r26
 2f0:	bb 1f       	adc	r27, r27
 2f2:	ee 1f       	adc	r30, r30
 2f4:	ff 1f       	adc	r31, r31
 2f6:	a2 17       	cp	r26, r18
 2f8:	b3 07       	cpc	r27, r19
 2fa:	e4 07       	cpc	r30, r20
 2fc:	f5 07       	cpc	r31, r21
 2fe:	20 f0       	brcs	.+8      	; 0x308 <__udivmodsi4_ep>
 300:	a2 1b       	sub	r26, r18
 302:	b3 0b       	sbc	r27, r19
 304:	e4 0b       	sbc	r30, r20
 306:	f5 0b       	sbc	r31, r21

00000308 <__udivmodsi4_ep>:
 308:	66 1f       	adc	r22, r22
 30a:	77 1f       	adc	r23, r23
 30c:	88 1f       	adc	r24, r24
 30e:	99 1f       	adc	r25, r25
 310:	1a 94       	dec	r1
 312:	69 f7       	brne	.-38     	; 0x2ee <__udivmodsi4_loop>
 314:	60 95       	com	r22
 316:	70 95       	com	r23
 318:	80 95       	com	r24
 31a:	90 95       	com	r25
 31c:	9b 01       	movw	r18, r22
 31e:	ac 01       	movw	r20, r24
 320:	bd 01       	movw	r22, r26
 322:	cf 01       	movw	r24, r30
 324:	08 95       	ret

Disassembly of section .text.libgcc.mul:

00000326 <__umulhisi3>:
 326:	a2 9f       	mul	r26, r18
 328:	b0 01       	movw	r22, r0
 32a:	b3 9f       	mul	r27, r19
 32c:	c0 01       	movw	r24, r0
 32e:	a3 9f       	mul	r26, r19
 330:	70 0d       	add	r23, r0
 332:	81 1d       	adc	r24, r1
 334:	11 24       	eor	r1, r1
 336:	91 1d       	adc	r25, r1
 338:	b2 9f       	mul	r27, r18
 33a:	70 0d       	add	r23, r0
 33c:	81 1d       	adc	r24, r1
 33e:	11 24       	eor	r1, r1
 340:	91 1d       	adc	r25, r1
 342:	08 95       	ret

Disassembly of section .text.__dummy_fini:

00000362 <_fini>:
 362:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

00000364 <__funcs_on_exit>:
 364:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

00000366 <__simulator_exit>:
 366:	08 95       	ret

Disassembly of section .text.exit:

00000344 <exit>:
 344:	ec 01       	movw	r28, r24
 346:	0e 94 b2 01 	call	0x364	; 0x364 <__funcs_on_exit>
 34a:	0e 94 b1 01 	call	0x362	; 0x362 <_fini>
 34e:	ce 01       	movw	r24, r28
 350:	0e 94 b3 01 	call	0x366	; 0x366 <__simulator_exit>
 354:	ce 01       	movw	r24, r28
 356:	0e 94 af 01 	call	0x35e	; 0x35e <_Exit>

Disassembly of section .text._Exit:

0000035e <_Exit>:
 35e:	0e 94 5f 00 	call	0xbe	; 0xbe <_exit>
