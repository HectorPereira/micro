
3 Teclado (un pin).elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000004ac  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000bc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  000004ac  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000001c  00000000  00000000  000004db  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000080  00000000  00000000  000004f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000010b1  00000000  00000000  00000577  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007eb  00000000  00000000  00001628  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000533  00000000  00000000  00001e13  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000148  00000000  00000000  00002348  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000224  00000000  00000000  00002490  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000006b8  00000000  00000000  000026b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000088  00000000  00000000  00002d6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  0000042a  0000042a  0000049e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002df4  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.utoa_simple 000000e4  000000d8  000000d8  0000014c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.lcd_set_outputs 0000004c  00000300  00000300  00000374  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.pulse_enable 00000032  0000034c  0000034c  000003c0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.lcd_apply_sequence 0000008c  000001bc  000001bc  00000230  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.lcd_start_sequence 00000022  000003aa  000003aa  0000041e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.lcd_write 00000050  000002b0  000002b0  00000324  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.lcd_write_str 0000002c  0000037e  0000037e  000003f2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.adc_init 0000000e  0000041c  0000041c  00000490  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.adc_read 0000001c  000003ea  000003ea  0000045e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .progmemx.data 0000001c  000000bc  000000bc  00000130  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 24 .text.main    00000068  00000248  00000248  000002bc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.libgcc.mul 0000001e  000003cc  000003cc  00000440  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.__dummy_fini 00000002  00000432  00000432  000004a6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.__dummy_funcs_on_exit 00000002  00000434  00000434  000004a8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.__dummy_simulator_exit 00000002  00000436  00000436  000004aa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.exit    00000016  00000406  00000406  0000047a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text._Exit   00000004  0000042e  0000042e  000004a2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 15 02 	jmp	0x42a	; 0x42a <__bad_interrupt>
   8:	0c 94 15 02 	jmp	0x42a	; 0x42a <__bad_interrupt>
   c:	0c 94 15 02 	jmp	0x42a	; 0x42a <__bad_interrupt>
  10:	0c 94 15 02 	jmp	0x42a	; 0x42a <__bad_interrupt>
  14:	0c 94 15 02 	jmp	0x42a	; 0x42a <__bad_interrupt>
  18:	0c 94 15 02 	jmp	0x42a	; 0x42a <__bad_interrupt>
  1c:	0c 94 15 02 	jmp	0x42a	; 0x42a <__bad_interrupt>
  20:	0c 94 15 02 	jmp	0x42a	; 0x42a <__bad_interrupt>
  24:	0c 94 15 02 	jmp	0x42a	; 0x42a <__bad_interrupt>
  28:	0c 94 15 02 	jmp	0x42a	; 0x42a <__bad_interrupt>
  2c:	0c 94 15 02 	jmp	0x42a	; 0x42a <__bad_interrupt>
  30:	0c 94 15 02 	jmp	0x42a	; 0x42a <__bad_interrupt>
  34:	0c 94 15 02 	jmp	0x42a	; 0x42a <__bad_interrupt>
  38:	0c 94 15 02 	jmp	0x42a	; 0x42a <__bad_interrupt>
  3c:	0c 94 15 02 	jmp	0x42a	; 0x42a <__bad_interrupt>
  40:	0c 94 15 02 	jmp	0x42a	; 0x42a <__bad_interrupt>
  44:	0c 94 15 02 	jmp	0x42a	; 0x42a <__bad_interrupt>
  48:	0c 94 15 02 	jmp	0x42a	; 0x42a <__bad_interrupt>
  4c:	0c 94 15 02 	jmp	0x42a	; 0x42a <__bad_interrupt>
  50:	0c 94 15 02 	jmp	0x42a	; 0x42a <__bad_interrupt>
  54:	0c 94 15 02 	jmp	0x42a	; 0x42a <__bad_interrupt>
  58:	0c 94 15 02 	jmp	0x42a	; 0x42a <__bad_interrupt>
  5c:	0c 94 15 02 	jmp	0x42a	; 0x42a <__bad_interrupt>
  60:	0c 94 15 02 	jmp	0x42a	; 0x42a <__bad_interrupt>
  64:	0c 94 15 02 	jmp	0x42a	; 0x42a <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	e8 e6       	ldi	r30, 0x68	; 104
  76:	f0 e0       	ldi	r31, 0x00	; 0
  78:	40 e0       	ldi	r20, 0x00	; 0
  7a:	17 c0       	rjmp	.+46     	; 0xaa <__do_clear_bss+0x8>
  7c:	b5 91       	lpm	r27, Z+
  7e:	a5 91       	lpm	r26, Z+
  80:	35 91       	lpm	r19, Z+
  82:	25 91       	lpm	r18, Z+
  84:	05 91       	lpm	r16, Z+
  86:	07 fd       	sbrc	r16, 7
  88:	0c c0       	rjmp	.+24     	; 0xa2 <__do_clear_bss>
  8a:	95 91       	lpm	r25, Z+
  8c:	85 91       	lpm	r24, Z+
  8e:	ef 01       	movw	r28, r30
  90:	f9 2f       	mov	r31, r25
  92:	e8 2f       	mov	r30, r24
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	a2 17       	cp	r26, r18
  9a:	b3 07       	cpc	r27, r19
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0x20>
  9e:	fe 01       	movw	r30, r28
  a0:	04 c0       	rjmp	.+8      	; 0xaa <__do_clear_bss+0x8>

000000a2 <__do_clear_bss>:
  a2:	1d 92       	st	X+, r1
  a4:	a2 17       	cp	r26, r18
  a6:	b3 07       	cpc	r27, r19
  a8:	e1 f7       	brne	.-8      	; 0xa2 <__do_clear_bss>
  aa:	e8 36       	cpi	r30, 0x68	; 104
  ac:	f4 07       	cpc	r31, r20
  ae:	31 f7       	brne	.-52     	; 0x7c <__do_copy_data+0x8>
  b0:	0e 94 24 01 	call	0x248	; 0x248 <main>
  b4:	0c 94 03 02 	jmp	0x406	; 0x406 <exit>

000000b8 <_exit>:
  b8:	f8 94       	cli

000000ba <__stop_program>:
  ba:	ff cf       	rjmp	.-2      	; 0xba <__stop_program>

Disassembly of section .text:

0000042a <__bad_interrupt>:
 42a:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.utoa_simple:

000000d8 <utoa_simple>:
void lcd_write(uint8_t character){
	lcd_apply_sequence((0b10 << 8) | reverse8(character));
}

void lcd_new_line(void){
	lcd_apply_sequence(0b0000000011);
  d8:	0f 93       	push	r16
  da:	1f 93       	push	r17
  dc:	cf 93       	push	r28
  de:	df 93       	push	r29
  e0:	00 d0       	rcall	.+0      	; 0xe2 <utoa_simple+0xa>
  e2:	00 d0       	rcall	.+0      	; 0xe4 <utoa_simple+0xc>
  e4:	00 d0       	rcall	.+0      	; 0xe6 <utoa_simple+0xe>
  e6:	cd b7       	in	r28, 0x3d	; 61
  e8:	de b7       	in	r29, 0x3e	; 62
  ea:	fc 01       	movw	r30, r24
  ec:	8b 01       	movw	r16, r22
  ee:	89 2b       	or	r24, r25
  f0:	b1 f5       	brne	.+108    	; 0x15e <utoa_simple+0x86>
  f2:	80 e3       	ldi	r24, 0x30	; 48
  f4:	fb 01       	movw	r30, r22
  f6:	80 83       	st	Z, r24
  f8:	11 82       	std	Z+1, r1	; 0x01
  fa:	55 c0       	rjmp	.+170    	; 0x1a6 <utoa_simple+0xce>
  fc:	9f 01       	movw	r18, r30
  fe:	ad ec       	ldi	r26, 0xCD	; 205
 100:	bc ec       	ldi	r27, 0xCC	; 204
 102:	0e 94 e6 01 	call	0x3cc	; 0x3cc <__umulhisi3>
 106:	96 95       	lsr	r25
 108:	87 95       	ror	r24
 10a:	96 95       	lsr	r25
 10c:	87 95       	ror	r24
 10e:	96 95       	lsr	r25
 110:	87 95       	ror	r24
 112:	9c 01       	movw	r18, r24
 114:	22 0f       	add	r18, r18
 116:	33 1f       	adc	r19, r19
 118:	88 0f       	add	r24, r24
 11a:	99 1f       	adc	r25, r25
 11c:	88 0f       	add	r24, r24
 11e:	99 1f       	adc	r25, r25
 120:	88 0f       	add	r24, r24
 122:	99 1f       	adc	r25, r25
 124:	82 0f       	add	r24, r18
 126:	93 1f       	adc	r25, r19
 128:	9f 01       	movw	r18, r30
 12a:	28 1b       	sub	r18, r24
 12c:	39 0b       	sbc	r19, r25
 12e:	c9 01       	movw	r24, r18
 130:	a1 e0       	ldi	r26, 0x01	; 1
 132:	b0 e0       	ldi	r27, 0x00	; 0
 134:	ac 0f       	add	r26, r28
 136:	bd 1f       	adc	r27, r29
 138:	a4 0f       	add	r26, r20
 13a:	b5 1f       	adc	r27, r21
 13c:	80 5d       	subi	r24, 0xD0	; 208
 13e:	8c 93       	st	X, r24
 140:	9f 01       	movw	r18, r30
 142:	ad ec       	ldi	r26, 0xCD	; 205
 144:	bc ec       	ldi	r27, 0xCC	; 204
 146:	0e 94 e6 01 	call	0x3cc	; 0x3cc <__umulhisi3>
 14a:	fc 01       	movw	r30, r24
 14c:	f6 95       	lsr	r31
 14e:	e7 95       	ror	r30
 150:	f6 95       	lsr	r31
 152:	e7 95       	ror	r30
 154:	f6 95       	lsr	r31
 156:	e7 95       	ror	r30
 158:	4f 5f       	subi	r20, 0xFF	; 255
 15a:	5f 4f       	sbci	r21, 0xFF	; 255
 15c:	02 c0       	rjmp	.+4      	; 0x162 <utoa_simple+0x8a>
 15e:	40 e0       	ldi	r20, 0x00	; 0
 160:	50 e0       	ldi	r21, 0x00	; 0
 162:	30 97       	sbiw	r30, 0x00	; 0
 164:	b9 f0       	breq	.+46     	; 0x194 <utoa_simple+0xbc>
 166:	45 30       	cpi	r20, 0x05	; 5
 168:	51 05       	cpc	r21, r1
 16a:	44 f2       	brlt	.-112    	; 0xfc <utoa_simple+0x24>
 16c:	80 e0       	ldi	r24, 0x00	; 0
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	13 c0       	rjmp	.+38     	; 0x198 <utoa_simple+0xc0>
 172:	d8 01       	movw	r26, r16
 174:	a8 0f       	add	r26, r24
 176:	b9 1f       	adc	r27, r25
 178:	fa 01       	movw	r30, r20
 17a:	e8 1b       	sub	r30, r24
 17c:	f9 0b       	sbc	r31, r25
 17e:	31 97       	sbiw	r30, 0x01	; 1
 180:	21 e0       	ldi	r18, 0x01	; 1
 182:	30 e0       	ldi	r19, 0x00	; 0
 184:	2c 0f       	add	r18, r28
 186:	3d 1f       	adc	r19, r29
 188:	e2 0f       	add	r30, r18
 18a:	f3 1f       	adc	r31, r19
 18c:	20 81       	ld	r18, Z
 18e:	2c 93       	st	X, r18
 190:	01 96       	adiw	r24, 0x01	; 1
 192:	02 c0       	rjmp	.+4      	; 0x198 <utoa_simple+0xc0>
 194:	80 e0       	ldi	r24, 0x00	; 0
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	84 17       	cp	r24, r20
 19a:	95 07       	cpc	r25, r21
 19c:	54 f3       	brlt	.-44     	; 0x172 <utoa_simple+0x9a>
 19e:	f8 01       	movw	r30, r16
 1a0:	e4 0f       	add	r30, r20
 1a2:	f5 1f       	adc	r31, r21
 1a4:	10 82       	st	Z, r1
 1a6:	26 96       	adiw	r28, 0x06	; 6
 1a8:	0f b6       	in	r0, 0x3f	; 63
 1aa:	f8 94       	cli
 1ac:	de bf       	out	0x3e, r29	; 62
 1ae:	0f be       	out	0x3f, r0	; 63
 1b0:	cd bf       	out	0x3d, r28	; 61
 1b2:	df 91       	pop	r29
 1b4:	cf 91       	pop	r28
 1b6:	1f 91       	pop	r17
 1b8:	0f 91       	pop	r16
 1ba:	08 95       	ret

Disassembly of section .text.lcd_set_outputs:

00000300 <lcd_set_outputs>:
 300:	cf 93       	push	r28
 302:	c0 e0       	ldi	r28, 0x00	; 0
 304:	1f c0       	rjmp	.+62     	; 0x344 <lcd_set_outputs+0x44>
 306:	2c 2f       	mov	r18, r28
 308:	30 e0       	ldi	r19, 0x00	; 0
 30a:	40 e0       	ldi	r20, 0x00	; 0
 30c:	a4 2f       	mov	r26, r20
 30e:	c9 01       	movw	r24, r18
 310:	82 53       	subi	r24, 0x32	; 50
 312:	9f 4f       	sbci	r25, 0xFF	; 255
 314:	af 4f       	sbci	r26, 0xFF	; 255
 316:	fc 01       	movw	r30, r24
 318:	84 91       	lpm	r24, Z
 31a:	2c 53       	subi	r18, 0x3C	; 60
 31c:	3f 4f       	sbci	r19, 0xFF	; 255
 31e:	4f 4f       	sbci	r20, 0xFF	; 255
 320:	64 2f       	mov	r22, r20
 322:	a9 01       	movw	r20, r18
 324:	fa 01       	movw	r30, r20
 326:	44 91       	lpm	r20, Z
 328:	81 50       	subi	r24, 0x01	; 1
 32a:	e8 2f       	mov	r30, r24
 32c:	f0 e0       	ldi	r31, 0x00	; 0
 32e:	20 81       	ld	r18, Z
 330:	81 e0       	ldi	r24, 0x01	; 1
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	02 c0       	rjmp	.+4      	; 0x33a <lcd_set_outputs+0x3a>
 336:	88 0f       	add	r24, r24
 338:	99 1f       	adc	r25, r25
 33a:	4a 95       	dec	r20
 33c:	e2 f7       	brpl	.-8      	; 0x336 <lcd_set_outputs+0x36>
 33e:	82 2b       	or	r24, r18
 340:	80 83       	st	Z, r24
 342:	cf 5f       	subi	r28, 0xFF	; 255
 344:	ca 30       	cpi	r28, 0x0A	; 10
 346:	f8 f2       	brcs	.-66     	; 0x306 <lcd_set_outputs+0x6>
 348:	cf 91       	pop	r28
 34a:	08 95       	ret

Disassembly of section .text.pulse_enable:

0000034c <pulse_enable>:
 34c:	8f e3       	ldi	r24, 0x3F	; 63
 34e:	9f e1       	ldi	r25, 0x1F	; 31
 350:	01 97       	sbiw	r24, 0x01	; 1
 352:	f1 f7       	brne	.-4      	; 0x350 <pulse_enable+0x4>
 354:	00 c0       	rjmp	.+0      	; 0x356 <pulse_enable+0xa>
 356:	00 00       	nop
 358:	85 b1       	in	r24, 0x05	; 5
 35a:	80 62       	ori	r24, 0x20	; 32
 35c:	85 b9       	out	0x05, r24	; 5
 35e:	8f e3       	ldi	r24, 0x3F	; 63
 360:	9f e1       	ldi	r25, 0x1F	; 31
 362:	01 97       	sbiw	r24, 0x01	; 1
 364:	f1 f7       	brne	.-4      	; 0x362 <pulse_enable+0x16>
 366:	00 c0       	rjmp	.+0      	; 0x368 <pulse_enable+0x1c>
 368:	00 00       	nop
 36a:	85 b1       	in	r24, 0x05	; 5
 36c:	8f 7d       	andi	r24, 0xDF	; 223
 36e:	85 b9       	out	0x05, r24	; 5
 370:	8f e3       	ldi	r24, 0x3F	; 63
 372:	9f e1       	ldi	r25, 0x1F	; 31
 374:	01 97       	sbiw	r24, 0x01	; 1
 376:	f1 f7       	brne	.-4      	; 0x374 <pulse_enable+0x28>
 378:	00 c0       	rjmp	.+0      	; 0x37a <pulse_enable+0x2e>
 37a:	00 00       	nop
 37c:	08 95       	ret

Disassembly of section .text.lcd_apply_sequence:

000001bc <lcd_apply_sequence>:
 1bc:	cf 92       	push	r12
 1be:	df 92       	push	r13
 1c0:	ef 92       	push	r14
 1c2:	ff 92       	push	r15
 1c4:	cf 93       	push	r28
 1c6:	df 93       	push	r29
 1c8:	a0 e0       	ldi	r26, 0x00	; 0
 1ca:	33 c0       	rjmp	.+102    	; 0x232 <lcd_apply_sequence+0x76>
 1cc:	2a 2f       	mov	r18, r26
 1ce:	30 e0       	ldi	r19, 0x00	; 0
 1d0:	40 e0       	ldi	r20, 0x00	; 0
 1d2:	e4 2f       	mov	r30, r20
 1d4:	e9 01       	movw	r28, r18
 1d6:	c2 53       	subi	r28, 0x32	; 50
 1d8:	df 4f       	sbci	r29, 0xFF	; 255
 1da:	ef 4f       	sbci	r30, 0xFF	; 255
 1dc:	6e 01       	movw	r12, r28
 1de:	ee 2e       	mov	r14, r30
 1e0:	f6 01       	movw	r30, r12
 1e2:	c4 90       	lpm	r12, Z
 1e4:	2c 53       	subi	r18, 0x3C	; 60
 1e6:	3f 4f       	sbci	r19, 0xFF	; 255
 1e8:	4f 4f       	sbci	r20, 0xFF	; 255
 1ea:	64 2f       	mov	r22, r20
 1ec:	a9 01       	movw	r20, r18
 1ee:	fa 01       	movw	r30, r20
 1f0:	44 91       	lpm	r20, Z
 1f2:	21 e0       	ldi	r18, 0x01	; 1
 1f4:	30 e0       	ldi	r19, 0x00	; 0
 1f6:	02 c0       	rjmp	.+4      	; 0x1fc <lcd_apply_sequence+0x40>
 1f8:	22 0f       	add	r18, r18
 1fa:	33 1f       	adc	r19, r19
 1fc:	4a 95       	dec	r20
 1fe:	e2 f7       	brpl	.-8      	; 0x1f8 <lcd_apply_sequence+0x3c>
 200:	40 e0       	ldi	r20, 0x00	; 0
 202:	52 e0       	ldi	r21, 0x02	; 2
 204:	0a 2e       	mov	r0, r26
 206:	02 c0       	rjmp	.+4      	; 0x20c <lcd_apply_sequence+0x50>
 208:	55 95       	asr	r21
 20a:	47 95       	ror	r20
 20c:	0a 94       	dec	r0
 20e:	e2 f7       	brpl	.-8      	; 0x208 <lcd_apply_sequence+0x4c>
 210:	48 23       	and	r20, r24
 212:	59 23       	and	r21, r25
 214:	45 2b       	or	r20, r21
 216:	31 f0       	breq	.+12     	; 0x224 <lcd_apply_sequence+0x68>
 218:	ec 2d       	mov	r30, r12
 21a:	f0 e0       	ldi	r31, 0x00	; 0
 21c:	30 81       	ld	r19, Z
 21e:	23 2b       	or	r18, r19
 220:	20 83       	st	Z, r18
 222:	06 c0       	rjmp	.+12     	; 0x230 <lcd_apply_sequence+0x74>
 224:	ec 2d       	mov	r30, r12
 226:	f0 e0       	ldi	r31, 0x00	; 0
 228:	30 81       	ld	r19, Z
 22a:	20 95       	com	r18
 22c:	23 23       	and	r18, r19
 22e:	20 83       	st	Z, r18
 230:	af 5f       	subi	r26, 0xFF	; 255
 232:	aa 30       	cpi	r26, 0x0A	; 10
 234:	58 f2       	brcs	.-106    	; 0x1cc <lcd_apply_sequence+0x10>
 236:	0e 94 a6 01 	call	0x34c	; 0x34c <pulse_enable>
 23a:	df 91       	pop	r29
 23c:	cf 91       	pop	r28
 23e:	ff 90       	pop	r15
 240:	ef 90       	pop	r14
 242:	df 90       	pop	r13
 244:	cf 90       	pop	r12
 246:	08 95       	ret

Disassembly of section .text.lcd_start_sequence:

000003aa <lcd_start_sequence>:
	pulse_enable();
}


void lcd_start_sequence(void){
	lcd_apply_sequence(0b0000001100);
 3aa:	8c e0       	ldi	r24, 0x0C	; 12
 3ac:	90 e0       	ldi	r25, 0x00	; 0
 3ae:	0e 94 de 00 	call	0x1bc	; 0x1bc <lcd_apply_sequence>
	lcd_apply_sequence(0b0000011100);
 3b2:	8c e1       	ldi	r24, 0x1C	; 28
 3b4:	90 e0       	ldi	r25, 0x00	; 0
 3b6:	0e 94 de 00 	call	0x1bc	; 0x1bc <lcd_apply_sequence>
	lcd_apply_sequence(0b0010000000);
 3ba:	80 e8       	ldi	r24, 0x80	; 128
 3bc:	90 e0       	ldi	r25, 0x00	; 0
 3be:	0e 94 de 00 	call	0x1bc	; 0x1bc <lcd_apply_sequence>
	lcd_apply_sequence(0b0011110000);
 3c2:	80 ef       	ldi	r24, 0xF0	; 240
 3c4:	90 e0       	ldi	r25, 0x00	; 0
 3c6:	0e 94 de 00 	call	0x1bc	; 0x1bc <lcd_apply_sequence>
 3ca:	08 95       	ret

Disassembly of section .text.lcd_write:

000002b0 <lcd_write>:
void lcd_write(uint8_t character){
	lcd_apply_sequence((0b10 << 8) | reverse8(character));
}

void lcd_new_line(void){
	lcd_apply_sequence(0b0000000011);
 2b0:	90 e1       	ldi	r25, 0x10	; 16
 2b2:	89 9f       	mul	r24, r25
 2b4:	90 01       	movw	r18, r0
 2b6:	11 24       	eor	r1, r1
 2b8:	82 95       	swap	r24
 2ba:	8f 70       	andi	r24, 0x0F	; 15
 2bc:	28 2b       	or	r18, r24
 2be:	82 2f       	mov	r24, r18
 2c0:	8c 7c       	andi	r24, 0xCC	; 204
 2c2:	90 e0       	ldi	r25, 0x00	; 0
 2c4:	ac 01       	movw	r20, r24
 2c6:	55 95       	asr	r21
 2c8:	47 95       	ror	r20
 2ca:	55 95       	asr	r21
 2cc:	47 95       	ror	r20
 2ce:	23 73       	andi	r18, 0x33	; 51
 2d0:	82 2f       	mov	r24, r18
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	88 0f       	add	r24, r24
 2d6:	99 1f       	adc	r25, r25
 2d8:	88 0f       	add	r24, r24
 2da:	99 1f       	adc	r25, r25
 2dc:	84 2b       	or	r24, r20
 2de:	28 2f       	mov	r18, r24
 2e0:	2a 7a       	andi	r18, 0xAA	; 170
 2e2:	30 e0       	ldi	r19, 0x00	; 0
 2e4:	35 95       	asr	r19
 2e6:	27 95       	ror	r18
 2e8:	98 2f       	mov	r25, r24
 2ea:	95 75       	andi	r25, 0x55	; 85
 2ec:	89 2f       	mov	r24, r25
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	88 0f       	add	r24, r24
 2f2:	99 1f       	adc	r25, r25
 2f4:	82 2b       	or	r24, r18
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	92 60       	ori	r25, 0x02	; 2
 2fa:	0e 94 de 00 	call	0x1bc	; 0x1bc <lcd_apply_sequence>
 2fe:	08 95       	ret

Disassembly of section .text.lcd_write_str:

0000037e <lcd_write_str>:
}

void lcd_write_str(const char *s) {
 37e:	cf 92       	push	r12
 380:	df 92       	push	r13
 382:	ef 92       	push	r14
 384:	6b 01       	movw	r12, r22
 386:	e8 2e       	mov	r14, r24
	while (*s) {
 388:	06 c0       	rjmp	.+12     	; 0x396 <lcd_write_str+0x18>
		lcd_write((uint8_t)*s++);
 38a:	9f ef       	ldi	r25, 0xFF	; 255
 38c:	c9 1a       	sub	r12, r25
 38e:	d9 0a       	sbc	r13, r25
 390:	e9 0a       	sbc	r14, r25
 392:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_write>
void lcd_new_line(void){
	lcd_apply_sequence(0b0000000011);
}

void lcd_write_str(const char *s) {
	while (*s) {
 396:	f6 01       	movw	r30, r12
 398:	84 91       	lpm	r24, Z
 39a:	e7 fc       	sbrc	r14, 7
 39c:	80 81       	ld	r24, Z
 39e:	81 11       	cpse	r24, r1
 3a0:	f4 cf       	rjmp	.-24     	; 0x38a <lcd_write_str+0xc>
		lcd_write((uint8_t)*s++);
	}
}
 3a2:	ef 90       	pop	r14
 3a4:	df 90       	pop	r13
 3a6:	cf 90       	pop	r12
 3a8:	08 95       	ret

Disassembly of section .text.adc_init:

0000041c <adc_init>:
	_delay_ms(2); // commands like clear/home need >1.5 ms
}
static inline void lcd_clear(void){ lcd_cmd(0x01); }   // HD44780 "clear display"

void adc_init(void){
	ADMUX  = (1<<REFS0);            
 41c:	80 e4       	ldi	r24, 0x40	; 64
 41e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	ADCSRA = (1<<ADEN) | 0x07;      
 422:	87 e8       	ldi	r24, 0x87	; 135
 424:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 428:	08 95       	ret

Disassembly of section .text.adc_read:

000003ea <adc_read>:
}

uint16_t adc_read(void){
	ADCSRA |= (1<<ADSC);
 3ea:	ea e7       	ldi	r30, 0x7A	; 122
 3ec:	f0 e0       	ldi	r31, 0x00	; 0
 3ee:	80 81       	ld	r24, Z
 3f0:	80 64       	ori	r24, 0x40	; 64
 3f2:	80 83       	st	Z, r24
	while (ADCSRA & (1<<ADSC));
 3f4:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 3f8:	86 fd       	sbrc	r24, 6
 3fa:	fc cf       	rjmp	.-8      	; 0x3f4 <adc_read+0xa>
	return ADC;
 3fc:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 400:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
}
 404:	08 95       	ret

Disassembly of section .text.main:

00000248 <main>:
void lcd_write(uint8_t character){
	lcd_apply_sequence((0b10 << 8) | reverse8(character));
}

void lcd_new_line(void){
	lcd_apply_sequence(0b0000000011);
 248:	cf 93       	push	r28
 24a:	df 93       	push	r29
 24c:	00 d0       	rcall	.+0      	; 0x24e <main+0x6>
 24e:	00 d0       	rcall	.+0      	; 0x250 <main+0x8>
 250:	00 d0       	rcall	.+0      	; 0x252 <main+0xa>
 252:	cd b7       	in	r28, 0x3d	; 61
 254:	de b7       	in	r29, 0x3e	; 62
 256:	0e 94 80 01 	call	0x300	; 0x300 <lcd_set_outputs>
 25a:	0e 94 d5 01 	call	0x3aa	; 0x3aa <lcd_start_sequence>
 25e:	0e 94 0e 02 	call	0x41c	; 0x41c <adc_init>
 262:	6c eb       	ldi	r22, 0xBC	; 188
 264:	70 e0       	ldi	r23, 0x00	; 0
 266:	80 e0       	ldi	r24, 0x00	; 0
 268:	0e 94 bf 01 	call	0x37e	; 0x37e <lcd_write_str>
 26c:	0e 94 f5 01 	call	0x3ea	; 0x3ea <adc_read>
 270:	7c 01       	movw	r14, r24
 272:	80 e8       	ldi	r24, 0x80	; 128
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	0e 94 de 00 	call	0x1bc	; 0x1bc <lcd_apply_sequence>
 27a:	8f e3       	ldi	r24, 0x3F	; 63
 27c:	9f e1       	ldi	r25, 0x1F	; 31
 27e:	01 97       	sbiw	r24, 0x01	; 1
 280:	f1 f7       	brne	.-4      	; 0x27e <main+0x36>
 282:	00 c0       	rjmp	.+0      	; 0x284 <main+0x3c>
 284:	00 00       	nop
 286:	8e 01       	movw	r16, r28
 288:	0f 5f       	subi	r16, 0xFF	; 255
 28a:	1f 4f       	sbci	r17, 0xFF	; 255
 28c:	b8 01       	movw	r22, r16
 28e:	c7 01       	movw	r24, r14
 290:	0e 94 6c 00 	call	0xd8	; 0xd8 <utoa_simple>
 294:	b8 01       	movw	r22, r16
 296:	80 e8       	ldi	r24, 0x80	; 128
 298:	0e 94 bf 01 	call	0x37e	; 0x37e <lcd_write_str>
 29c:	9f ef       	ldi	r25, 0xFF	; 255
 29e:	23 ec       	ldi	r18, 0xC3	; 195
 2a0:	89 e0       	ldi	r24, 0x09	; 9
 2a2:	91 50       	subi	r25, 0x01	; 1
 2a4:	20 40       	sbci	r18, 0x00	; 0
 2a6:	80 40       	sbci	r24, 0x00	; 0
 2a8:	e1 f7       	brne	.-8      	; 0x2a2 <main+0x5a>
 2aa:	00 c0       	rjmp	.+0      	; 0x2ac <main+0x64>
 2ac:	00 00       	nop
 2ae:	de cf       	rjmp	.-68     	; 0x26c <main+0x24>

Disassembly of section .text.libgcc.mul:

000003cc <__umulhisi3>:
 3cc:	a2 9f       	mul	r26, r18
 3ce:	b0 01       	movw	r22, r0
 3d0:	b3 9f       	mul	r27, r19
 3d2:	c0 01       	movw	r24, r0
 3d4:	a3 9f       	mul	r26, r19
 3d6:	70 0d       	add	r23, r0
 3d8:	81 1d       	adc	r24, r1
 3da:	11 24       	eor	r1, r1
 3dc:	91 1d       	adc	r25, r1
 3de:	b2 9f       	mul	r27, r18
 3e0:	70 0d       	add	r23, r0
 3e2:	81 1d       	adc	r24, r1
 3e4:	11 24       	eor	r1, r1
 3e6:	91 1d       	adc	r25, r1
 3e8:	08 95       	ret

Disassembly of section .text.__dummy_fini:

00000432 <_fini>:
 432:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

00000434 <__funcs_on_exit>:
 434:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

00000436 <__simulator_exit>:
 436:	08 95       	ret

Disassembly of section .text.exit:

00000406 <exit>:
 406:	ec 01       	movw	r28, r24
 408:	0e 94 1a 02 	call	0x434	; 0x434 <__funcs_on_exit>
 40c:	0e 94 19 02 	call	0x432	; 0x432 <_fini>
 410:	ce 01       	movw	r24, r28
 412:	0e 94 1b 02 	call	0x436	; 0x436 <__simulator_exit>
 416:	ce 01       	movw	r24, r28
 418:	0e 94 17 02 	call	0x42e	; 0x42e <_Exit>

Disassembly of section .text._Exit:

0000042e <_Exit>:
 42e:	0e 94 5c 00 	call	0xb8	; 0xb8 <_exit>
