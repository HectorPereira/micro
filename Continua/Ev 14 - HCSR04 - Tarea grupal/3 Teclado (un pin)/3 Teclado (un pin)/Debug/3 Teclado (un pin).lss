
3 Teclado (un pin).elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  000003e0  00000474  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000c4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  00000474  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000001c  00000000  00000000  000004a3  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000078  00000000  00000000  000004bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000106d  00000000  00000000  00000537  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007e7  00000000  00000000  000015a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004c0  00000000  00000000  00001d8b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000010c  00000000  00000000  0000224c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000224  00000000  00000000  00002358  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000004d2  00000000  00000000  0000257c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  00002a4e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  000003c2  000003c2  00000456  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002ab8  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.lcd_set_outputs 0000004c  00000270  00000270  00000304  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.pulse_enable 00000032  000002f2  000002f2  00000386  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.lcd_apply_sequence 0000008c  00000194  00000194  00000228  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.lcd_start_sequence 00000022  00000350  00000350  000003e4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.lcd_write 00000050  00000220  00000220  000002b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.lcd_write_str 0000002c  00000324  00000324  000003b8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.adc_init 0000000e  000003b4  000003b4  00000448  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.adc_read 0000001c  00000372  00000372  00000406  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.read_key_index 00000036  000002bc  000002bc  00000350  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .progmemx.data 00000022  000000c4  000000c4  00000158  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 24 .text.main    00000090  00000104  00000104  00000198  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .progmemx.data.thresholds 0000001e  000000e6  000000e6  0000017a  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 26 .data.keypad  00000010  00800100  000003d0  00000464  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 27 .text.libgcc  00000010  000003a4  000003a4  00000438  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.__dummy_fini 00000002  000003ca  000003ca  0000045e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.__dummy_funcs_on_exit 00000002  000003cc  000003cc  00000460  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.__dummy_simulator_exit 00000002  000003ce  000003ce  00000462  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.exit    00000016  0000038e  0000038e  00000422  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text._Exit   00000004  000003c6  000003c6  0000045a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <__bad_interrupt>
   8:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <__bad_interrupt>
   c:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <__bad_interrupt>
  10:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <__bad_interrupt>
  14:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <__bad_interrupt>
  18:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <__bad_interrupt>
  1c:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <__bad_interrupt>
  20:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <__bad_interrupt>
  24:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <__bad_interrupt>
  28:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <__bad_interrupt>
  2c:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <__bad_interrupt>
  30:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <__bad_interrupt>
  34:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <__bad_interrupt>
  38:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <__bad_interrupt>
  3c:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <__bad_interrupt>
  40:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <__bad_interrupt>
  44:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <__bad_interrupt>
  48:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <__bad_interrupt>
  4c:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <__bad_interrupt>
  50:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <__bad_interrupt>
  54:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <__bad_interrupt>
  58:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <__bad_interrupt>
  5c:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <__bad_interrupt>
  60:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <__bad_interrupt>
  64:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <__bad_interrupt>

00000068 <.dinit>:
  68:	01 00       	.word	0x0001	; ????
  6a:	01 10       	cpse	r0, r1
  6c:	00 03       	mulsu	r16, r16
  6e:	d0 00       	.word	0x00d0	; ????

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d8 e0       	ldi	r29, 0x08	; 8
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	e8 e6       	ldi	r30, 0x68	; 104
  7e:	f0 e0       	ldi	r31, 0x00	; 0
  80:	40 e0       	ldi	r20, 0x00	; 0
  82:	17 c0       	rjmp	.+46     	; 0xb2 <__do_clear_bss+0x8>
  84:	b5 91       	lpm	r27, Z+
  86:	a5 91       	lpm	r26, Z+
  88:	35 91       	lpm	r19, Z+
  8a:	25 91       	lpm	r18, Z+
  8c:	05 91       	lpm	r16, Z+
  8e:	07 fd       	sbrc	r16, 7
  90:	0c c0       	rjmp	.+24     	; 0xaa <__do_clear_bss>
  92:	95 91       	lpm	r25, Z+
  94:	85 91       	lpm	r24, Z+
  96:	ef 01       	movw	r28, r30
  98:	f9 2f       	mov	r31, r25
  9a:	e8 2f       	mov	r30, r24
  9c:	05 90       	lpm	r0, Z+
  9e:	0d 92       	st	X+, r0
  a0:	a2 17       	cp	r26, r18
  a2:	b3 07       	cpc	r27, r19
  a4:	d9 f7       	brne	.-10     	; 0x9c <__do_copy_data+0x20>
  a6:	fe 01       	movw	r30, r28
  a8:	04 c0       	rjmp	.+8      	; 0xb2 <__do_clear_bss+0x8>

000000aa <__do_clear_bss>:
  aa:	1d 92       	st	X+, r1
  ac:	a2 17       	cp	r26, r18
  ae:	b3 07       	cpc	r27, r19
  b0:	e1 f7       	brne	.-8      	; 0xaa <__do_clear_bss>
  b2:	ef 36       	cpi	r30, 0x6F	; 111
  b4:	f4 07       	cpc	r31, r20
  b6:	31 f7       	brne	.-52     	; 0x84 <__do_copy_data+0x8>
  b8:	0e 94 82 00 	call	0x104	; 0x104 <main>
  bc:	0c 94 c7 01 	jmp	0x38e	; 0x38e <exit>

000000c0 <_exit>:
  c0:	f8 94       	cli

000000c2 <__stop_program>:
  c2:	ff cf       	rjmp	.-2      	; 0xc2 <__stop_program>

Disassembly of section .text:

000003c2 <__bad_interrupt>:
 3c2:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.lcd_set_outputs:

00000270 <lcd_set_outputs>:
void lcd_write(uint8_t character){
	lcd_apply_sequence((0b10 << 8) | reverse8(character));
}

void lcd_new_line(void){
	lcd_apply_sequence(0b0000000011);
 270:	cf 93       	push	r28
 272:	c0 e0       	ldi	r28, 0x00	; 0
 274:	1f c0       	rjmp	.+62     	; 0x2b4 <lcd_set_outputs+0x44>
 276:	2c 2f       	mov	r18, r28
 278:	30 e0       	ldi	r19, 0x00	; 0
 27a:	40 e0       	ldi	r20, 0x00	; 0
 27c:	a4 2f       	mov	r26, r20
 27e:	c9 01       	movw	r24, r18
 280:	84 52       	subi	r24, 0x24	; 36
 282:	9f 4f       	sbci	r25, 0xFF	; 255
 284:	af 4f       	sbci	r26, 0xFF	; 255
 286:	fc 01       	movw	r30, r24
 288:	84 91       	lpm	r24, Z
 28a:	2e 52       	subi	r18, 0x2E	; 46
 28c:	3f 4f       	sbci	r19, 0xFF	; 255
 28e:	4f 4f       	sbci	r20, 0xFF	; 255
 290:	64 2f       	mov	r22, r20
 292:	a9 01       	movw	r20, r18
 294:	fa 01       	movw	r30, r20
 296:	44 91       	lpm	r20, Z
 298:	81 50       	subi	r24, 0x01	; 1
 29a:	e8 2f       	mov	r30, r24
 29c:	f0 e0       	ldi	r31, 0x00	; 0
 29e:	20 81       	ld	r18, Z
 2a0:	81 e0       	ldi	r24, 0x01	; 1
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	02 c0       	rjmp	.+4      	; 0x2aa <lcd_set_outputs+0x3a>
 2a6:	88 0f       	add	r24, r24
 2a8:	99 1f       	adc	r25, r25
 2aa:	4a 95       	dec	r20
 2ac:	e2 f7       	brpl	.-8      	; 0x2a6 <lcd_set_outputs+0x36>
 2ae:	82 2b       	or	r24, r18
 2b0:	80 83       	st	Z, r24
 2b2:	cf 5f       	subi	r28, 0xFF	; 255
 2b4:	ca 30       	cpi	r28, 0x0A	; 10
 2b6:	f8 f2       	brcs	.-66     	; 0x276 <lcd_set_outputs+0x6>
 2b8:	cf 91       	pop	r28
 2ba:	08 95       	ret

Disassembly of section .text.pulse_enable:

000002f2 <pulse_enable>:
 2f2:	8f e3       	ldi	r24, 0x3F	; 63
 2f4:	9f e1       	ldi	r25, 0x1F	; 31
 2f6:	01 97       	sbiw	r24, 0x01	; 1
 2f8:	f1 f7       	brne	.-4      	; 0x2f6 <pulse_enable+0x4>
 2fa:	00 c0       	rjmp	.+0      	; 0x2fc <pulse_enable+0xa>
 2fc:	00 00       	nop
 2fe:	85 b1       	in	r24, 0x05	; 5
 300:	80 62       	ori	r24, 0x20	; 32
 302:	85 b9       	out	0x05, r24	; 5
 304:	8f e3       	ldi	r24, 0x3F	; 63
 306:	9f e1       	ldi	r25, 0x1F	; 31
 308:	01 97       	sbiw	r24, 0x01	; 1
 30a:	f1 f7       	brne	.-4      	; 0x308 <pulse_enable+0x16>
 30c:	00 c0       	rjmp	.+0      	; 0x30e <pulse_enable+0x1c>
 30e:	00 00       	nop
 310:	85 b1       	in	r24, 0x05	; 5
 312:	8f 7d       	andi	r24, 0xDF	; 223
 314:	85 b9       	out	0x05, r24	; 5
 316:	8f e3       	ldi	r24, 0x3F	; 63
 318:	9f e1       	ldi	r25, 0x1F	; 31
 31a:	01 97       	sbiw	r24, 0x01	; 1
 31c:	f1 f7       	brne	.-4      	; 0x31a <pulse_enable+0x28>
 31e:	00 c0       	rjmp	.+0      	; 0x320 <pulse_enable+0x2e>
 320:	00 00       	nop
 322:	08 95       	ret

Disassembly of section .text.lcd_apply_sequence:

00000194 <lcd_apply_sequence>:
 194:	cf 92       	push	r12
 196:	df 92       	push	r13
 198:	ef 92       	push	r14
 19a:	ff 92       	push	r15
 19c:	cf 93       	push	r28
 19e:	df 93       	push	r29
 1a0:	a0 e0       	ldi	r26, 0x00	; 0
 1a2:	33 c0       	rjmp	.+102    	; 0x20a <lcd_apply_sequence+0x76>
 1a4:	2a 2f       	mov	r18, r26
 1a6:	30 e0       	ldi	r19, 0x00	; 0
 1a8:	40 e0       	ldi	r20, 0x00	; 0
 1aa:	e4 2f       	mov	r30, r20
 1ac:	e9 01       	movw	r28, r18
 1ae:	c4 52       	subi	r28, 0x24	; 36
 1b0:	df 4f       	sbci	r29, 0xFF	; 255
 1b2:	ef 4f       	sbci	r30, 0xFF	; 255
 1b4:	6e 01       	movw	r12, r28
 1b6:	ee 2e       	mov	r14, r30
 1b8:	f6 01       	movw	r30, r12
 1ba:	c4 90       	lpm	r12, Z
 1bc:	2e 52       	subi	r18, 0x2E	; 46
 1be:	3f 4f       	sbci	r19, 0xFF	; 255
 1c0:	4f 4f       	sbci	r20, 0xFF	; 255
 1c2:	64 2f       	mov	r22, r20
 1c4:	a9 01       	movw	r20, r18
 1c6:	fa 01       	movw	r30, r20
 1c8:	44 91       	lpm	r20, Z
 1ca:	21 e0       	ldi	r18, 0x01	; 1
 1cc:	30 e0       	ldi	r19, 0x00	; 0
 1ce:	02 c0       	rjmp	.+4      	; 0x1d4 <lcd_apply_sequence+0x40>
 1d0:	22 0f       	add	r18, r18
 1d2:	33 1f       	adc	r19, r19
 1d4:	4a 95       	dec	r20
 1d6:	e2 f7       	brpl	.-8      	; 0x1d0 <lcd_apply_sequence+0x3c>
 1d8:	40 e0       	ldi	r20, 0x00	; 0
 1da:	52 e0       	ldi	r21, 0x02	; 2
 1dc:	0a 2e       	mov	r0, r26
 1de:	02 c0       	rjmp	.+4      	; 0x1e4 <lcd_apply_sequence+0x50>
 1e0:	55 95       	asr	r21
 1e2:	47 95       	ror	r20
 1e4:	0a 94       	dec	r0
 1e6:	e2 f7       	brpl	.-8      	; 0x1e0 <lcd_apply_sequence+0x4c>
 1e8:	48 23       	and	r20, r24
 1ea:	59 23       	and	r21, r25
 1ec:	45 2b       	or	r20, r21
 1ee:	31 f0       	breq	.+12     	; 0x1fc <lcd_apply_sequence+0x68>
 1f0:	ec 2d       	mov	r30, r12
 1f2:	f0 e0       	ldi	r31, 0x00	; 0
 1f4:	30 81       	ld	r19, Z
 1f6:	23 2b       	or	r18, r19
 1f8:	20 83       	st	Z, r18
 1fa:	06 c0       	rjmp	.+12     	; 0x208 <lcd_apply_sequence+0x74>
 1fc:	ec 2d       	mov	r30, r12
 1fe:	f0 e0       	ldi	r31, 0x00	; 0
 200:	30 81       	ld	r19, Z
 202:	20 95       	com	r18
 204:	23 23       	and	r18, r19
 206:	20 83       	st	Z, r18
 208:	af 5f       	subi	r26, 0xFF	; 255
 20a:	aa 30       	cpi	r26, 0x0A	; 10
 20c:	58 f2       	brcs	.-106    	; 0x1a4 <lcd_apply_sequence+0x10>
 20e:	0e 94 79 01 	call	0x2f2	; 0x2f2 <pulse_enable>
 212:	df 91       	pop	r29
 214:	cf 91       	pop	r28
 216:	ff 90       	pop	r15
 218:	ef 90       	pop	r14
 21a:	df 90       	pop	r13
 21c:	cf 90       	pop	r12
 21e:	08 95       	ret

Disassembly of section .text.lcd_start_sequence:

00000350 <lcd_start_sequence>:
	pulse_enable();
}


void lcd_start_sequence(void){
	lcd_apply_sequence(0b0000001100);
 350:	8c e0       	ldi	r24, 0x0C	; 12
 352:	90 e0       	ldi	r25, 0x00	; 0
 354:	0e 94 ca 00 	call	0x194	; 0x194 <lcd_apply_sequence>
	lcd_apply_sequence(0b0000011100);
 358:	8c e1       	ldi	r24, 0x1C	; 28
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	0e 94 ca 00 	call	0x194	; 0x194 <lcd_apply_sequence>
	lcd_apply_sequence(0b0010000000);
 360:	80 e8       	ldi	r24, 0x80	; 128
 362:	90 e0       	ldi	r25, 0x00	; 0
 364:	0e 94 ca 00 	call	0x194	; 0x194 <lcd_apply_sequence>
	lcd_apply_sequence(0b0011110000);
 368:	80 ef       	ldi	r24, 0xF0	; 240
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	0e 94 ca 00 	call	0x194	; 0x194 <lcd_apply_sequence>
 370:	08 95       	ret

Disassembly of section .text.lcd_write:

00000220 <lcd_write>:
void lcd_write(uint8_t character){
	lcd_apply_sequence((0b10 << 8) | reverse8(character));
}

void lcd_new_line(void){
	lcd_apply_sequence(0b0000000011);
 220:	90 e1       	ldi	r25, 0x10	; 16
 222:	89 9f       	mul	r24, r25
 224:	90 01       	movw	r18, r0
 226:	11 24       	eor	r1, r1
 228:	82 95       	swap	r24
 22a:	8f 70       	andi	r24, 0x0F	; 15
 22c:	28 2b       	or	r18, r24
 22e:	82 2f       	mov	r24, r18
 230:	8c 7c       	andi	r24, 0xCC	; 204
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	ac 01       	movw	r20, r24
 236:	55 95       	asr	r21
 238:	47 95       	ror	r20
 23a:	55 95       	asr	r21
 23c:	47 95       	ror	r20
 23e:	23 73       	andi	r18, 0x33	; 51
 240:	82 2f       	mov	r24, r18
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	88 0f       	add	r24, r24
 246:	99 1f       	adc	r25, r25
 248:	88 0f       	add	r24, r24
 24a:	99 1f       	adc	r25, r25
 24c:	84 2b       	or	r24, r20
 24e:	28 2f       	mov	r18, r24
 250:	2a 7a       	andi	r18, 0xAA	; 170
 252:	30 e0       	ldi	r19, 0x00	; 0
 254:	35 95       	asr	r19
 256:	27 95       	ror	r18
 258:	98 2f       	mov	r25, r24
 25a:	95 75       	andi	r25, 0x55	; 85
 25c:	89 2f       	mov	r24, r25
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	88 0f       	add	r24, r24
 262:	99 1f       	adc	r25, r25
 264:	82 2b       	or	r24, r18
 266:	90 e0       	ldi	r25, 0x00	; 0
 268:	92 60       	ori	r25, 0x02	; 2
 26a:	0e 94 ca 00 	call	0x194	; 0x194 <lcd_apply_sequence>
 26e:	08 95       	ret

Disassembly of section .text.lcd_write_str:

00000324 <lcd_write_str>:
}

void lcd_write_str(const char *s) {
 324:	cf 92       	push	r12
 326:	df 92       	push	r13
 328:	ef 92       	push	r14
 32a:	6b 01       	movw	r12, r22
 32c:	e8 2e       	mov	r14, r24
	while (*s) {
 32e:	06 c0       	rjmp	.+12     	; 0x33c <lcd_write_str+0x18>
		lcd_write((uint8_t)*s++);
 330:	9f ef       	ldi	r25, 0xFF	; 255
 332:	c9 1a       	sub	r12, r25
 334:	d9 0a       	sbc	r13, r25
 336:	e9 0a       	sbc	r14, r25
 338:	0e 94 10 01 	call	0x220	; 0x220 <lcd_write>
void lcd_new_line(void){
	lcd_apply_sequence(0b0000000011);
}

void lcd_write_str(const char *s) {
	while (*s) {
 33c:	f6 01       	movw	r30, r12
 33e:	84 91       	lpm	r24, Z
 340:	e7 fc       	sbrc	r14, 7
 342:	80 81       	ld	r24, Z
 344:	81 11       	cpse	r24, r1
 346:	f4 cf       	rjmp	.-24     	; 0x330 <lcd_write_str+0xc>
		lcd_write((uint8_t)*s++);
	}
}
 348:	ef 90       	pop	r14
 34a:	df 90       	pop	r13
 34c:	cf 90       	pop	r12
 34e:	08 95       	ret

Disassembly of section .text.adc_init:

000003b4 <adc_init>:
	_delay_ms(2); // commands like clear/home need >1.5 ms
}
static inline void lcd_clear(void){ lcd_cmd(0x01); }   // HD44780 "clear display"

void adc_init(void){
	ADMUX  = (1<<REFS0);            
 3b4:	80 e4       	ldi	r24, 0x40	; 64
 3b6:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	ADCSRA = (1<<ADEN) | 0x07;      
 3ba:	87 e8       	ldi	r24, 0x87	; 135
 3bc:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 3c0:	08 95       	ret

Disassembly of section .text.adc_read:

00000372 <adc_read>:
}

uint16_t adc_read(void){
	ADCSRA |= (1<<ADSC);
 372:	ea e7       	ldi	r30, 0x7A	; 122
 374:	f0 e0       	ldi	r31, 0x00	; 0
 376:	80 81       	ld	r24, Z
 378:	80 64       	ori	r24, 0x40	; 64
 37a:	80 83       	st	Z, r24
	while (ADCSRA & (1<<ADSC));
 37c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 380:	86 fd       	sbrc	r24, 6
 382:	fc cf       	rjmp	.-8      	; 0x37c <adc_read+0xa>
	return ADC;
 384:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 388:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
}
 38c:	08 95       	ret

Disassembly of section .text.read_key_index:

000002bc <read_key_index>:
void lcd_write(uint8_t character){
	lcd_apply_sequence((0b10 << 8) | reverse8(character));
}

void lcd_new_line(void){
	lcd_apply_sequence(0b0000000011);
 2bc:	0e 94 b9 01 	call	0x372	; 0x372 <adc_read>
 2c0:	dc 01       	movw	r26, r24
 2c2:	80 e0       	ldi	r24, 0x00	; 0
 2c4:	90 e0       	ldi	r25, 0x00	; 0
 2c6:	01 c0       	rjmp	.+2      	; 0x2ca <read_key_index+0xe>
 2c8:	01 96       	adiw	r24, 0x01	; 1
 2ca:	8f 30       	cpi	r24, 0x0F	; 15
 2cc:	91 05       	cpc	r25, r1
 2ce:	84 f4       	brge	.+32     	; 0x2f0 <read_key_index+0x34>
 2d0:	9c 01       	movw	r18, r24
 2d2:	22 0f       	add	r18, r18
 2d4:	33 1f       	adc	r19, r19
 2d6:	03 2e       	mov	r0, r19
 2d8:	00 0c       	add	r0, r0
 2da:	44 0b       	sbc	r20, r20
 2dc:	2a 51       	subi	r18, 0x1A	; 26
 2de:	3f 4f       	sbci	r19, 0xFF	; 255
 2e0:	4f 4f       	sbci	r20, 0xFF	; 255
 2e2:	f9 01       	movw	r30, r18
 2e4:	54 2f       	mov	r21, r20
 2e6:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <__xload_2>
 2ea:	6a 17       	cp	r22, r26
 2ec:	7b 07       	cpc	r23, r27
 2ee:	60 f3       	brcs	.-40     	; 0x2c8 <read_key_index+0xc>
 2f0:	08 95       	ret

Disassembly of section .text.main:

00000104 <main>:
 104:	0e 94 38 01 	call	0x270	; 0x270 <lcd_set_outputs>
 108:	0e 94 a8 01 	call	0x350	; 0x350 <lcd_start_sequence>
 10c:	0e 94 da 01 	call	0x3b4	; 0x3b4 <adc_init>
 110:	64 ec       	ldi	r22, 0xC4	; 196
 112:	70 e0       	ldi	r23, 0x00	; 0
 114:	80 e0       	ldi	r24, 0x00	; 0
 116:	0e 94 92 01 	call	0x324	; 0x324 <lcd_write_str>
 11a:	d0 e0       	ldi	r29, 0x00	; 0
 11c:	0e 94 5e 01 	call	0x2bc	; 0x2bc <read_key_index>
 120:	9c 01       	movw	r18, r24
 122:	99 23       	and	r25, r25
 124:	14 f4       	brge	.+4      	; 0x12a <main+0x26>
 126:	2d 5f       	subi	r18, 0xFD	; 253
 128:	3f 4f       	sbci	r19, 0xFF	; 255
 12a:	35 95       	asr	r19
 12c:	27 95       	ror	r18
 12e:	35 95       	asr	r19
 130:	27 95       	ror	r18
 132:	83 70       	andi	r24, 0x03	; 3
 134:	90 78       	andi	r25, 0x80	; 128
 136:	99 23       	and	r25, r25
 138:	24 f4       	brge	.+8      	; 0x142 <main+0x3e>
 13a:	01 97       	sbiw	r24, 0x01	; 1
 13c:	8c 6f       	ori	r24, 0xFC	; 252
 13e:	9f 6f       	ori	r25, 0xFF	; 255
 140:	01 96       	adiw	r24, 0x01	; 1
 142:	22 0f       	add	r18, r18
 144:	33 1f       	adc	r19, r19
 146:	22 0f       	add	r18, r18
 148:	33 1f       	adc	r19, r19
 14a:	20 50       	subi	r18, 0x00	; 0
 14c:	3f 4f       	sbci	r19, 0xFF	; 255
 14e:	f9 01       	movw	r30, r18
 150:	e8 0f       	add	r30, r24
 152:	f9 1f       	adc	r31, r25
 154:	c0 81       	ld	r28, Z
 156:	dc 17       	cp	r29, r28
 158:	99 f0       	breq	.+38     	; 0x180 <main+0x7c>
 15a:	80 e8       	ldi	r24, 0x80	; 128
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	0e 94 ca 00 	call	0x194	; 0x194 <lcd_apply_sequence>
 162:	8f e3       	ldi	r24, 0x3F	; 63
 164:	9f e1       	ldi	r25, 0x1F	; 31
 166:	01 97       	sbiw	r24, 0x01	; 1
 168:	f1 f7       	brne	.-4      	; 0x166 <main+0x62>
 16a:	00 c0       	rjmp	.+0      	; 0x16c <main+0x68>
 16c:	00 00       	nop
 16e:	6c ec       	ldi	r22, 0xCC	; 204
 170:	70 e0       	ldi	r23, 0x00	; 0
 172:	80 e0       	ldi	r24, 0x00	; 0
 174:	0e 94 92 01 	call	0x324	; 0x324 <lcd_write_str>
 178:	8c 2f       	mov	r24, r28
 17a:	0e 94 10 01 	call	0x220	; 0x220 <lcd_write>
 17e:	dc 2f       	mov	r29, r28
 180:	9f ef       	ldi	r25, 0xFF	; 255
 182:	29 ef       	ldi	r18, 0xF9	; 249
 184:	80 e0       	ldi	r24, 0x00	; 0
 186:	91 50       	subi	r25, 0x01	; 1
 188:	20 40       	sbci	r18, 0x00	; 0
 18a:	80 40       	sbci	r24, 0x00	; 0
 18c:	e1 f7       	brne	.-8      	; 0x186 <main+0x82>
 18e:	00 c0       	rjmp	.+0      	; 0x190 <main+0x8c>
 190:	00 00       	nop
 192:	c4 cf       	rjmp	.-120    	; 0x11c <main+0x18>

Disassembly of section .text.libgcc:

000003a4 <__xload_2>:
 3a4:	57 fd       	sbrc	r21, 7
 3a6:	03 c0       	rjmp	.+6      	; 0x3ae <__xload_2+0xa>
 3a8:	65 91       	lpm	r22, Z+
 3aa:	75 91       	lpm	r23, Z+
 3ac:	08 95       	ret
 3ae:	61 91       	ld	r22, Z+
 3b0:	71 91       	ld	r23, Z+
 3b2:	08 95       	ret

Disassembly of section .text.__dummy_fini:

000003ca <_fini>:
 3ca:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

000003cc <__funcs_on_exit>:
 3cc:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

000003ce <__simulator_exit>:
 3ce:	08 95       	ret

Disassembly of section .text.exit:

0000038e <exit>:
 38e:	ec 01       	movw	r28, r24
 390:	0e 94 e6 01 	call	0x3cc	; 0x3cc <__funcs_on_exit>
 394:	0e 94 e5 01 	call	0x3ca	; 0x3ca <_fini>
 398:	ce 01       	movw	r24, r28
 39a:	0e 94 e7 01 	call	0x3ce	; 0x3ce <__simulator_exit>
 39e:	ce 01       	movw	r24, r28
 3a0:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <_Exit>

Disassembly of section .text._Exit:

000003c6 <_Exit>:
 3c6:	0e 94 60 00 	call	0xc0	; 0xc0 <_exit>
