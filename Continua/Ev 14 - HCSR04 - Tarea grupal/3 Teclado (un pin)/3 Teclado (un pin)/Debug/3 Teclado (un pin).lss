
3 Teclado (un pin).elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  000003d8  0000046c  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000c4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  0000046c  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000001c  00000000  00000000  0000049b  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000078  00000000  00000000  000004b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000106d  00000000  00000000  0000052f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007e7  00000000  00000000  0000159c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004c0  00000000  00000000  00001d83  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000010c  00000000  00000000  00002244  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000224  00000000  00000000  00002350  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000004ae  00000000  00000000  00002574  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  00002a22  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  000003ba  000003ba  0000044e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002a8c  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.lcd_set_outputs 0000004c  00000268  00000268  000002fc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.pulse_enable 00000032  000002ea  000002ea  0000037e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.lcd_apply_sequence 0000008c  0000018c  0000018c  00000220  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.lcd_start_sequence 00000022  00000348  00000348  000003dc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.lcd_write 00000050  00000218  00000218  000002ac  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.lcd_write_str 0000002c  0000031c  0000031c  000003b0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.adc_init 0000000e  000003ac  000003ac  00000440  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.adc_read 0000001c  0000036a  0000036a  000003fe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.read_key_index 00000036  000002b4  000002b4  00000348  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .progmemx.data 0000001a  000000e2  000000e2  00000176  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 24 .text.main    00000090  000000fc  000000fc  00000190  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .progmemx.data.thresholds 0000001e  000000c4  000000c4  00000158  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 26 .data.keypad  00000010  00800100  000003c8  0000045c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 27 .text.libgcc  00000010  0000039c  0000039c  00000430  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.__dummy_fini 00000002  000003c2  000003c2  00000456  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.__dummy_funcs_on_exit 00000002  000003c4  000003c4  00000458  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.__dummy_simulator_exit 00000002  000003c6  000003c6  0000045a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.exit    00000016  00000386  00000386  0000041a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text._Exit   00000004  000003be  000003be  00000452  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 dd 01 	jmp	0x3ba	; 0x3ba <__bad_interrupt>
   8:	0c 94 dd 01 	jmp	0x3ba	; 0x3ba <__bad_interrupt>
   c:	0c 94 dd 01 	jmp	0x3ba	; 0x3ba <__bad_interrupt>
  10:	0c 94 dd 01 	jmp	0x3ba	; 0x3ba <__bad_interrupt>
  14:	0c 94 dd 01 	jmp	0x3ba	; 0x3ba <__bad_interrupt>
  18:	0c 94 dd 01 	jmp	0x3ba	; 0x3ba <__bad_interrupt>
  1c:	0c 94 dd 01 	jmp	0x3ba	; 0x3ba <__bad_interrupt>
  20:	0c 94 dd 01 	jmp	0x3ba	; 0x3ba <__bad_interrupt>
  24:	0c 94 dd 01 	jmp	0x3ba	; 0x3ba <__bad_interrupt>
  28:	0c 94 dd 01 	jmp	0x3ba	; 0x3ba <__bad_interrupt>
  2c:	0c 94 dd 01 	jmp	0x3ba	; 0x3ba <__bad_interrupt>
  30:	0c 94 dd 01 	jmp	0x3ba	; 0x3ba <__bad_interrupt>
  34:	0c 94 dd 01 	jmp	0x3ba	; 0x3ba <__bad_interrupt>
  38:	0c 94 dd 01 	jmp	0x3ba	; 0x3ba <__bad_interrupt>
  3c:	0c 94 dd 01 	jmp	0x3ba	; 0x3ba <__bad_interrupt>
  40:	0c 94 dd 01 	jmp	0x3ba	; 0x3ba <__bad_interrupt>
  44:	0c 94 dd 01 	jmp	0x3ba	; 0x3ba <__bad_interrupt>
  48:	0c 94 dd 01 	jmp	0x3ba	; 0x3ba <__bad_interrupt>
  4c:	0c 94 dd 01 	jmp	0x3ba	; 0x3ba <__bad_interrupt>
  50:	0c 94 dd 01 	jmp	0x3ba	; 0x3ba <__bad_interrupt>
  54:	0c 94 dd 01 	jmp	0x3ba	; 0x3ba <__bad_interrupt>
  58:	0c 94 dd 01 	jmp	0x3ba	; 0x3ba <__bad_interrupt>
  5c:	0c 94 dd 01 	jmp	0x3ba	; 0x3ba <__bad_interrupt>
  60:	0c 94 dd 01 	jmp	0x3ba	; 0x3ba <__bad_interrupt>
  64:	0c 94 dd 01 	jmp	0x3ba	; 0x3ba <__bad_interrupt>

00000068 <.dinit>:
  68:	01 00       	.word	0x0001	; ????
  6a:	01 10       	cpse	r0, r1
  6c:	00 03       	mulsu	r16, r16
  6e:	c8 00       	.word	0x00c8	; ????

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d8 e0       	ldi	r29, 0x08	; 8
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	e8 e6       	ldi	r30, 0x68	; 104
  7e:	f0 e0       	ldi	r31, 0x00	; 0
  80:	40 e0       	ldi	r20, 0x00	; 0
  82:	17 c0       	rjmp	.+46     	; 0xb2 <__do_clear_bss+0x8>
  84:	b5 91       	lpm	r27, Z+
  86:	a5 91       	lpm	r26, Z+
  88:	35 91       	lpm	r19, Z+
  8a:	25 91       	lpm	r18, Z+
  8c:	05 91       	lpm	r16, Z+
  8e:	07 fd       	sbrc	r16, 7
  90:	0c c0       	rjmp	.+24     	; 0xaa <__do_clear_bss>
  92:	95 91       	lpm	r25, Z+
  94:	85 91       	lpm	r24, Z+
  96:	ef 01       	movw	r28, r30
  98:	f9 2f       	mov	r31, r25
  9a:	e8 2f       	mov	r30, r24
  9c:	05 90       	lpm	r0, Z+
  9e:	0d 92       	st	X+, r0
  a0:	a2 17       	cp	r26, r18
  a2:	b3 07       	cpc	r27, r19
  a4:	d9 f7       	brne	.-10     	; 0x9c <__do_copy_data+0x20>
  a6:	fe 01       	movw	r30, r28
  a8:	04 c0       	rjmp	.+8      	; 0xb2 <__do_clear_bss+0x8>

000000aa <__do_clear_bss>:
  aa:	1d 92       	st	X+, r1
  ac:	a2 17       	cp	r26, r18
  ae:	b3 07       	cpc	r27, r19
  b0:	e1 f7       	brne	.-8      	; 0xaa <__do_clear_bss>
  b2:	ef 36       	cpi	r30, 0x6F	; 111
  b4:	f4 07       	cpc	r31, r20
  b6:	31 f7       	brne	.-52     	; 0x84 <__do_copy_data+0x8>
  b8:	0e 94 7e 00 	call	0xfc	; 0xfc <main>
  bc:	0c 94 c3 01 	jmp	0x386	; 0x386 <exit>

000000c0 <_exit>:
  c0:	f8 94       	cli

000000c2 <__stop_program>:
  c2:	ff cf       	rjmp	.-2      	; 0xc2 <__stop_program>

Disassembly of section .text:

000003ba <__bad_interrupt>:
 3ba:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.lcd_set_outputs:

00000268 <lcd_set_outputs>:
void lcd_write(uint8_t character){
	lcd_apply_sequence((0b10 << 8) | reverse8(character));
}

void lcd_new_line(void){
	lcd_apply_sequence(0b0000000011);
 268:	cf 93       	push	r28
 26a:	c0 e0       	ldi	r28, 0x00	; 0
 26c:	1f c0       	rjmp	.+62     	; 0x2ac <lcd_set_outputs+0x44>
 26e:	2c 2f       	mov	r18, r28
 270:	30 e0       	ldi	r19, 0x00	; 0
 272:	40 e0       	ldi	r20, 0x00	; 0
 274:	a4 2f       	mov	r26, r20
 276:	c9 01       	movw	r24, r18
 278:	8e 50       	subi	r24, 0x0E	; 14
 27a:	9f 4f       	sbci	r25, 0xFF	; 255
 27c:	af 4f       	sbci	r26, 0xFF	; 255
 27e:	fc 01       	movw	r30, r24
 280:	84 91       	lpm	r24, Z
 282:	28 51       	subi	r18, 0x18	; 24
 284:	3f 4f       	sbci	r19, 0xFF	; 255
 286:	4f 4f       	sbci	r20, 0xFF	; 255
 288:	64 2f       	mov	r22, r20
 28a:	a9 01       	movw	r20, r18
 28c:	fa 01       	movw	r30, r20
 28e:	44 91       	lpm	r20, Z
 290:	81 50       	subi	r24, 0x01	; 1
 292:	e8 2f       	mov	r30, r24
 294:	f0 e0       	ldi	r31, 0x00	; 0
 296:	20 81       	ld	r18, Z
 298:	81 e0       	ldi	r24, 0x01	; 1
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	02 c0       	rjmp	.+4      	; 0x2a2 <lcd_set_outputs+0x3a>
 29e:	88 0f       	add	r24, r24
 2a0:	99 1f       	adc	r25, r25
 2a2:	4a 95       	dec	r20
 2a4:	e2 f7       	brpl	.-8      	; 0x29e <lcd_set_outputs+0x36>
 2a6:	82 2b       	or	r24, r18
 2a8:	80 83       	st	Z, r24
 2aa:	cf 5f       	subi	r28, 0xFF	; 255
 2ac:	ca 30       	cpi	r28, 0x0A	; 10
 2ae:	f8 f2       	brcs	.-66     	; 0x26e <lcd_set_outputs+0x6>
 2b0:	cf 91       	pop	r28
 2b2:	08 95       	ret

Disassembly of section .text.pulse_enable:

000002ea <pulse_enable>:
 2ea:	8f e3       	ldi	r24, 0x3F	; 63
 2ec:	9f e1       	ldi	r25, 0x1F	; 31
 2ee:	01 97       	sbiw	r24, 0x01	; 1
 2f0:	f1 f7       	brne	.-4      	; 0x2ee <pulse_enable+0x4>
 2f2:	00 c0       	rjmp	.+0      	; 0x2f4 <pulse_enable+0xa>
 2f4:	00 00       	nop
 2f6:	85 b1       	in	r24, 0x05	; 5
 2f8:	80 62       	ori	r24, 0x20	; 32
 2fa:	85 b9       	out	0x05, r24	; 5
 2fc:	8f e3       	ldi	r24, 0x3F	; 63
 2fe:	9f e1       	ldi	r25, 0x1F	; 31
 300:	01 97       	sbiw	r24, 0x01	; 1
 302:	f1 f7       	brne	.-4      	; 0x300 <pulse_enable+0x16>
 304:	00 c0       	rjmp	.+0      	; 0x306 <pulse_enable+0x1c>
 306:	00 00       	nop
 308:	85 b1       	in	r24, 0x05	; 5
 30a:	8f 7d       	andi	r24, 0xDF	; 223
 30c:	85 b9       	out	0x05, r24	; 5
 30e:	8f e3       	ldi	r24, 0x3F	; 63
 310:	9f e1       	ldi	r25, 0x1F	; 31
 312:	01 97       	sbiw	r24, 0x01	; 1
 314:	f1 f7       	brne	.-4      	; 0x312 <pulse_enable+0x28>
 316:	00 c0       	rjmp	.+0      	; 0x318 <pulse_enable+0x2e>
 318:	00 00       	nop
 31a:	08 95       	ret

Disassembly of section .text.lcd_apply_sequence:

0000018c <lcd_apply_sequence>:
 18c:	cf 92       	push	r12
 18e:	df 92       	push	r13
 190:	ef 92       	push	r14
 192:	ff 92       	push	r15
 194:	cf 93       	push	r28
 196:	df 93       	push	r29
 198:	a0 e0       	ldi	r26, 0x00	; 0
 19a:	33 c0       	rjmp	.+102    	; 0x202 <lcd_apply_sequence+0x76>
 19c:	2a 2f       	mov	r18, r26
 19e:	30 e0       	ldi	r19, 0x00	; 0
 1a0:	40 e0       	ldi	r20, 0x00	; 0
 1a2:	e4 2f       	mov	r30, r20
 1a4:	e9 01       	movw	r28, r18
 1a6:	ce 50       	subi	r28, 0x0E	; 14
 1a8:	df 4f       	sbci	r29, 0xFF	; 255
 1aa:	ef 4f       	sbci	r30, 0xFF	; 255
 1ac:	6e 01       	movw	r12, r28
 1ae:	ee 2e       	mov	r14, r30
 1b0:	f6 01       	movw	r30, r12
 1b2:	c4 90       	lpm	r12, Z
 1b4:	28 51       	subi	r18, 0x18	; 24
 1b6:	3f 4f       	sbci	r19, 0xFF	; 255
 1b8:	4f 4f       	sbci	r20, 0xFF	; 255
 1ba:	64 2f       	mov	r22, r20
 1bc:	a9 01       	movw	r20, r18
 1be:	fa 01       	movw	r30, r20
 1c0:	44 91       	lpm	r20, Z
 1c2:	21 e0       	ldi	r18, 0x01	; 1
 1c4:	30 e0       	ldi	r19, 0x00	; 0
 1c6:	02 c0       	rjmp	.+4      	; 0x1cc <lcd_apply_sequence+0x40>
 1c8:	22 0f       	add	r18, r18
 1ca:	33 1f       	adc	r19, r19
 1cc:	4a 95       	dec	r20
 1ce:	e2 f7       	brpl	.-8      	; 0x1c8 <lcd_apply_sequence+0x3c>
 1d0:	40 e0       	ldi	r20, 0x00	; 0
 1d2:	52 e0       	ldi	r21, 0x02	; 2
 1d4:	0a 2e       	mov	r0, r26
 1d6:	02 c0       	rjmp	.+4      	; 0x1dc <lcd_apply_sequence+0x50>
 1d8:	55 95       	asr	r21
 1da:	47 95       	ror	r20
 1dc:	0a 94       	dec	r0
 1de:	e2 f7       	brpl	.-8      	; 0x1d8 <lcd_apply_sequence+0x4c>
 1e0:	48 23       	and	r20, r24
 1e2:	59 23       	and	r21, r25
 1e4:	45 2b       	or	r20, r21
 1e6:	31 f0       	breq	.+12     	; 0x1f4 <lcd_apply_sequence+0x68>
 1e8:	ec 2d       	mov	r30, r12
 1ea:	f0 e0       	ldi	r31, 0x00	; 0
 1ec:	30 81       	ld	r19, Z
 1ee:	23 2b       	or	r18, r19
 1f0:	20 83       	st	Z, r18
 1f2:	06 c0       	rjmp	.+12     	; 0x200 <lcd_apply_sequence+0x74>
 1f4:	ec 2d       	mov	r30, r12
 1f6:	f0 e0       	ldi	r31, 0x00	; 0
 1f8:	30 81       	ld	r19, Z
 1fa:	20 95       	com	r18
 1fc:	23 23       	and	r18, r19
 1fe:	20 83       	st	Z, r18
 200:	af 5f       	subi	r26, 0xFF	; 255
 202:	aa 30       	cpi	r26, 0x0A	; 10
 204:	58 f2       	brcs	.-106    	; 0x19c <lcd_apply_sequence+0x10>
 206:	0e 94 75 01 	call	0x2ea	; 0x2ea <pulse_enable>
 20a:	df 91       	pop	r29
 20c:	cf 91       	pop	r28
 20e:	ff 90       	pop	r15
 210:	ef 90       	pop	r14
 212:	df 90       	pop	r13
 214:	cf 90       	pop	r12
 216:	08 95       	ret

Disassembly of section .text.lcd_start_sequence:

00000348 <lcd_start_sequence>:
	pulse_enable();
}


void lcd_start_sequence(void){
	lcd_apply_sequence(0b0000001100);
 348:	8c e0       	ldi	r24, 0x0C	; 12
 34a:	90 e0       	ldi	r25, 0x00	; 0
 34c:	0e 94 c6 00 	call	0x18c	; 0x18c <lcd_apply_sequence>
	lcd_apply_sequence(0b0000011100);
 350:	8c e1       	ldi	r24, 0x1C	; 28
 352:	90 e0       	ldi	r25, 0x00	; 0
 354:	0e 94 c6 00 	call	0x18c	; 0x18c <lcd_apply_sequence>
	lcd_apply_sequence(0b0010000000);
 358:	80 e8       	ldi	r24, 0x80	; 128
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	0e 94 c6 00 	call	0x18c	; 0x18c <lcd_apply_sequence>
	lcd_apply_sequence(0b0011110000);
 360:	80 ef       	ldi	r24, 0xF0	; 240
 362:	90 e0       	ldi	r25, 0x00	; 0
 364:	0e 94 c6 00 	call	0x18c	; 0x18c <lcd_apply_sequence>
 368:	08 95       	ret

Disassembly of section .text.lcd_write:

00000218 <lcd_write>:
void lcd_write(uint8_t character){
	lcd_apply_sequence((0b10 << 8) | reverse8(character));
}

void lcd_new_line(void){
	lcd_apply_sequence(0b0000000011);
 218:	90 e1       	ldi	r25, 0x10	; 16
 21a:	89 9f       	mul	r24, r25
 21c:	90 01       	movw	r18, r0
 21e:	11 24       	eor	r1, r1
 220:	82 95       	swap	r24
 222:	8f 70       	andi	r24, 0x0F	; 15
 224:	28 2b       	or	r18, r24
 226:	82 2f       	mov	r24, r18
 228:	8c 7c       	andi	r24, 0xCC	; 204
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	ac 01       	movw	r20, r24
 22e:	55 95       	asr	r21
 230:	47 95       	ror	r20
 232:	55 95       	asr	r21
 234:	47 95       	ror	r20
 236:	23 73       	andi	r18, 0x33	; 51
 238:	82 2f       	mov	r24, r18
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	88 0f       	add	r24, r24
 23e:	99 1f       	adc	r25, r25
 240:	88 0f       	add	r24, r24
 242:	99 1f       	adc	r25, r25
 244:	84 2b       	or	r24, r20
 246:	28 2f       	mov	r18, r24
 248:	2a 7a       	andi	r18, 0xAA	; 170
 24a:	30 e0       	ldi	r19, 0x00	; 0
 24c:	35 95       	asr	r19
 24e:	27 95       	ror	r18
 250:	98 2f       	mov	r25, r24
 252:	95 75       	andi	r25, 0x55	; 85
 254:	89 2f       	mov	r24, r25
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	88 0f       	add	r24, r24
 25a:	99 1f       	adc	r25, r25
 25c:	82 2b       	or	r24, r18
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	92 60       	ori	r25, 0x02	; 2
 262:	0e 94 c6 00 	call	0x18c	; 0x18c <lcd_apply_sequence>
 266:	08 95       	ret

Disassembly of section .text.lcd_write_str:

0000031c <lcd_write_str>:
}

void lcd_write_str(const char *s) {
 31c:	cf 92       	push	r12
 31e:	df 92       	push	r13
 320:	ef 92       	push	r14
 322:	6b 01       	movw	r12, r22
 324:	e8 2e       	mov	r14, r24
	while (*s) {
 326:	06 c0       	rjmp	.+12     	; 0x334 <lcd_write_str+0x18>
		lcd_write((uint8_t)*s++);
 328:	9f ef       	ldi	r25, 0xFF	; 255
 32a:	c9 1a       	sub	r12, r25
 32c:	d9 0a       	sbc	r13, r25
 32e:	e9 0a       	sbc	r14, r25
 330:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_write>
void lcd_new_line(void){
	lcd_apply_sequence(0b0000000011);
}

void lcd_write_str(const char *s) {
	while (*s) {
 334:	f6 01       	movw	r30, r12
 336:	84 91       	lpm	r24, Z
 338:	e7 fc       	sbrc	r14, 7
 33a:	80 81       	ld	r24, Z
 33c:	81 11       	cpse	r24, r1
 33e:	f4 cf       	rjmp	.-24     	; 0x328 <lcd_write_str+0xc>
		lcd_write((uint8_t)*s++);
	}
}
 340:	ef 90       	pop	r14
 342:	df 90       	pop	r13
 344:	cf 90       	pop	r12
 346:	08 95       	ret

Disassembly of section .text.adc_init:

000003ac <adc_init>:
	_delay_ms(2); // commands like clear/home need >1.5 ms
}
static inline void lcd_clear(void){ lcd_cmd(0x01); }   // HD44780 "clear display"

void adc_init(void){
	ADMUX  = (1<<REFS0);            
 3ac:	80 e4       	ldi	r24, 0x40	; 64
 3ae:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	ADCSRA = (1<<ADEN) | 0x07;      
 3b2:	87 e8       	ldi	r24, 0x87	; 135
 3b4:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 3b8:	08 95       	ret

Disassembly of section .text.adc_read:

0000036a <adc_read>:
}

uint16_t adc_read(void){
	ADCSRA |= (1<<ADSC);
 36a:	ea e7       	ldi	r30, 0x7A	; 122
 36c:	f0 e0       	ldi	r31, 0x00	; 0
 36e:	80 81       	ld	r24, Z
 370:	80 64       	ori	r24, 0x40	; 64
 372:	80 83       	st	Z, r24
	while (ADCSRA & (1<<ADSC));
 374:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 378:	86 fd       	sbrc	r24, 6
 37a:	fc cf       	rjmp	.-8      	; 0x374 <adc_read+0xa>
	return ADC;
 37c:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 380:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
}
 384:	08 95       	ret

Disassembly of section .text.read_key_index:

000002b4 <read_key_index>:
void lcd_write(uint8_t character){
	lcd_apply_sequence((0b10 << 8) | reverse8(character));
}

void lcd_new_line(void){
	lcd_apply_sequence(0b0000000011);
 2b4:	0e 94 b5 01 	call	0x36a	; 0x36a <adc_read>
 2b8:	dc 01       	movw	r26, r24
 2ba:	80 e0       	ldi	r24, 0x00	; 0
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	01 c0       	rjmp	.+2      	; 0x2c2 <read_key_index+0xe>
 2c0:	01 96       	adiw	r24, 0x01	; 1
 2c2:	8f 30       	cpi	r24, 0x0F	; 15
 2c4:	91 05       	cpc	r25, r1
 2c6:	84 f4       	brge	.+32     	; 0x2e8 <read_key_index+0x34>
 2c8:	9c 01       	movw	r18, r24
 2ca:	22 0f       	add	r18, r18
 2cc:	33 1f       	adc	r19, r19
 2ce:	03 2e       	mov	r0, r19
 2d0:	00 0c       	add	r0, r0
 2d2:	44 0b       	sbc	r20, r20
 2d4:	2c 53       	subi	r18, 0x3C	; 60
 2d6:	3f 4f       	sbci	r19, 0xFF	; 255
 2d8:	4f 4f       	sbci	r20, 0xFF	; 255
 2da:	f9 01       	movw	r30, r18
 2dc:	54 2f       	mov	r21, r20
 2de:	0e 94 ce 01 	call	0x39c	; 0x39c <__xload_2>
 2e2:	6a 17       	cp	r22, r26
 2e4:	7b 07       	cpc	r23, r27
 2e6:	60 f3       	brcs	.-40     	; 0x2c0 <read_key_index+0xc>
 2e8:	08 95       	ret

Disassembly of section .text.main:

000000fc <main>:
  fc:	0e 94 34 01 	call	0x268	; 0x268 <lcd_set_outputs>
 100:	0e 94 a4 01 	call	0x348	; 0x348 <lcd_start_sequence>
 104:	0e 94 d6 01 	call	0x3ac	; 0x3ac <adc_init>
 108:	62 ee       	ldi	r22, 0xE2	; 226
 10a:	70 e0       	ldi	r23, 0x00	; 0
 10c:	80 e0       	ldi	r24, 0x00	; 0
 10e:	0e 94 8e 01 	call	0x31c	; 0x31c <lcd_write_str>
 112:	d0 e0       	ldi	r29, 0x00	; 0
 114:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <read_key_index>
 118:	9c 01       	movw	r18, r24
 11a:	99 23       	and	r25, r25
 11c:	14 f4       	brge	.+4      	; 0x122 <main+0x26>
 11e:	2d 5f       	subi	r18, 0xFD	; 253
 120:	3f 4f       	sbci	r19, 0xFF	; 255
 122:	35 95       	asr	r19
 124:	27 95       	ror	r18
 126:	35 95       	asr	r19
 128:	27 95       	ror	r18
 12a:	83 70       	andi	r24, 0x03	; 3
 12c:	90 78       	andi	r25, 0x80	; 128
 12e:	99 23       	and	r25, r25
 130:	24 f4       	brge	.+8      	; 0x13a <main+0x3e>
 132:	01 97       	sbiw	r24, 0x01	; 1
 134:	8c 6f       	ori	r24, 0xFC	; 252
 136:	9f 6f       	ori	r25, 0xFF	; 255
 138:	01 96       	adiw	r24, 0x01	; 1
 13a:	22 0f       	add	r18, r18
 13c:	33 1f       	adc	r19, r19
 13e:	22 0f       	add	r18, r18
 140:	33 1f       	adc	r19, r19
 142:	20 50       	subi	r18, 0x00	; 0
 144:	3f 4f       	sbci	r19, 0xFF	; 255
 146:	f9 01       	movw	r30, r18
 148:	e8 0f       	add	r30, r24
 14a:	f9 1f       	adc	r31, r25
 14c:	c0 81       	ld	r28, Z
 14e:	dc 17       	cp	r29, r28
 150:	99 f0       	breq	.+38     	; 0x178 <main+0x7c>
 152:	80 e8       	ldi	r24, 0x80	; 128
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	0e 94 c6 00 	call	0x18c	; 0x18c <lcd_apply_sequence>
 15a:	8f e3       	ldi	r24, 0x3F	; 63
 15c:	9f e1       	ldi	r25, 0x1F	; 31
 15e:	01 97       	sbiw	r24, 0x01	; 1
 160:	f1 f7       	brne	.-4      	; 0x15e <main+0x62>
 162:	00 c0       	rjmp	.+0      	; 0x164 <main+0x68>
 164:	00 00       	nop
 166:	62 ee       	ldi	r22, 0xE2	; 226
 168:	70 e0       	ldi	r23, 0x00	; 0
 16a:	80 e0       	ldi	r24, 0x00	; 0
 16c:	0e 94 8e 01 	call	0x31c	; 0x31c <lcd_write_str>
 170:	8c 2f       	mov	r24, r28
 172:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_write>
 176:	dc 2f       	mov	r29, r28
 178:	9f ef       	ldi	r25, 0xFF	; 255
 17a:	29 ef       	ldi	r18, 0xF9	; 249
 17c:	80 e0       	ldi	r24, 0x00	; 0
 17e:	91 50       	subi	r25, 0x01	; 1
 180:	20 40       	sbci	r18, 0x00	; 0
 182:	80 40       	sbci	r24, 0x00	; 0
 184:	e1 f7       	brne	.-8      	; 0x17e <main+0x82>
 186:	00 c0       	rjmp	.+0      	; 0x188 <main+0x8c>
 188:	00 00       	nop
 18a:	c4 cf       	rjmp	.-120    	; 0x114 <main+0x18>

Disassembly of section .text.libgcc:

0000039c <__xload_2>:
 39c:	57 fd       	sbrc	r21, 7
 39e:	03 c0       	rjmp	.+6      	; 0x3a6 <__xload_2+0xa>
 3a0:	65 91       	lpm	r22, Z+
 3a2:	75 91       	lpm	r23, Z+
 3a4:	08 95       	ret
 3a6:	61 91       	ld	r22, Z+
 3a8:	71 91       	ld	r23, Z+
 3aa:	08 95       	ret

Disassembly of section .text.__dummy_fini:

000003c2 <_fini>:
 3c2:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

000003c4 <__funcs_on_exit>:
 3c4:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

000003c6 <__simulator_exit>:
 3c6:	08 95       	ret

Disassembly of section .text.exit:

00000386 <exit>:
 386:	ec 01       	movw	r28, r24
 388:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <__funcs_on_exit>
 38c:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <_fini>
 390:	ce 01       	movw	r24, r28
 392:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <__simulator_exit>
 396:	ce 01       	movw	r24, r28
 398:	0e 94 df 01 	call	0x3be	; 0x3be <_Exit>

Disassembly of section .text._Exit:

000003be <_Exit>:
 3be:	0e 94 60 00 	call	0xc0	; 0xc0 <_exit>
